{"ast":null,"code":"'use strict';\n\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\n\nconst handleTimestampOption = require('../schema/handleTimestampOption');\n\nmodule.exports = applyTimestampsToChildren;\n/*!\n * ignore\n */\n\nfunction applyTimestampsToChildren(now, update, schema) {\n  if (update == null) {\n    return;\n  }\n\n  const keys = Object.keys(update);\n  const hasDollarKey = keys.some(key => key[0] === '$');\n\n  if (hasDollarKey) {\n    if (update.$push) {\n      _applyTimestampToUpdateOperator(update.$push);\n    }\n\n    if (update.$addToSet) {\n      _applyTimestampToUpdateOperator(update.$addToSet);\n    }\n\n    if (update.$set != null) {\n      const keys = Object.keys(update.$set);\n\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$set, now);\n      }\n    }\n\n    if (update.$setOnInsert != null) {\n      const keys = Object.keys(update.$setOnInsert);\n\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$setOnInsert, now);\n      }\n    }\n  }\n\n  const updateKeys = Object.keys(update).filter(key => key[0] !== '$');\n\n  for (const key of updateKeys) {\n    applyTimestampsToUpdateKey(schema, key, update, now);\n  }\n\n  function _applyTimestampToUpdateOperator(op) {\n    for (const key of Object.keys(op)) {\n      const $path = schema.path(key.replace(/\\.\\$\\./i, '.').replace(/.\\$$/, ''));\n\n      if (op[key] && $path && $path.$isMongooseDocumentArray && $path.schema.options.timestamps) {\n        const timestamps = $path.schema.options.timestamps;\n        const createdAt = handleTimestampOption(timestamps, 'createdAt');\n        const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n        if (op[key].$each) {\n          op[key].$each.forEach(function (subdoc) {\n            if (updatedAt != null) {\n              subdoc[updatedAt] = now;\n            }\n\n            if (createdAt != null) {\n              subdoc[createdAt] = now;\n            }\n\n            applyTimestampsToChildren(now, subdoc, $path.schema);\n          });\n        } else {\n          if (updatedAt != null) {\n            op[key][updatedAt] = now;\n          }\n\n          if (createdAt != null) {\n            op[key][createdAt] = now;\n          }\n\n          applyTimestampsToChildren(now, op[key], $path.schema);\n        }\n      }\n    }\n  }\n}\n\nfunction applyTimestampsToDocumentArray(arr, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n\n  if (!timestamps) {\n    return;\n  }\n\n  const len = arr.length;\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n  for (let i = 0; i < len; ++i) {\n    if (updatedAt != null) {\n      arr[i][updatedAt] = now;\n    }\n\n    if (createdAt != null) {\n      arr[i][createdAt] = now;\n    }\n\n    applyTimestampsToChildren(now, arr[i], schematype.schema);\n  }\n}\n\nfunction applyTimestampsToSingleNested(subdoc, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n\n  if (!timestamps) {\n    return;\n  }\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n  if (updatedAt != null) {\n    subdoc[updatedAt] = now;\n  }\n\n  if (createdAt != null) {\n    subdoc[createdAt] = now;\n  }\n\n  applyTimestampsToChildren(now, subdoc, schematype.schema);\n}\n\nfunction applyTimestampsToUpdateKey(schema, key, update, now) {\n  // Replace positional operator `$` and array filters `$[]` and `$[.*]`\n  const keyToSearch = cleanPositionalOperators(key);\n  const path = schema.path(keyToSearch);\n\n  if (!path) {\n    return;\n  }\n\n  const parentSchemaTypes = [];\n  const pieces = keyToSearch.split('.');\n\n  for (let i = pieces.length - 1; i > 0; --i) {\n    const s = schema.path(pieces.slice(0, i).join('.'));\n\n    if (s != null && (s.$isMongooseDocumentArray || s.$isSingleNested)) {\n      parentSchemaTypes.push({\n        parentPath: key.split('.').slice(0, i).join('.'),\n        parentSchemaType: s\n      });\n    }\n  }\n\n  if (Array.isArray(update[key]) && path.$isMongooseDocumentArray) {\n    applyTimestampsToDocumentArray(update[key], path, now);\n  } else if (update[key] && path.$isSingleNested) {\n    applyTimestampsToSingleNested(update[key], path, now);\n  } else if (parentSchemaTypes.length > 0) {\n    for (const item of parentSchemaTypes) {\n      const parentPath = item.parentPath;\n      const parentSchemaType = item.parentSchemaType;\n      const timestamps = parentSchemaType.schema.options.timestamps;\n      const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n      if (!timestamps || updatedAt == null) {\n        continue;\n      }\n\n      if (parentSchemaType.$isSingleNested) {\n        // Single nested is easy\n        update[parentPath + '.' + updatedAt] = now;\n      } else if (parentSchemaType.$isMongooseDocumentArray) {\n        let childPath = key.substring(parentPath.length + 1);\n\n        if (/^\\d+$/.test(childPath)) {\n          update[parentPath + '.' + childPath][updatedAt] = now;\n          continue;\n        }\n\n        const firstDot = childPath.indexOf('.');\n        childPath = firstDot !== -1 ? childPath.substring(0, firstDot) : childPath;\n        update[parentPath + '.' + childPath + '.' + updatedAt] = now;\n      }\n    }\n  } else if (path.schema != null && path.schema != schema && update[key]) {\n    const timestamps = path.schema.options.timestamps;\n    const createdAt = handleTimestampOption(timestamps, 'createdAt');\n    const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n    if (!timestamps) {\n      return;\n    }\n\n    if (updatedAt != null) {\n      update[key][updatedAt] = now;\n    }\n\n    if (createdAt != null) {\n      update[key][createdAt] = now;\n    }\n  }\n}","map":{"version":3,"names":["cleanPositionalOperators","require","handleTimestampOption","module","exports","applyTimestampsToChildren","now","update","schema","keys","Object","hasDollarKey","some","key","$push","_applyTimestampToUpdateOperator","$addToSet","$set","applyTimestampsToUpdateKey","$setOnInsert","updateKeys","filter","op","$path","path","replace","$isMongooseDocumentArray","options","timestamps","createdAt","updatedAt","$each","forEach","subdoc","applyTimestampsToDocumentArray","arr","schematype","len","length","i","applyTimestampsToSingleNested","keyToSearch","parentSchemaTypes","pieces","split","s","slice","join","$isSingleNested","push","parentPath","parentSchemaType","Array","isArray","item","childPath","substring","test","firstDot","indexOf"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/helpers/update/applyTimestampsToChildren.js"],"sourcesContent":["'use strict';\n\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\nconst handleTimestampOption = require('../schema/handleTimestampOption');\n\nmodule.exports = applyTimestampsToChildren;\n\n/*!\n * ignore\n */\n\nfunction applyTimestampsToChildren(now, update, schema) {\n  if (update == null) {\n    return;\n  }\n\n  const keys = Object.keys(update);\n  const hasDollarKey = keys.some(key => key[0] === '$');\n\n  if (hasDollarKey) {\n    if (update.$push) {\n      _applyTimestampToUpdateOperator(update.$push);\n    }\n    if (update.$addToSet) {\n      _applyTimestampToUpdateOperator(update.$addToSet);\n    }\n    if (update.$set != null) {\n      const keys = Object.keys(update.$set);\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$set, now);\n      }\n    }\n    if (update.$setOnInsert != null) {\n      const keys = Object.keys(update.$setOnInsert);\n      for (const key of keys) {\n        applyTimestampsToUpdateKey(schema, key, update.$setOnInsert, now);\n      }\n    }\n  }\n\n  const updateKeys = Object.keys(update).filter(key => key[0] !== '$');\n  for (const key of updateKeys) {\n    applyTimestampsToUpdateKey(schema, key, update, now);\n  }\n\n  function _applyTimestampToUpdateOperator(op) {\n    for (const key of Object.keys(op)) {\n      const $path = schema.path(key.replace(/\\.\\$\\./i, '.').replace(/.\\$$/, ''));\n      if (op[key] &&\n          $path &&\n          $path.$isMongooseDocumentArray &&\n          $path.schema.options.timestamps) {\n        const timestamps = $path.schema.options.timestamps;\n        const createdAt = handleTimestampOption(timestamps, 'createdAt');\n        const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n        if (op[key].$each) {\n          op[key].$each.forEach(function(subdoc) {\n            if (updatedAt != null) {\n              subdoc[updatedAt] = now;\n            }\n            if (createdAt != null) {\n              subdoc[createdAt] = now;\n            }\n\n            applyTimestampsToChildren(now, subdoc, $path.schema);\n          });\n        } else {\n          if (updatedAt != null) {\n            op[key][updatedAt] = now;\n          }\n          if (createdAt != null) {\n            op[key][createdAt] = now;\n          }\n\n          applyTimestampsToChildren(now, op[key], $path.schema);\n        }\n      }\n    }\n  }\n}\n\nfunction applyTimestampsToDocumentArray(arr, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n\n  if (!timestamps) {\n    return;\n  }\n\n  const len = arr.length;\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  for (let i = 0; i < len; ++i) {\n    if (updatedAt != null) {\n      arr[i][updatedAt] = now;\n    }\n    if (createdAt != null) {\n      arr[i][createdAt] = now;\n    }\n\n    applyTimestampsToChildren(now, arr[i], schematype.schema);\n  }\n}\n\nfunction applyTimestampsToSingleNested(subdoc, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n  if (!timestamps) {\n    return;\n  }\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  if (updatedAt != null) {\n    subdoc[updatedAt] = now;\n  }\n  if (createdAt != null) {\n    subdoc[createdAt] = now;\n  }\n\n  applyTimestampsToChildren(now, subdoc, schematype.schema);\n}\n\nfunction applyTimestampsToUpdateKey(schema, key, update, now) {\n  // Replace positional operator `$` and array filters `$[]` and `$[.*]`\n  const keyToSearch = cleanPositionalOperators(key);\n  const path = schema.path(keyToSearch);\n  if (!path) {\n    return;\n  }\n\n  const parentSchemaTypes = [];\n  const pieces = keyToSearch.split('.');\n  for (let i = pieces.length - 1; i > 0; --i) {\n    const s = schema.path(pieces.slice(0, i).join('.'));\n    if (s != null &&\n      (s.$isMongooseDocumentArray || s.$isSingleNested)) {\n      parentSchemaTypes.push({ parentPath: key.split('.').slice(0, i).join('.'), parentSchemaType: s });\n    }\n  }\n\n  if (Array.isArray(update[key]) && path.$isMongooseDocumentArray) {\n    applyTimestampsToDocumentArray(update[key], path, now);\n  } else if (update[key] && path.$isSingleNested) {\n    applyTimestampsToSingleNested(update[key], path, now);\n  } else if (parentSchemaTypes.length > 0) {\n    for (const item of parentSchemaTypes) {\n      const parentPath = item.parentPath;\n      const parentSchemaType = item.parentSchemaType;\n      const timestamps = parentSchemaType.schema.options.timestamps;\n      const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n      if (!timestamps || updatedAt == null) {\n        continue;\n      }\n\n      if (parentSchemaType.$isSingleNested) {\n        // Single nested is easy\n        update[parentPath + '.' + updatedAt] = now;\n      } else if (parentSchemaType.$isMongooseDocumentArray) {\n        let childPath = key.substring(parentPath.length + 1);\n\n        if (/^\\d+$/.test(childPath)) {\n          update[parentPath + '.' + childPath][updatedAt] = now;\n          continue;\n        }\n\n        const firstDot = childPath.indexOf('.');\n        childPath = firstDot !== -1 ? childPath.substring(0, firstDot) : childPath;\n\n        update[parentPath + '.' + childPath + '.' + updatedAt] = now;\n      }\n    }\n  } else if (path.schema != null && path.schema != schema && update[key]) {\n    const timestamps = path.schema.options.timestamps;\n    const createdAt = handleTimestampOption(timestamps, 'createdAt');\n    const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n    if (!timestamps) {\n      return;\n    }\n\n    if (updatedAt != null) {\n      update[key][updatedAt] = now;\n    }\n    if (createdAt != null) {\n      update[key][createdAt] = now;\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}