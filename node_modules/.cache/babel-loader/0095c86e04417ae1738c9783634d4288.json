{"ast":null,"code":"'use strict';\n\nconst applyTimestampsToChildren = require('../update/applyTimestampsToChildren');\n\nconst applyTimestampsToUpdate = require('../update/applyTimestampsToUpdate');\n\nconst get = require('../get');\n\nconst handleTimestampOption = require('../schema/handleTimestampOption');\n\nconst symbols = require('../../schema/symbols');\n\nmodule.exports = function setupTimestamps(schema, timestamps) {\n  const childHasTimestamp = schema.childSchemas.find(withTimestamp);\n\n  function withTimestamp(s) {\n    const ts = s.schema.options.timestamps;\n    return !!ts;\n  }\n\n  if (!timestamps && !childHasTimestamp) {\n    return;\n  }\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  const currentTime = timestamps != null && timestamps.hasOwnProperty('currentTime') ? timestamps.currentTime : null;\n  const schemaAdditions = {};\n  schema.$timestamps = {\n    createdAt: createdAt,\n    updatedAt: updatedAt\n  };\n\n  if (updatedAt && !schema.paths[updatedAt]) {\n    schemaAdditions[updatedAt] = Date;\n  }\n\n  if (createdAt && !schema.paths[createdAt]) {\n    schemaAdditions[createdAt] = {\n      [schema.options.typeKey || 'type']: Date,\n      immutable: true\n    };\n  }\n\n  schema.add(schemaAdditions);\n  schema.pre('save', function (next) {\n    const timestampOption = get(this, '$__.saveOptions.timestamps');\n\n    if (timestampOption === false) {\n      return next();\n    }\n\n    const skipUpdatedAt = timestampOption != null && timestampOption.updatedAt === false;\n    const skipCreatedAt = timestampOption != null && timestampOption.createdAt === false;\n    const defaultTimestamp = currentTime != null ? currentTime() : this.ownerDocument().constructor.base.now();\n\n    if (!skipCreatedAt && (this.isNew || this.$isSubdocument) && createdAt && !this.$__getValue(createdAt) && this.$__isSelected(createdAt)) {\n      this.$set(createdAt, defaultTimestamp, undefined, {\n        overwriteImmutable: true\n      });\n    }\n\n    if (!skipUpdatedAt && updatedAt && (this.isNew || this.$isModified())) {\n      let ts = defaultTimestamp;\n\n      if (this.isNew && createdAt != null) {\n        ts = this.$__getValue(createdAt);\n      }\n\n      this.$set(updatedAt, ts);\n    }\n\n    next();\n  });\n\n  schema.methods.initializeTimestamps = function () {\n    const ts = currentTime != null ? currentTime() : this.constructor.base.now();\n\n    if (createdAt && !this.get(createdAt)) {\n      this.$set(createdAt, ts);\n    }\n\n    if (updatedAt && !this.get(updatedAt)) {\n      this.$set(updatedAt, ts);\n    }\n\n    return this;\n  };\n\n  _setTimestampsOnUpdate[symbols.builtInMiddleware] = true;\n  const opts = {\n    query: true,\n    model: false\n  };\n  schema.pre('findOneAndReplace', opts, _setTimestampsOnUpdate);\n  schema.pre('findOneAndUpdate', opts, _setTimestampsOnUpdate);\n  schema.pre('replaceOne', opts, _setTimestampsOnUpdate);\n  schema.pre('update', opts, _setTimestampsOnUpdate);\n  schema.pre('updateOne', opts, _setTimestampsOnUpdate);\n  schema.pre('updateMany', opts, _setTimestampsOnUpdate);\n\n  function _setTimestampsOnUpdate(next) {\n    const now = currentTime != null ? currentTime() : this.model.base.now(); // Replacing with null update should still trigger timestamps\n\n    if (this.op === 'findOneAndReplace' && this.getUpdate() == null) {\n      this.setUpdate({});\n    }\n\n    applyTimestampsToUpdate(now, createdAt, updatedAt, this.getUpdate(), this.options, this.schema);\n    applyTimestampsToChildren(now, this.getUpdate(), this.model.schema);\n    next();\n  }\n};","map":{"version":3,"names":["applyTimestampsToChildren","require","applyTimestampsToUpdate","get","handleTimestampOption","symbols","module","exports","setupTimestamps","schema","timestamps","childHasTimestamp","childSchemas","find","withTimestamp","s","ts","options","createdAt","updatedAt","currentTime","hasOwnProperty","schemaAdditions","$timestamps","paths","Date","typeKey","immutable","add","pre","next","timestampOption","skipUpdatedAt","skipCreatedAt","defaultTimestamp","ownerDocument","constructor","base","now","isNew","$isSubdocument","$__getValue","$__isSelected","$set","undefined","overwriteImmutable","$isModified","methods","initializeTimestamps","_setTimestampsOnUpdate","builtInMiddleware","opts","query","model","op","getUpdate","setUpdate"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/helpers/timestamps/setupTimestamps.js"],"sourcesContent":["'use strict';\n\nconst applyTimestampsToChildren = require('../update/applyTimestampsToChildren');\nconst applyTimestampsToUpdate = require('../update/applyTimestampsToUpdate');\nconst get = require('../get');\nconst handleTimestampOption = require('../schema/handleTimestampOption');\nconst symbols = require('../../schema/symbols');\n\nmodule.exports = function setupTimestamps(schema, timestamps) {\n  const childHasTimestamp = schema.childSchemas.find(withTimestamp);\n  function withTimestamp(s) {\n    const ts = s.schema.options.timestamps;\n    return !!ts;\n  }\n\n  if (!timestamps && !childHasTimestamp) {\n    return;\n  }\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  const currentTime = timestamps != null && timestamps.hasOwnProperty('currentTime') ?\n    timestamps.currentTime :\n    null;\n  const schemaAdditions = {};\n\n  schema.$timestamps = { createdAt: createdAt, updatedAt: updatedAt };\n\n  if (updatedAt && !schema.paths[updatedAt]) {\n    schemaAdditions[updatedAt] = Date;\n  }\n\n  if (createdAt && !schema.paths[createdAt]) {\n    schemaAdditions[createdAt] = { [schema.options.typeKey || 'type']: Date, immutable: true };\n  }\n  schema.add(schemaAdditions);\n\n  schema.pre('save', function(next) {\n    const timestampOption = get(this, '$__.saveOptions.timestamps');\n    if (timestampOption === false) {\n      return next();\n    }\n\n    const skipUpdatedAt = timestampOption != null && timestampOption.updatedAt === false;\n    const skipCreatedAt = timestampOption != null && timestampOption.createdAt === false;\n\n    const defaultTimestamp = currentTime != null ?\n      currentTime() :\n      this.ownerDocument().constructor.base.now();\n\n    if (!skipCreatedAt && (this.isNew || this.$isSubdocument) && createdAt && !this.$__getValue(createdAt) && this.$__isSelected(createdAt)) {\n      this.$set(createdAt, defaultTimestamp, undefined, { overwriteImmutable: true });\n    }\n\n    if (!skipUpdatedAt && updatedAt && (this.isNew || this.$isModified())) {\n      let ts = defaultTimestamp;\n      if (this.isNew && createdAt != null) {\n        ts = this.$__getValue(createdAt);\n      }\n      this.$set(updatedAt, ts);\n    }\n\n    next();\n  });\n\n  schema.methods.initializeTimestamps = function() {\n    const ts = currentTime != null ?\n      currentTime() :\n      this.constructor.base.now();\n    if (createdAt && !this.get(createdAt)) {\n      this.$set(createdAt, ts);\n    }\n    if (updatedAt && !this.get(updatedAt)) {\n      this.$set(updatedAt, ts);\n    }\n    return this;\n  };\n\n  _setTimestampsOnUpdate[symbols.builtInMiddleware] = true;\n\n  const opts = { query: true, model: false };\n  schema.pre('findOneAndReplace', opts, _setTimestampsOnUpdate);\n  schema.pre('findOneAndUpdate', opts, _setTimestampsOnUpdate);\n  schema.pre('replaceOne', opts, _setTimestampsOnUpdate);\n  schema.pre('update', opts, _setTimestampsOnUpdate);\n  schema.pre('updateOne', opts, _setTimestampsOnUpdate);\n  schema.pre('updateMany', opts, _setTimestampsOnUpdate);\n\n  function _setTimestampsOnUpdate(next) {\n    const now = currentTime != null ?\n      currentTime() :\n      this.model.base.now();\n    // Replacing with null update should still trigger timestamps\n    if (this.op === 'findOneAndReplace' && this.getUpdate() == null) {\n      this.setUpdate({});\n    }\n    applyTimestampsToUpdate(now, createdAt, updatedAt, this.getUpdate(),\n      this.options, this.schema);\n    applyTimestampsToChildren(now, this.getUpdate(), this.model.schema);\n    next();\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}