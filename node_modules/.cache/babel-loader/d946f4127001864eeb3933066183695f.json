{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCapabilities = exports.Topology = void 0;\n\nconst Denque = require(\"denque\");\n\nconst bson_1 = require(\"../bson\");\n\nconst connection_string_1 = require(\"../connection_string\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst sessions_1 = require(\"../sessions\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst events_1 = require(\"./events\");\n\nconst server_1 = require(\"./server\");\n\nconst server_description_1 = require(\"./server_description\");\n\nconst server_selection_1 = require(\"./server_selection\");\n\nconst srv_polling_1 = require(\"./srv_polling\");\n\nconst topology_description_1 = require(\"./topology_description\"); // Global state\n\n\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\n\nconst kCancelled = Symbol('cancelled');\n/** @internal */\n\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\n\nclass Topology extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(seeds, options) {\n    var _a;\n\n    super(); // Legacy CSFLE support\n\n    this.bson = Object.create(null);\n    this.bson.serialize = bson_1.serialize;\n    this.bson.deserialize = bson_1.deserialize; // Options should only be undefined in tests, MongoClient will always have defined options\n\n    options = options !== null && options !== void 0 ? options : {\n      hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n      retryReads: connection_string_1.DEFAULT_OPTIONS.get('retryReads'),\n      retryWrites: connection_string_1.DEFAULT_OPTIONS.get('retryWrites'),\n      serverSelectionTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('serverSelectionTimeoutMS'),\n      directConnection: connection_string_1.DEFAULT_OPTIONS.get('directConnection'),\n      loadBalanced: connection_string_1.DEFAULT_OPTIONS.get('loadBalanced'),\n      metadata: connection_string_1.DEFAULT_OPTIONS.get('metadata'),\n      monitorCommands: connection_string_1.DEFAULT_OPTIONS.get('monitorCommands'),\n      tls: connection_string_1.DEFAULT_OPTIONS.get('tls'),\n      maxPoolSize: connection_string_1.DEFAULT_OPTIONS.get('maxPoolSize'),\n      minPoolSize: connection_string_1.DEFAULT_OPTIONS.get('minPoolSize'),\n      waitQueueTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('waitQueueTimeoutMS'),\n      connectionType: connection_string_1.DEFAULT_OPTIONS.get('connectionType'),\n      connectTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('connectTimeoutMS'),\n      maxIdleTimeMS: connection_string_1.DEFAULT_OPTIONS.get('maxIdleTimeMS'),\n      heartbeatFrequencyMS: connection_string_1.DEFAULT_OPTIONS.get('heartbeatFrequencyMS'),\n      minHeartbeatFrequencyMS: connection_string_1.DEFAULT_OPTIONS.get('minHeartbeatFrequencyMS')\n    };\n\n    if (typeof seeds === 'string') {\n      seeds = [utils_1.HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n\n    const seedlist = [];\n\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(utils_1.HostAddress.fromString(seed));\n      } else if (seed instanceof utils_1.HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n    const selectedHosts = options.srvMaxHosts == null || options.srvMaxHosts === 0 || options.srvMaxHosts >= seedlist.length ? seedlist : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n    const serverDescriptions = new Map();\n\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n    }\n\n    this[kWaitQueue] = new Denque();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: common_1.STATE_CLOSED,\n      // the topology description\n      description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new sessions_1.ServerSessionPool(this),\n      // Active client sessions\n      sessions: new Set(),\n      credentials: options === null || options === void 0 ? void 0 : options.credentials,\n      clusterTime: undefined,\n      // timer management\n      connectionTimers: new Set(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller = (_a = options.srvPoller) !== null && _a !== void 0 ? _a : new srv_polling_1.SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        srvMaxHosts: options.srvMaxHosts,\n        srvServiceName: options.srvServiceName\n      });\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n  }\n\n  detectShardedTopology(event) {\n    var _a, _b, _c;\n\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n    const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n    const srvListeners = (_a = this.s.srvPoller) === null || _a === void 0 ? void 0 : _a.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!(srvListeners === null || srvListeners === void 0 ? void 0 : srvListeners.includes(this.s.detectSrvRecords));\n\n    if (transitionToSharded && !listeningToSrvPolling) {\n      (_b = this.s.srvPoller) === null || _b === void 0 ? void 0 : _b.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      (_c = this.s.srvPoller) === null || _c === void 0 ? void 0 : _c.start();\n    }\n  }\n\n  detectSrvRecords(ev) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(this);\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n  }\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n\n\n  get description() {\n    return this.s.description;\n  }\n\n  get loadBalanced() {\n    return this.s.options.loadBalanced;\n  }\n\n  get capabilities() {\n    return new ServerCapabilities(this.lastHello());\n  }\n  /** Initiate server connect */\n\n\n  connect(options, callback) {\n    var _a;\n\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (this.s.state === common_1.STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CONNECTING); // emit SDAM monitoring events\n\n    this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id)); // emit an event for the topology change\n\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n    this.s.description)); // connect all known servers, then attempt server selection to connect\n\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(serverDescriptions.map(serverDescription => [serverDescription.address, createAndConnectServer(this, serverDescription)])); // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n\n    const readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n    this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), options, (err, server) => {\n      if (err) {\n        this.close();\n        typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n        return;\n      } // TODO: NODE-2471\n\n\n      if (server && this.s.credentials) {\n        server.command((0, utils_1.ns)('admin.$cmd'), {\n          ping: 1\n        }, {}, err => {\n          if (err) {\n            typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n            return;\n          }\n\n          stateTransition(this, common_1.STATE_CONNECTED);\n          this.emit(Topology.OPEN, this);\n          this.emit(Topology.CONNECT, this);\n          if (typeof callback === 'function') callback(undefined, this);\n        });\n        return;\n      }\n\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n      if (typeof callback === 'function') callback(undefined, this);\n    });\n  }\n  /** Close this topology */\n\n\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = {\n        force: options\n      };\n    }\n\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n    drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n    (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n    }\n\n    this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    (0, utils_1.eachAsync)(Array.from(this.s.sessions.values()), (session, cb) => session.endSession(cb), () => {\n      this.s.sessionPool.endAllPooledSessions(() => {\n        (0, utils_1.eachAsync)(Array.from(this.s.servers.values()), (server, cb) => destroyServer(server, this, options, cb), err => {\n          this.s.servers.clear(); // emit an event for close\n\n          this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n          stateTransition(this, common_1.STATE_CLOSED);\n\n          if (typeof callback === 'function') {\n            callback(err);\n          }\n        });\n      });\n    });\n  }\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param options - Optional settings related to server selection\n   * @param callback - The callback used to indicate success or failure\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\n   */\n\n\n  selectServer(selector, options, callback) {\n    let serverSelector;\n\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n\n        if (selector instanceof read_preference_1.ReadPreference) {\n          readPreference = selector;\n        } else {\n          read_preference_1.ReadPreference.translate(options);\n          readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n        }\n\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n\n    options = Object.assign({}, {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n    }, options);\n    const isSharded = this.description.type === common_1.TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback\n    };\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${serverSelectionTimeoutMS} ms`, this.description);\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  } // Sessions related methods\n\n  /**\n   * @returns Whether the topology should initiate selection to determine session support\n   */\n\n\n  shouldCheckForSessionSupport() {\n    if (this.description.type === common_1.TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n  /**\n   * @returns Whether sessions are supported on the current topology\n   */\n\n\n  hasSessionSupport() {\n    return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\n  }\n  /** Start a logical session */\n\n\n  startSession(options, clientOptions) {\n    const session = new sessions_1.ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n    this.s.sessions.add(session);\n    return session;\n  }\n  /** Send endSessions command(s) with the given session ids */\n\n\n  endSessions(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    this.selectServer((0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred), {}, (err, server) => {\n      if (err || !server) {\n        if (typeof callback === 'function') callback(err);\n        return;\n      }\n\n      server.command((0, utils_1.ns)('admin.$cmd'), {\n        endSessions: sessions\n      }, {\n        noResponse: true\n      }, (err, result) => {\n        if (typeof callback === 'function') callback(err, result);\n      });\n    });\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n\n\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    } // ignore this server update if its from an outdated topologyVersion\n\n\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    } // these will be used for monitoring events later\n\n\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n\n    if (!previousServerDescription) {\n      return;\n    } // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n\n\n    const clusterTime = serverDescription.$clusterTime;\n\n    if (clusterTime) {\n      (0, common_1._advanceClusterTime)(this, clusterTime);\n    } // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n\n\n    const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription); // first update the TopologyDescription\n\n    this.s.description = this.s.description.update(serverDescription);\n\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    } // emit monitoring events for this change\n\n\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n\n      if (newDescription) {\n        this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n      }\n    } // update server list from updated descriptions\n\n\n    updateServers(this, serverDescription); // attempt to resolve any outstanding server selection attempts\n\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n  }\n\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = undefined;\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n\n  isConnected() {\n    return this.s.state === common_1.STATE_CONNECTED;\n  }\n\n  isDestroyed() {\n    return this.s.state === common_1.STATE_CLOSED;\n  }\n  /**\n   * @deprecated This function is deprecated and will be removed in the next major version.\n   */\n\n\n  unref() {\n    (0, utils_1.emitWarning)('`unref` is a noop and will be removed in the next major version');\n  } // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n\n\n  lastHello() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== common_1.ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n\n  get commonWireVersion() {\n    return this.description.commonWireVersion;\n  }\n\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get clusterTime() {\n    return this.s.clusterTime;\n  }\n\n  set clusterTime(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n\n}\n\nexports.Topology = Topology;\n/** @event */\n\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\n\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\n\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\n\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\n\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\n\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\n\nTopology.ERROR = constants_1.ERROR;\n/** @event */\n\nTopology.OPEN = constants_1.OPEN;\n/** @event */\n\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\n\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\n\nTopology.TIMEOUT = constants_1.TIMEOUT;\n/** Destroys a server, and removes all event listeners from the instance */\n\nfunction destroyServer(server, topology, options, callback) {\n  options = options !== null && options !== void 0 ? options : {};\n\n  for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n\n  server.destroy(options, () => {\n    topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n      server.removeAllListeners(event);\n    }\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n/** Predicts the TopologyType from options */\n\n\nfunction topologyTypeFromOptions(options) {\n  if (options === null || options === void 0 ? void 0 : options.directConnection) {\n    return common_1.TopologyType.Single;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.replicaSet) {\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.loadBalanced) {\n    return common_1.TopologyType.LoadBalanced;\n  }\n\n  return common_1.TopologyType.Unknown;\n}\n\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\n\n\nfunction createAndConnectServer(topology, serverDescription) {\n  topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new server_1.Server(topology, serverDescription, topology.s.options);\n\n  for (const event of constants_1.SERVER_RELAY_EVENTS) {\n    server.on(event, e => topology.emit(event, e));\n  }\n\n  server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n  server.connect();\n  return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\n\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n\n    if (server) {\n      server.s.description = incomingServerDescription;\n    }\n  } // add new servers for all descriptions we currently don't know about locally\n\n\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  } // for all servers no longer known, remove their descriptions and destroy their instances\n\n\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress); // prepare server for garbage collection\n\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\n\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology) {\n  if (topology.s.state === common_1.STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n    return;\n  }\n\n  const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions) : serverDescriptions;\n    } catch (e) {\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    }\n\n    const selectedServerDescription = randomSelection(selectedDescriptions);\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    const transaction = waitQueueMember.transaction;\n\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\n\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n  const currentTopologyVersion = currentServerDescription === null || currentServerDescription === void 0 ? void 0 : currentServerDescription.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/** @public */\n\n\nclass ServerCapabilities {\n  constructor(hello) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n\n  get hasAggregationCursor() {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasWriteCommands() {\n    return this.maxWireVersion >= 2;\n  }\n\n  get hasTextSearch() {\n    return this.minWireVersion >= 0;\n  }\n\n  get hasAuthCommands() {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasListCollectionsCommand() {\n    return this.maxWireVersion >= 3;\n  }\n\n  get hasListIndexesCommand() {\n    return this.maxWireVersion >= 3;\n  }\n\n  get supportsSnapshotReads() {\n    return this.maxWireVersion >= 13;\n  }\n\n  get commandsTakeWriteConcern() {\n    return this.maxWireVersion >= 5;\n  }\n\n  get commandsTakeCollation() {\n    return this.maxWireVersion >= 5;\n  }\n\n}\n\nexports.ServerCapabilities = ServerCapabilities;","map":{"version":3,"mappings":"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","names":["globalTopologyCounter","stateTransition","common_1","kCancelled","Symbol","kWaitQueue","Topology","mongo_types_1","constructor","seeds","options","bson","Object","create","serialize","bson_1","deserialize","hosts","utils_1","fromString","retryReads","connection_string_1","get","retryWrites","serverSelectionTimeoutMS","directConnection","loadBalanced","metadata","monitorCommands","tls","maxPoolSize","minPoolSize","waitQueueTimeoutMS","connectionType","connectTimeoutMS","maxIdleTimeMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","Array","isArray","seedlist","seed","push","error_1","JSON","stringify","topologyType","topologyTypeFromOptions","topologyId","selectedHosts","srvMaxHosts","length","serverDescriptions","Map","hostAddress","set","toString","server_description_1","Denque","s","id","state","description","topology_description_1","replicaSet","undefined","servers","sessionPool","sessions_1","sessions","Set","credentials","clusterTime","connectionTimers","detectShardedTopology","ev","detectSrvRecords","srvHost","srvPoller","_a","srv_polling_1","srvServiceName","on","TOPOLOGY_DESCRIPTION_CHANGED","event","previousType","previousDescription","type","newType","newDescription","transitionToSharded","Sharded","srvListeners","listeners","SRV_RECORD_DISCOVERY","listeningToSrvPolling","includes","_b","_c","start","previousTopologyDescription","updateFromSrvPollingEvent","updateServers","emit","events_1","capabilities","ServerCapabilities","lastHello","connect","callback","TOPOLOGY_OPENING","Unknown","from","values","map","serverDescription","address","createAndConnectServer","serverUpdateHandler","readPreference","read_preference_1","primary","selectServer","err","server","close","ERROR","command","ping","OPEN","CONNECT","force","drainWaitQueue","stop","removeListener","session","cb","endSession","endAllPooledSessions","destroyServer","clear","TOPOLOGY_CLOSED","selector","serverSelector","translate","assign","isSharded","transaction","waitQueueMember","timer","setTimeout","timeoutError","processWaitQueue","shouldCheckForSessionSupport","Single","hasKnownServers","hasDataBearingServers","hasSessionSupport","logicalSessionTimeoutMinutes","startSession","clientOptions","once","delete","add","endSessions","primaryPreferred","noResponse","result","hasServer","isStaleServerDescription","previousServerDescription","$clusterTime","equalDescriptions","equals","update","compatibilityError","SERVER_DESCRIPTION_CHANGED","auth","clientMetadata","isConnected","isDestroyed","unref","sd","filter","maxWireVersion","commonWireVersion","exports","constants_1","topology","removeAllListeners","destroy","SERVER_CLOSED","ReplicaSetNoPrimary","LoadBalanced","randomSelection","array","Math","floor","random","SERVER_OPENING","server_1","e","DESCRIPTION_RECEIVED","incomingServerDescription","has","entry","serverAddress","queue","shift","clearTimeout","membersToProcess","i","selectedDescriptions","selectedServerDescription","selectedServer","isActive","pinServer","process","nextTick","scheduleServerCheck","requestCheck","topologyDescription","currentServerDescription","currentTopologyVersion","topologyVersion","hello","minWireVersion","hasAggregationCursor","hasWriteCommands","hasTextSearch","hasAuthCommands","hasListCollectionsCommand","hasListIndexesCommand","supportsSnapshotReads","commandsTakeWriteConcern","commandsTakeCollation"],"sources":["B:\\web_project_react\\web_car_react\\node_modules\\mongodb\\src\\sdam\\topology.ts"],"sourcesContent":["import Denque = require('denque');\nimport type { BSONSerializeOptions, Document } from '../bson';\nimport { deserialize, serialize } from '../bson';\nimport type { MongoCredentials } from '../cmap/auth/mongo_credentials';\nimport type { ConnectionEvents, DestroyOptions } from '../cmap/connection';\nimport type { CloseOptions, ConnectionPoolEvents } from '../cmap/connection_pool';\nimport { DEFAULT_OPTIONS } from '../connection_string';\nimport {\n  CLOSE,\n  CONNECT,\n  ERROR,\n  LOCAL_SERVER_EVENTS,\n  OPEN,\n  SERVER_CLOSED,\n  SERVER_DESCRIPTION_CHANGED,\n  SERVER_OPENING,\n  SERVER_RELAY_EVENTS,\n  TIMEOUT,\n  TOPOLOGY_CLOSED,\n  TOPOLOGY_DESCRIPTION_CHANGED,\n  TOPOLOGY_OPENING\n} from '../constants';\nimport {\n  MongoCompatibilityError,\n  MongoDriverError,\n  MongoRuntimeError,\n  MongoServerSelectionError,\n  MongoTopologyClosedError\n} from '../error';\nimport type { MongoOptions, ServerApi } from '../mongo_client';\nimport { TypedEventEmitter } from '../mongo_types';\nimport { ReadPreference, ReadPreferenceLike } from '../read_preference';\nimport {\n  ClientSession,\n  ClientSessionOptions,\n  ServerSessionId,\n  ServerSessionPool\n} from '../sessions';\nimport type { Transaction } from '../transactions';\nimport {\n  Callback,\n  ClientMetadata,\n  eachAsync,\n  emitWarning,\n  EventEmitterWithState,\n  HostAddress,\n  makeStateMachine,\n  ns,\n  shuffle\n} from '../utils';\nimport {\n  _advanceClusterTime,\n  ClusterTime,\n  drainTimerQueue,\n  ServerType,\n  STATE_CLOSED,\n  STATE_CLOSING,\n  STATE_CONNECTED,\n  STATE_CONNECTING,\n  TimerQueue,\n  TopologyType\n} from './common';\nimport {\n  ServerClosedEvent,\n  ServerDescriptionChangedEvent,\n  ServerOpeningEvent,\n  TopologyClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent\n} from './events';\nimport { Server, ServerEvents, ServerOptions } from './server';\nimport { compareTopologyVersion, ServerDescription } from './server_description';\nimport { readPreferenceServerSelector, ServerSelector } from './server_selection';\nimport { SrvPoller, SrvPollingEvent } from './srv_polling';\nimport { TopologyDescription } from './topology_description';\n\n// Global state\nlet globalTopologyCounter = 0;\n\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n\n/** @internal */\nexport type ServerSelectionCallback = Callback<Server>;\n\n/** @internal */\nexport interface ServerSelectionRequest {\n  serverSelector: ServerSelector;\n  transaction?: Transaction;\n  callback: ServerSelectionCallback;\n  timer?: NodeJS.Timeout;\n  [kCancelled]?: boolean;\n}\n\n/** @internal */\nexport interface TopologyPrivate {\n  /** the id of this topology */\n  id: number;\n  /** passed in options */\n  options: TopologyOptions;\n  /** initial seedlist of servers to connect to */\n  seedlist: HostAddress[];\n  /** initial state */\n  state: string;\n  /** the topology description */\n  description: TopologyDescription;\n  serverSelectionTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n  /** A map of server instances to normalized addresses */\n  servers: Map<string, Server>;\n  /** Server Session Pool */\n  sessionPool: ServerSessionPool;\n  /** Active client sessions */\n  sessions: Set<ClientSession>;\n  credentials?: MongoCredentials;\n  clusterTime?: ClusterTime;\n  /** timers created for the initial connect to a server */\n  connectionTimers: TimerQueue;\n\n  /** related to srv polling */\n  srvPoller?: SrvPoller;\n  detectShardedTopology: (event: TopologyDescriptionChangedEvent) => void;\n  detectSrvRecords: (event: SrvPollingEvent) => void;\n}\n\n/** @public */\nexport interface TopologyOptions extends BSONSerializeOptions, ServerOptions {\n  srvMaxHosts: number;\n  srvServiceName: string;\n  hosts: HostAddress[];\n  retryWrites: boolean;\n  retryReads: boolean;\n  /** How long to block for server selection before throwing an error */\n  serverSelectionTimeoutMS: number;\n  /** The name of the replica set to connect to */\n  replicaSet?: string;\n  srvHost?: string;\n  /** @internal */\n  srvPoller?: SrvPoller;\n  /** Indicates that a client should directly connect to a node without attempting to discover its topology type */\n  directConnection: boolean;\n  loadBalanced: boolean;\n  metadata: ClientMetadata;\n  /** MongoDB server API version */\n  serverApi?: ServerApi;\n}\n\n/** @public */\nexport interface ConnectOptions {\n  readPreference?: ReadPreference;\n}\n\n/** @public */\nexport interface SelectServerOptions {\n  readPreference?: ReadPreferenceLike;\n  /** How long to block for server selection before throwing an error */\n  serverSelectionTimeoutMS?: number;\n  session?: ClientSession;\n}\n\n/** @public */\nexport type TopologyEvents = {\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\n  connect(topology: Topology): void;\n  serverOpening(event: ServerOpeningEvent): void;\n  serverClosed(event: ServerClosedEvent): void;\n  serverDescriptionChanged(event: ServerDescriptionChangedEvent): void;\n  topologyClosed(event: TopologyClosedEvent): void;\n  topologyOpening(event: TopologyOpeningEvent): void;\n  topologyDescriptionChanged(event: TopologyDescriptionChangedEvent): void;\n  error(error: Error): void;\n  /** @internal */\n  open(topology: Topology): void;\n  close(): void;\n  timeout(): void;\n} & Omit<ServerEvents, 'connect'> &\n  ConnectionPoolEvents &\n  ConnectionEvents &\n  EventEmitterWithState;\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nexport class Topology extends TypedEventEmitter<TopologyEvents> {\n  /** @internal */\n  s: TopologyPrivate;\n  /** @internal */\n  [kWaitQueue]: Denque<ServerSelectionRequest>;\n  /** @internal */\n  hello?: Document;\n  /** @internal */\n  _type?: string;\n\n  /** @event */\n  static readonly SERVER_OPENING = SERVER_OPENING;\n  /** @event */\n  static readonly SERVER_CLOSED = SERVER_CLOSED;\n  /** @event */\n  static readonly SERVER_DESCRIPTION_CHANGED = SERVER_DESCRIPTION_CHANGED;\n  /** @event */\n  static readonly TOPOLOGY_OPENING = TOPOLOGY_OPENING;\n  /** @event */\n  static readonly TOPOLOGY_CLOSED = TOPOLOGY_CLOSED;\n  /** @event */\n  static readonly TOPOLOGY_DESCRIPTION_CHANGED = TOPOLOGY_DESCRIPTION_CHANGED;\n  /** @event */\n  static readonly ERROR = ERROR;\n  /** @event */\n  static readonly OPEN = OPEN;\n  /** @event */\n  static readonly CONNECT = CONNECT;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /** @event */\n  static readonly TIMEOUT = TIMEOUT;\n\n  /**\n   * @internal\n   *\n   * @privateRemarks\n   * mongodb-client-encryption's class ClientEncryption falls back to finding the bson lib\n   * defined on client.topology.bson, in order to maintain compatibility with any version\n   * of mongodb-client-encryption we keep a reference to serialize and deserialize here.\n   */\n  bson: { serialize: typeof serialize; deserialize: typeof deserialize };\n\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(seeds: string | string[] | HostAddress | HostAddress[], options: TopologyOptions) {\n    super();\n\n    // Legacy CSFLE support\n    this.bson = Object.create(null);\n    this.bson.serialize = serialize;\n    this.bson.deserialize = deserialize;\n\n    // Options should only be undefined in tests, MongoClient will always have defined options\n    options = options ?? {\n      hosts: [HostAddress.fromString('localhost:27017')],\n      retryReads: DEFAULT_OPTIONS.get('retryReads'),\n      retryWrites: DEFAULT_OPTIONS.get('retryWrites'),\n      serverSelectionTimeoutMS: DEFAULT_OPTIONS.get('serverSelectionTimeoutMS'),\n      directConnection: DEFAULT_OPTIONS.get('directConnection'),\n      loadBalanced: DEFAULT_OPTIONS.get('loadBalanced'),\n      metadata: DEFAULT_OPTIONS.get('metadata'),\n      monitorCommands: DEFAULT_OPTIONS.get('monitorCommands'),\n      tls: DEFAULT_OPTIONS.get('tls'),\n      maxPoolSize: DEFAULT_OPTIONS.get('maxPoolSize'),\n      minPoolSize: DEFAULT_OPTIONS.get('minPoolSize'),\n      waitQueueTimeoutMS: DEFAULT_OPTIONS.get('waitQueueTimeoutMS'),\n      connectionType: DEFAULT_OPTIONS.get('connectionType'),\n      connectTimeoutMS: DEFAULT_OPTIONS.get('connectTimeoutMS'),\n      maxIdleTimeMS: DEFAULT_OPTIONS.get('maxIdleTimeMS'),\n      heartbeatFrequencyMS: DEFAULT_OPTIONS.get('heartbeatFrequencyMS'),\n      minHeartbeatFrequencyMS: DEFAULT_OPTIONS.get('minHeartbeatFrequencyMS')\n    };\n\n    if (typeof seeds === 'string') {\n      seeds = [HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n\n    const seedlist: HostAddress[] = [];\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(HostAddress.fromString(seed));\n      } else if (seed instanceof HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n\n    const selectedHosts =\n      options.srvMaxHosts == null ||\n      options.srvMaxHosts === 0 ||\n      options.srvMaxHosts >= seedlist.length\n        ? seedlist\n        : shuffle(seedlist, options.srvMaxHosts);\n\n    const serverDescriptions = new Map();\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new ServerDescription(hostAddress));\n    }\n\n    this[kWaitQueue] = new Denque();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(\n        topologyType,\n        serverDescriptions,\n        options.replicaSet,\n        undefined,\n        undefined,\n        undefined,\n        options\n      ),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new ServerSessionPool(this),\n      // Active client sessions\n      sessions: new Set(),\n      credentials: options?.credentials,\n      clusterTime: undefined,\n\n      // timer management\n      connectionTimers: new Set<NodeJS.Timeout>(),\n\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller =\n        options.srvPoller ??\n        new SrvPoller({\n          heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n          srvHost: options.srvHost,\n          srvMaxHosts: options.srvMaxHosts,\n          srvServiceName: options.srvServiceName\n        });\n\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n  }\n\n  private detectShardedTopology(event: TopologyDescriptionChangedEvent) {\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n\n    const transitionToSharded =\n      previousType !== TopologyType.Sharded && newType === TopologyType.Sharded;\n    const srvListeners = this.s.srvPoller?.listeners(SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n\n    if (transitionToSharded && !listeningToSrvPolling) {\n      this.s.srvPoller?.on(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      this.s.srvPoller?.start();\n    }\n  }\n\n  private detectSrvRecords(ev: SrvPollingEvent) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(\n      ev,\n      this.s.options.srvMaxHosts\n    );\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(this);\n\n    this.emit(\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n      new TopologyDescriptionChangedEvent(\n        this.s.id,\n        previousTopologyDescription,\n        this.s.description\n      )\n    );\n  }\n\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n  get description(): TopologyDescription {\n    return this.s.description;\n  }\n\n  get loadBalanced(): boolean {\n    return this.s.options.loadBalanced;\n  }\n\n  get capabilities(): ServerCapabilities {\n    return new ServerCapabilities(this.lastHello());\n  }\n\n  /** Initiate server connect */\n  connect(options?: ConnectOptions, callback?: Callback): void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n    if (this.s.state === STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // emit SDAM monitoring events\n    this.emit(Topology.TOPOLOGY_OPENING, new TopologyOpeningEvent(this.s.id));\n\n    // emit an event for the topology change\n    this.emit(\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n      new TopologyDescriptionChangedEvent(\n        this.s.id,\n        new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n        this.s.description\n      )\n    );\n\n    // connect all known servers, then attempt server selection to connect\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(\n      serverDescriptions.map(serverDescription => [\n        serverDescription.address,\n        createAndConnectServer(this, serverDescription)\n      ])\n    );\n\n    // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n\n    const readPreference = options.readPreference ?? ReadPreference.primary;\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        this.close();\n\n        typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n        return;\n      }\n\n      // TODO: NODE-2471\n      if (server && this.s.credentials) {\n        server.command(ns('admin.$cmd'), { ping: 1 }, {}, err => {\n          if (err) {\n            typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n            return;\n          }\n\n          stateTransition(this, STATE_CONNECTED);\n          this.emit(Topology.OPEN, this);\n          this.emit(Topology.CONNECT, this);\n\n          if (typeof callback === 'function') callback(undefined, this);\n        });\n\n        return;\n      }\n\n      stateTransition(this, STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n\n      if (typeof callback === 'function') callback(undefined, this);\n    });\n  }\n\n  /** Close this topology */\n  close(options?: CloseOptions, callback?: Callback): void {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = { force: options };\n    }\n\n    options = options ?? {};\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n\n    drainWaitQueue(this[kWaitQueue], new MongoTopologyClosedError());\n    drainTimerQueue(this.s.connectionTimers);\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      this.s.srvPoller.removeListener(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n    }\n\n    this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n\n    eachAsync(\n      Array.from(this.s.sessions.values()),\n      (session, cb) => session.endSession(cb),\n      () => {\n        this.s.sessionPool.endAllPooledSessions(() => {\n          eachAsync(\n            Array.from(this.s.servers.values()),\n            (server, cb) => destroyServer(server, this, options, cb),\n            err => {\n              this.s.servers.clear();\n\n              // emit an event for close\n              this.emit(Topology.TOPOLOGY_CLOSED, new TopologyClosedEvent(this.s.id));\n\n              stateTransition(this, STATE_CLOSED);\n\n              if (typeof callback === 'function') {\n                callback(err);\n              }\n            }\n          );\n        });\n      }\n    );\n  }\n\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param options - Optional settings related to server selection\n   * @param callback - The callback used to indicate success or failure\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  selectServer(\n    selector: string | ReadPreference | ServerSelector,\n    options: SelectServerOptions,\n    callback: Callback<Server>\n  ): void {\n    let serverSelector;\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = readPreferenceServerSelector(ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else {\n          ReadPreference.translate(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        serverSelector = readPreferenceServerSelector(readPreference as ReadPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n\n    options = Object.assign(\n      {},\n      { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS },\n      options\n    );\n\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n\n    const waitQueueMember: ServerSelectionRequest = {\n      serverSelector,\n      transaction,\n      callback\n    };\n\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new MongoServerSelectionError(\n          `Server selection timed out after ${serverSelectionTimeoutMS} ms`,\n          this.description\n        );\n\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  }\n\n  // Sessions related methods\n\n  /**\n   * @returns Whether the topology should initiate selection to determine session support\n   */\n  shouldCheckForSessionSupport(): boolean {\n    if (this.description.type === TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n\n  /**\n   * @returns Whether sessions are supported on the current topology\n   */\n  hasSessionSupport(): boolean {\n    return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\n  }\n\n  /** Start a logical session */\n  startSession(options: ClientSessionOptions, clientOptions?: MongoOptions): ClientSession {\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n\n    this.s.sessions.add(session);\n    return session;\n  }\n\n  /** Send endSessions command(s) with the given session ids */\n  endSessions(sessions: ServerSessionId[], callback?: Callback<Document>): void {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    this.selectServer(\n      readPreferenceServerSelector(ReadPreference.primaryPreferred),\n      {},\n      (err, server) => {\n        if (err || !server) {\n          if (typeof callback === 'function') callback(err);\n          return;\n        }\n\n        server.command(\n          ns('admin.$cmd'),\n          { endSessions: sessions },\n          { noResponse: true },\n          (err, result) => {\n            if (typeof callback === 'function') callback(err, result);\n          }\n        );\n      }\n    );\n  }\n\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription: ServerDescription): void {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n    if (!previousServerDescription) {\n      return;\n    }\n\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      _advanceClusterTime(this, clusterTime);\n    }\n\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions =\n      previousServerDescription && previousServerDescription.equals(serverDescription);\n\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    }\n\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n      if (newDescription) {\n        this.emit(\n          Topology.SERVER_DESCRIPTION_CHANGED,\n          new ServerDescriptionChangedEvent(\n            this.s.id,\n            serverDescription.address,\n            previousServerDescription,\n            newDescription\n          )\n        );\n      }\n    }\n\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emit(\n        Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n        new TopologyDescriptionChangedEvent(\n          this.s.id,\n          previousTopologyDescription,\n          this.s.description\n        )\n      );\n    }\n  }\n\n  auth(credentials?: MongoCredentials, callback?: Callback): void {\n    if (typeof credentials === 'function') (callback = credentials), (credentials = undefined);\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n\n  get clientMetadata(): ClientMetadata {\n    return this.s.options.metadata;\n  }\n\n  isConnected(): boolean {\n    return this.s.state === STATE_CONNECTED;\n  }\n\n  isDestroyed(): boolean {\n    return this.s.state === STATE_CLOSED;\n  }\n\n  /**\n   * @deprecated This function is deprecated and will be removed in the next major version.\n   */\n  unref(): void {\n    emitWarning('`unref` is a noop and will be removed in the next major version');\n  }\n\n  // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n  lastHello(): Document {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(\n      (sd: ServerDescription) => sd.type !== ServerType.Unknown\n    )[0];\n\n    const result = sd || { maxWireVersion: this.description.commonWireVersion };\n    return result;\n  }\n\n  get commonWireVersion(): number | undefined {\n    return this.description.commonWireVersion;\n  }\n\n  get logicalSessionTimeoutMinutes(): number | undefined {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get clusterTime(): ClusterTime | undefined {\n    return this.s.clusterTime;\n  }\n\n  set clusterTime(clusterTime: ClusterTime | undefined) {\n    this.s.clusterTime = clusterTime;\n  }\n}\n\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(\n  server: Server,\n  topology: Topology,\n  options?: DestroyOptions,\n  callback?: Callback\n) {\n  options = options ?? {};\n  for (const event of LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n\n  server.destroy(options, () => {\n    topology.emit(\n      Topology.SERVER_CLOSED,\n      new ServerClosedEvent(topology.s.id, server.description.address)\n    );\n\n    for (const event of SERVER_RELAY_EVENTS) {\n      server.removeAllListeners(event);\n    }\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options?: TopologyOptions) {\n  if (options?.directConnection) {\n    return TopologyType.Single;\n  }\n\n  if (options?.replicaSet) {\n    return TopologyType.ReplicaSetNoPrimary;\n  }\n\n  if (options?.loadBalanced) {\n    return TopologyType.LoadBalanced;\n  }\n\n  return TopologyType.Unknown;\n}\n\nfunction randomSelection(array: ServerDescription[]): ServerDescription {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology: Topology, serverDescription: ServerDescription) {\n  topology.emit(\n    Topology.SERVER_OPENING,\n    new ServerOpeningEvent(topology.s.id, serverDescription.address)\n  );\n\n  const server = new Server(topology, serverDescription, topology.s.options);\n  for (const event of SERVER_RELAY_EVENTS) {\n    server.on(event, (e: any) => topology.emit(event, e));\n  }\n\n  server.on(Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n\n  server.connect();\n  return server;\n}\n\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology: Topology, incomingServerDescription?: ServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    if (server) {\n      server.s.description = incomingServerDescription;\n    }\n  }\n\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n\n    // prepare server for garbage collection\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\n\nfunction drainWaitQueue(queue: Denque<ServerSelectionRequest>, err?: MongoDriverError) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology: Topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new MongoTopologyClosedError());\n    return;\n  }\n\n  const isSharded = topology.description.type === TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector\n        ? serverSelector(topology.description, serverDescriptions)\n        : serverDescriptions;\n    } catch (e) {\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    }\n\n    const selectedServerDescription = randomSelection(selectedDescriptions);\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    const transaction = waitQueueMember.transaction;\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\n\nfunction isStaleServerDescription(\n  topologyDescription: TopologyDescription,\n  incomingServerDescription: ServerDescription\n) {\n  const currentServerDescription = topologyDescription.servers.get(\n    incomingServerDescription.address\n  );\n  const currentTopologyVersion = currentServerDescription?.topologyVersion;\n  return (\n    compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0\n  );\n}\n\n/** @public */\nexport class ServerCapabilities {\n  maxWireVersion: number;\n  minWireVersion: number;\n\n  constructor(hello: Document) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n\n  get hasAggregationCursor(): boolean {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasWriteCommands(): boolean {\n    return this.maxWireVersion >= 2;\n  }\n  get hasTextSearch(): boolean {\n    return this.minWireVersion >= 0;\n  }\n\n  get hasAuthCommands(): boolean {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasListCollectionsCommand(): boolean {\n    return this.maxWireVersion >= 3;\n  }\n\n  get hasListIndexesCommand(): boolean {\n    return this.maxWireVersion >= 3;\n  }\n\n  get supportsSnapshotReads(): boolean {\n    return this.maxWireVersion >= 13;\n  }\n\n  get commandsTakeWriteConcern(): boolean {\n    return this.maxWireVersion >= 5;\n  }\n\n  get commandsTakeCollation(): boolean {\n    return this.maxWireVersion >= 5;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}