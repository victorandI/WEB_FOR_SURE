{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CreateCollectionOperation = void 0;\n\nconst collection_1 = require(\"../collection\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n\nconst ILLEGAL_COMMAND_FIELDS = new Set(['w', 'wtimeout', 'j', 'fsync', 'autoIndexId', 'pkFactory', 'raw', 'readPreference', 'session', 'readConcern', 'writeConcern', 'raw', 'fieldsAsRaw', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'bsonRegExp', 'serializeFunctions', 'ignoreUndefined', 'enableUtf8Validation']);\n/** @internal */\n\nclass CreateCollectionOperation extends command_1.CommandOperation {\n  constructor(db, name) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(db, options);\n    this.options = options;\n    this.db = db;\n    this.name = name;\n  }\n\n  execute(server, session, callback) {\n    const db = this.db;\n    const name = this.name;\n    const options = this.options;\n\n    const done = err => {\n      if (err) {\n        return callback(err);\n      }\n\n      callback(undefined, new collection_1.Collection(db, name, options));\n    };\n\n    const cmd = {\n      create: name\n    };\n\n    for (const n in options) {\n      if (options[n] != null && typeof options[n] !== 'function' && !ILLEGAL_COMMAND_FIELDS.has(n)) {\n        cmd[n] = options[n];\n      }\n    } // otherwise just execute the command\n\n\n    super.executeCommand(server, session, cmd, done);\n  }\n\n}\n\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"mappings":";;;;;;;AACA;;AAMA;;AACA;;AAEA,MAAMA,sBAAsB,GAAG,IAAIC,GAAJ,CAAQ,CACrC,GADqC,EAErC,UAFqC,EAGrC,GAHqC,EAIrC,OAJqC,EAKrC,aALqC,EAMrC,WANqC,EAOrC,KAPqC,EAQrC,gBARqC,EASrC,SATqC,EAUrC,aAVqC,EAWrC,cAXqC,EAYrC,KAZqC,EAarC,aAbqC,EAcrC,cAdqC,EAerC,eAfqC,EAgBrC,gBAhBqC,EAiBrC,YAjBqC,EAkBrC,oBAlBqC,EAmBrC,iBAnBqC,EAoBrC,sBApBqC,CAAR,CAA/B;AAqEA;;AACA,MAAaC,yBAAb,SAA+CC,0BAA/C,CAA2E;EAKzEC,YAAYC,EAAZ,EAAoBC,IAApB,EAAuE;IAAA,IAArCC,OAAqC,uEAAF,EAAE;IACrE,MAAMF,EAAN,EAAUE,OAAV;IAEA,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKF,EAAL,GAAUA,EAAV;IACA,KAAKC,IAAL,GAAYA,IAAZ;EACD;;EAEQE,OAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGgB;IAE9B,MAAMN,EAAE,GAAG,KAAKA,EAAhB;IACA,MAAMC,IAAI,GAAG,KAAKA,IAAlB;IACA,MAAMC,OAAO,GAAG,KAAKA,OAArB;;IAEA,MAAMK,IAAI,GAAaC,GAAG,IAAG;MAC3B,IAAIA,GAAJ,EAAS;QACP,OAAOF,QAAQ,CAACE,GAAD,CAAf;MACD;;MAEDF,QAAQ,CAACG,SAAD,EAAY,IAAIC,uBAAJ,CAAeV,EAAf,EAAmBC,IAAnB,EAAyBC,OAAzB,CAAZ,CAAR;IACD,CAND;;IAQA,MAAMS,GAAG,GAAa;MAAEC,MAAM,EAAEX;IAAV,CAAtB;;IACA,KAAK,MAAMY,CAAX,IAAgBX,OAAhB,EAAyB;MACvB,IACGA,OAAe,CAACW,CAAD,CAAf,IAAsB,IAAtB,IACD,OAAQX,OAAe,CAACW,CAAD,CAAvB,KAA+B,UAD9B,IAED,CAAClB,sBAAsB,CAACmB,GAAvB,CAA2BD,CAA3B,CAHH,EAIE;QACAF,GAAG,CAACE,CAAD,CAAH,GAAUX,OAAe,CAACW,CAAD,CAAzB;MACD;IACF,CAvB6B,CAyB9B;;;IACA,MAAME,cAAN,CAAqBX,MAArB,EAA6BC,OAA7B,EAAsCM,GAAtC,EAA2CJ,IAA3C;EACD;;AA3CwE;;AAA3ES;AA8CA,+BAAcnB,yBAAd,EAAyC,CAACoB,mBAAOC,eAAR,CAAzC","names":["ILLEGAL_COMMAND_FIELDS","Set","CreateCollectionOperation","command_1","constructor","db","name","options","execute","server","session","callback","done","err","undefined","collection_1","cmd","create","n","has","executeCommand","exports","operation_1","WRITE_OPERATION"],"sources":["B:\\web_project_react\\web_car_react\\node_modules\\mongodb\\src\\operations\\create_collection.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { Collection } from '../collection';\nimport type { Db } from '../db';\nimport type { PkFactory } from '../mongo_client';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\nconst ILLEGAL_COMMAND_FIELDS = new Set([\n  'w',\n  'wtimeout',\n  'j',\n  'fsync',\n  'autoIndexId',\n  'pkFactory',\n  'raw',\n  'readPreference',\n  'session',\n  'readConcern',\n  'writeConcern',\n  'raw',\n  'fieldsAsRaw',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'bsonRegExp',\n  'serializeFunctions',\n  'ignoreUndefined',\n  'enableUtf8Validation'\n]);\n\n/** @public\n * Configuration options for timeseries collections\n * @see https://docs.mongodb.com/manual/core/timeseries-collections/\n */\nexport interface TimeSeriesCollectionOptions extends Document {\n  timeField: string;\n  metaField?: string;\n  granularity?: 'seconds' | 'minutes' | 'hours' | string;\n}\n\n/** @public */\nexport interface CreateCollectionOptions extends CommandOperationOptions {\n  /** Returns an error if the collection does not exist */\n  strict?: boolean;\n  /** Create a capped collection */\n  capped?: boolean;\n  /** @deprecated Create an index on the _id field of the document, True by default on MongoDB 2.6 - 3.0 */\n  autoIndexId?: boolean;\n  /** The size of the capped collection in bytes */\n  size?: number;\n  /** The maximum number of documents in the capped collection */\n  max?: number;\n  /** Available for the MMAPv1 storage engine only to set the usePowerOf2Sizes and the noPadding flag */\n  flags?: number;\n  /** Allows users to specify configuration to the storage engine on a per-collection basis when creating a collection on MongoDB 3.0 or higher */\n  storageEngine?: Document;\n  /** Allows users to specify validation rules or expressions for the collection. For more information, see Document Validation on MongoDB 3.2 or higher */\n  validator?: Document;\n  /** Determines how strictly MongoDB applies the validation rules to existing documents during an update on MongoDB 3.2 or higher */\n  validationLevel?: string;\n  /** Determines whether to error on invalid documents or just warn about the violations but allow invalid documents to be inserted on MongoDB 3.2 or higher */\n  validationAction?: string;\n  /** Allows users to specify a default configuration for indexes when creating a collection on MongoDB 3.2 or higher */\n  indexOptionDefaults?: Document;\n  /** The name of the source collection or view from which to create the view. The name is not the full namespace of the collection or view; i.e. does not include the database name and implies the same database as the view to create on MongoDB 3.4 or higher */\n  viewOn?: string;\n  /** An array that consists of the aggregation pipeline stage. Creates the view by applying the specified pipeline to the viewOn collection or view on MongoDB 3.4 or higher */\n  pipeline?: Document[];\n  /** A primary key factory function for generation of custom _id keys. */\n  pkFactory?: PkFactory;\n  /** A document specifying configuration options for timeseries collections. */\n  timeseries?: TimeSeriesCollectionOptions;\n  /** The number of seconds after which a document in a timeseries collection expires. */\n  expireAfterSeconds?: number;\n}\n\n/** @internal */\nexport class CreateCollectionOperation extends CommandOperation<Collection> {\n  override options: CreateCollectionOptions;\n  db: Db;\n  name: string;\n\n  constructor(db: Db, name: string, options: CreateCollectionOptions = {}) {\n    super(db, options);\n\n    this.options = options;\n    this.db = db;\n    this.name = name;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Collection>\n  ): void {\n    const db = this.db;\n    const name = this.name;\n    const options = this.options;\n\n    const done: Callback = err => {\n      if (err) {\n        return callback(err);\n      }\n\n      callback(undefined, new Collection(db, name, options));\n    };\n\n    const cmd: Document = { create: name };\n    for (const n in options) {\n      if (\n        (options as any)[n] != null &&\n        typeof (options as any)[n] !== 'function' &&\n        !ILLEGAL_COMMAND_FIELDS.has(n)\n      ) {\n        cmd[n] = (options as any)[n];\n      }\n    }\n\n    // otherwise just execute the command\n    super.executeCommand(server, session, cmd, done);\n  }\n}\n\ndefineAspects(CreateCollectionOperation, [Aspect.WRITE_OPERATION]);\n"]},"metadata":{},"sourceType":"script"}