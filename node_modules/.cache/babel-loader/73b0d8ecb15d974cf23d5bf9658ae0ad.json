{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst SchemaType = require('../schematype');\n\nconst MongooseError = require('../error/index');\n\nconst SchemaStringOptions = require('../options/SchemaStringOptions');\n\nconst castString = require('../cast/string');\n\nconst utils = require('../utils');\n\nconst isBsonType = require('../helpers/isBsonType');\n\nconst CastError = SchemaType.CastError;\n/**\n * String SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaString(key, options) {\n  this.enumValues = [];\n  this.regExp = null;\n  SchemaType.call(this, key, options, 'String');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nSchemaString.schemaName = 'String';\nSchemaString.defaultOptions = {};\n/*!\n * Inherits from SchemaType.\n */\n\nSchemaString.prototype = Object.create(SchemaType.prototype);\nSchemaString.prototype.constructor = SchemaString;\nObject.defineProperty(SchemaString.prototype, 'OptionsConstructor', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: SchemaStringOptions\n});\n/*!\n * ignore\n */\n\nSchemaString._cast = castString;\n/**\n * Get/set the function used to cast arbitrary values to strings.\n *\n * #### Example:\n *\n *     // Throw an error if you pass in an object. Normally, Mongoose allows\n *     // objects with custom `toString()` functions.\n *     const original = mongoose.Schema.Types.String.cast();\n *     mongoose.Schema.Types.String.cast(v => {\n *       assert.ok(v == null || typeof v !== 'object');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Types.String.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaString.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n\n  this._cast = caster;\n  return this._cast;\n};\n/*!\n * ignore\n */\n\n\nSchemaString._defaultCaster = v => {\n  if (v != null && typeof v !== 'string') {\n    throw new Error();\n  }\n\n  return v;\n};\n/**\n * Attaches a getter for all String instances.\n *\n * #### Example:\n *\n *     // Make all numbers round down\n *     mongoose.Schema.String.get(v => v.toLowerCase());\n *\n *     const Model = mongoose.model('Test', new Schema({ test: String }));\n *     new Model({ test: 'FOO' }).test; // 'foo'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\n\nSchemaString.get = SchemaType.get;\n/**\n * Sets a default option for all String instances.\n *\n * #### Example:\n *\n *     // Make all strings have option `trim` equal to true.\n *     mongoose.Schema.String.set('trim', true);\n *\n *     const User = mongoose.model('User', new Schema({ name: String }));\n *     new User({ name: '   John Doe   ' }).name; // 'John Doe'\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaString.set = SchemaType.set;\n/*!\n * ignore\n */\n\nSchemaString._checkRequired = v => (v instanceof String || typeof v === 'string') && v.length;\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * #### Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\n\nSchemaString.checkRequired = SchemaType.checkRequired;\n/**\n * Adds an enum validator\n *\n * #### Example:\n *\n *     const states = ['opening', 'open', 'closing', 'closed']\n *     const s = new Schema({ state: { type: String, enum: states }})\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n *     // or with custom error messages\n *     const enum = {\n *       values: ['opening', 'open', 'closing', 'closed'],\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\n *     }\n *     const s = new Schema({ state: { type: String, enum: enum })\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n * @param {String|Object} [args...] enumeration values\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.enum = function () {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n    this.enumValidator = false;\n  }\n\n  if (arguments[0] === void 0 || arguments[0] === false) {\n    return this;\n  }\n\n  let values;\n  let errorMessage;\n\n  if (utils.isObject(arguments[0])) {\n    if (Array.isArray(arguments[0].values)) {\n      values = arguments[0].values;\n      errorMessage = arguments[0].message;\n    } else {\n      values = utils.object.vals(arguments[0]);\n      errorMessage = MongooseError.messages.String.enum;\n    }\n  } else {\n    values = arguments;\n    errorMessage = MongooseError.messages.String.enum;\n  }\n\n  for (const value of values) {\n    if (value !== undefined) {\n      this.enumValues.push(this.cast(value));\n    }\n  }\n\n  const vals = this.enumValues;\n\n  this.enumValidator = function (v) {\n    return undefined === v || ~vals.indexOf(v);\n  };\n\n  this.validators.push({\n    validator: this.enumValidator,\n    message: errorMessage,\n    type: 'enum',\n    enumValues: vals\n  });\n  return this;\n};\n/**\n * Adds a lowercase [setter](https://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * #### Example:\n *\n *     const s = new Schema({ email: { type: String, lowercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ email: 'SomeEmail@example.COM' });\n *     console.log(m.email) // someemail@example.com\n *     M.find({ email: 'SomeEmail@example.com' }); // Queries by 'someemail@example.com'\n *\n * Note that `lowercase` does **not** affect regular expression queries:\n *\n * #### Example:\n *     // Still queries for documents whose `email` matches the regular\n *     // expression /SomeEmail/. Mongoose does **not** convert the RegExp\n *     // to lowercase.\n *     M.find({ email: /SomeEmail/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\n\nSchemaString.prototype.lowercase = function (shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n\n  return this.set(v => {\n    if (typeof v !== 'string') {\n      v = this.cast(v);\n    }\n\n    if (v) {\n      return v.toLowerCase();\n    }\n\n    return v;\n  });\n};\n/**\n * Adds an uppercase [setter](https://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * #### Example:\n *\n *     const s = new Schema({ caps: { type: String, uppercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ caps: 'an example' });\n *     console.log(m.caps) // AN EXAMPLE\n *     M.find({ caps: 'an example' }) // Matches documents where caps = 'AN EXAMPLE'\n *\n * Note that `uppercase` does **not** affect regular expression queries:\n *\n * #### Example:\n *     // Mongoose does **not** convert the RegExp to uppercase.\n *     M.find({ email: /an example/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\n\nSchemaString.prototype.uppercase = function (shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n\n  return this.set(v => {\n    if (typeof v !== 'string') {\n      v = this.cast(v);\n    }\n\n    if (v) {\n      return v.toUpperCase();\n    }\n\n    return v;\n  });\n};\n/**\n * Adds a trim [setter](https://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * The string value will be [trimmed](https://masteringjs.io/tutorials/fundamentals/trim-string) when set.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: { type: String, trim: true }});\n *     const M = db.model('M', s);\n *     const string = ' some name ';\n *     console.log(string.length); // 11\n *     const m = new M({ name: string });\n *     console.log(m.name.length); // 9\n *\n *     // Equivalent to `findOne({ name: string.trim() })`\n *     M.findOne({ name: string });\n *\n * Note that `trim` does **not** affect regular expression queries:\n *\n * #### Example:\n *     // Mongoose does **not** trim whitespace from the RegExp.\n *     M.find({ name: / some name / });\n *\n * @api public\n * @return {SchemaType} this\n */\n\n\nSchemaString.prototype.trim = function (shouldTrim) {\n  if (arguments.length > 0 && !shouldTrim) {\n    return this;\n  }\n\n  return this.set(v => {\n    if (typeof v !== 'string') {\n      v = this.cast(v);\n    }\n\n    if (v) {\n      return v.trim();\n    }\n\n    return v;\n  });\n};\n/**\n * Sets a minimum length validator.\n *\n * #### Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, minlength: 5 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\n *     const minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, minlength: minlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\n *     })\n *\n * @param {Number} value minimum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaString.prototype.minlength = function (value, message) {\n  if (this.minlengthValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.minlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.minlength;\n    msg = msg.replace(/{MINLENGTH}/, value);\n    this.validators.push({\n      validator: this.minlengthValidator = function (v) {\n        return v === null || v.length >= value;\n      },\n      message: msg,\n      type: 'minlength',\n      minlength: value\n    });\n  }\n\n  return this;\n};\n\nSchemaString.prototype.minLength = SchemaString.prototype.minlength;\n/**\n * Sets a maximum length validator.\n *\n * #### Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, maxlength: 9 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512512345' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\n *     const maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512512345' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\n *     })\n *\n * @param {Number} value maximum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.maxlength = function (value, message) {\n  if (this.maxlengthValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.maxlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.maxlength;\n    msg = msg.replace(/{MAXLENGTH}/, value);\n    this.validators.push({\n      validator: this.maxlengthValidator = function (v) {\n        return v === null || v.length <= value;\n      },\n      message: msg,\n      type: 'maxlength',\n      maxlength: value\n    });\n  }\n\n  return this;\n};\n\nSchemaString.prototype.maxLength = SchemaString.prototype.maxlength;\n/**\n * Sets a regexp validator.\n *\n * Any value that does not pass `regExp`.test(val) will fail validation.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: { type: String, match: /^a/ }})\n *     const M = db.model('M', s)\n *     const m = new M({ name: 'I am invalid' })\n *     m.validate(function (err) {\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\n *       m.name = 'apples'\n *       m.validate(function (err) {\n *         assert.ok(err) // success\n *       })\n *     })\n *\n *     // using a custom error message\n *     const match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\n *     const s = new Schema({ file: { type: String, match: match }})\n *     const M = db.model('M', s);\n *     const m = new M({ file: 'invalid' });\n *     m.validate(function (err) {\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\n *     })\n *\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\n *\n *     const s = new Schema({ name: { type: String, match: /^a/, required: true }})\n *\n * @param {RegExp} regExp regular expression to test against\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.match = function match(regExp, message) {\n  // yes, we allow multiple match validators\n  const msg = message || MongooseError.messages.String.match;\n\n  const matchValidator = function (v) {\n    if (!regExp) {\n      return false;\n    } // In case RegExp happens to have `/g` flag set, we need to reset the\n    // `lastIndex`, otherwise `match` will intermittently fail.\n\n\n    regExp.lastIndex = 0;\n    const ret = v != null && v !== '' ? regExp.test(v) : true;\n    return ret;\n  };\n\n  this.validators.push({\n    validator: matchValidator,\n    message: msg,\n    type: 'regexp',\n    regexp: regExp\n  });\n  return this;\n};\n/**\n * Check if the given value satisfies the `required` validator. The value is\n * considered valid if it is a string (that is, not `null` or `undefined`) and\n * has positive length. The `required` validator **will** fail for empty\n * strings.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\n\nSchemaString.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  } // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n\n\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ? this.constructor.checkRequired() : SchemaString.checkRequired();\n\n  return _checkRequired(value);\n};\n/**\n * Casts to String\n *\n * @api private\n */\n\n\nSchemaString.prototype.cast = function (value, doc, init) {\n  if (typeof value !== 'string' && SchemaType._isRef(this, value, doc, init)) {\n    return this._castRef(value, doc, init);\n  }\n\n  let castString;\n\n  if (typeof this._castFunction === 'function') {\n    castString = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castString = this.constructor.cast();\n  } else {\n    castString = SchemaString.cast();\n  }\n\n  try {\n    return castString(value);\n  } catch (error) {\n    throw new CastError('string', value, this.path, null, this);\n  }\n};\n/*!\n * ignore\n */\n\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n/*!\n * ignore\n */\n\n\nfunction handleArray(val) {\n  const _this = this;\n\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n\n  return val.map(function (m) {\n    return _this.castForQuery(m);\n  });\n}\n/*!\n * ignore\n */\n\n\nfunction handleSingleNoSetters(val) {\n  if (val == null) {\n    return this._castNullish(val);\n  }\n\n  return this.cast(val, this);\n}\n\nconst $conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $all: handleArray,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $options: handleSingleNoSetters,\n  $regex: function handle$regex(val) {\n    if (Object.prototype.toString.call(val) === '[object RegExp]') {\n      return val;\n    }\n\n    return handleSingleNoSetters.call(this, val);\n  },\n  $not: handleSingle\n});\nObject.defineProperty(SchemaString.prototype, '$conditionalHandlers', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: Object.freeze($conditionalHandlers)\n});\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [val]\n * @api private\n */\n\nSchemaString.prototype.castForQuery = function ($conditional, val) {\n  let handler;\n\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with String.');\n    }\n\n    return handler.call(this, val);\n  }\n\n  val = $conditional;\n\n  if (Object.prototype.toString.call(val) === '[object RegExp]' || isBsonType(val, 'BSONRegExp')) {\n    return val;\n  }\n\n  return this._castForQuery(val);\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = SchemaString;","map":{"version":3,"names":["SchemaType","require","MongooseError","SchemaStringOptions","castString","utils","isBsonType","CastError","SchemaString","key","options","enumValues","regExp","call","schemaName","defaultOptions","prototype","Object","create","constructor","defineProperty","configurable","enumerable","writable","value","_cast","cast","caster","arguments","length","_defaultCaster","v","Error","get","set","_checkRequired","String","checkRequired","enum","enumValidator","validators","filter","validator","values","errorMessage","isObject","Array","isArray","message","object","vals","messages","undefined","push","indexOf","type","lowercase","shouldApply","toLowerCase","uppercase","toUpperCase","trim","shouldTrim","minlength","minlengthValidator","msg","replace","minLength","maxlength","maxlengthValidator","maxLength","match","matchValidator","lastIndex","ret","test","regexp","doc","_isRef","init","_castRef","_castFunction","error","path","handleSingle","val","castForQuery","handleArray","_this","map","m","handleSingleNoSetters","_castNullish","$conditionalHandlers","$all","$gt","$gte","$lt","$lte","$options","$regex","handle$regex","toString","$not","freeze","$conditional","handler","_castForQuery","module","exports"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/schema/string.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst SchemaType = require('../schematype');\nconst MongooseError = require('../error/index');\nconst SchemaStringOptions = require('../options/SchemaStringOptions');\nconst castString = require('../cast/string');\nconst utils = require('../utils');\nconst isBsonType = require('../helpers/isBsonType');\n\nconst CastError = SchemaType.CastError;\n\n/**\n * String SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaString(key, options) {\n  this.enumValues = [];\n  this.regExp = null;\n  SchemaType.call(this, key, options, 'String');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaString.schemaName = 'String';\n\nSchemaString.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaString.prototype = Object.create(SchemaType.prototype);\nSchemaString.prototype.constructor = SchemaString;\nObject.defineProperty(SchemaString.prototype, 'OptionsConstructor', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: SchemaStringOptions\n});\n\n/*!\n * ignore\n */\n\nSchemaString._cast = castString;\n\n/**\n * Get/set the function used to cast arbitrary values to strings.\n *\n * #### Example:\n *\n *     // Throw an error if you pass in an object. Normally, Mongoose allows\n *     // objects with custom `toString()` functions.\n *     const original = mongoose.Schema.Types.String.cast();\n *     mongoose.Schema.Types.String.cast(v => {\n *       assert.ok(v == null || typeof v !== 'object');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Types.String.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaString.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaString._defaultCaster = v => {\n  if (v != null && typeof v !== 'string') {\n    throw new Error();\n  }\n  return v;\n};\n\n/**\n * Attaches a getter for all String instances.\n *\n * #### Example:\n *\n *     // Make all numbers round down\n *     mongoose.Schema.String.get(v => v.toLowerCase());\n *\n *     const Model = mongoose.model('Test', new Schema({ test: String }));\n *     new Model({ test: 'FOO' }).test; // 'foo'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaString.get = SchemaType.get;\n\n/**\n * Sets a default option for all String instances.\n *\n * #### Example:\n *\n *     // Make all strings have option `trim` equal to true.\n *     mongoose.Schema.String.set('trim', true);\n *\n *     const User = mongoose.model('User', new Schema({ name: String }));\n *     new User({ name: '   John Doe   ' }).name; // 'John Doe'\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaString.set = SchemaType.set;\n\n/*!\n * ignore\n */\n\nSchemaString._checkRequired = v => (v instanceof String || typeof v === 'string') && v.length;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * #### Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaString.checkRequired = SchemaType.checkRequired;\n\n/**\n * Adds an enum validator\n *\n * #### Example:\n *\n *     const states = ['opening', 'open', 'closing', 'closed']\n *     const s = new Schema({ state: { type: String, enum: states }})\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n *     // or with custom error messages\n *     const enum = {\n *       values: ['opening', 'open', 'closing', 'closed'],\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\n *     }\n *     const s = new Schema({ state: { type: String, enum: enum })\n *     const M = db.model('M', s)\n *     const m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n * @param {String|Object} [args...] enumeration values\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.enum = function() {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n    this.enumValidator = false;\n  }\n\n  if (arguments[0] === void 0 || arguments[0] === false) {\n    return this;\n  }\n\n  let values;\n  let errorMessage;\n\n  if (utils.isObject(arguments[0])) {\n    if (Array.isArray(arguments[0].values)) {\n      values = arguments[0].values;\n      errorMessage = arguments[0].message;\n    } else {\n      values = utils.object.vals(arguments[0]);\n      errorMessage = MongooseError.messages.String.enum;\n    }\n  } else {\n    values = arguments;\n    errorMessage = MongooseError.messages.String.enum;\n  }\n\n  for (const value of values) {\n    if (value !== undefined) {\n      this.enumValues.push(this.cast(value));\n    }\n  }\n\n  const vals = this.enumValues;\n  this.enumValidator = function(v) {\n    return undefined === v || ~vals.indexOf(v);\n  };\n  this.validators.push({\n    validator: this.enumValidator,\n    message: errorMessage,\n    type: 'enum',\n    enumValues: vals\n  });\n\n  return this;\n};\n\n/**\n * Adds a lowercase [setter](https://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * #### Example:\n *\n *     const s = new Schema({ email: { type: String, lowercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ email: 'SomeEmail@example.COM' });\n *     console.log(m.email) // someemail@example.com\n *     M.find({ email: 'SomeEmail@example.com' }); // Queries by 'someemail@example.com'\n *\n * Note that `lowercase` does **not** affect regular expression queries:\n *\n * #### Example:\n *     // Still queries for documents whose `email` matches the regular\n *     // expression /SomeEmail/. Mongoose does **not** convert the RegExp\n *     // to lowercase.\n *     M.find({ email: /SomeEmail/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.lowercase = function(shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(v => {\n    if (typeof v !== 'string') {\n      v = this.cast(v);\n    }\n    if (v) {\n      return v.toLowerCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds an uppercase [setter](https://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * #### Example:\n *\n *     const s = new Schema({ caps: { type: String, uppercase: true }})\n *     const M = db.model('M', s);\n *     const m = new M({ caps: 'an example' });\n *     console.log(m.caps) // AN EXAMPLE\n *     M.find({ caps: 'an example' }) // Matches documents where caps = 'AN EXAMPLE'\n *\n * Note that `uppercase` does **not** affect regular expression queries:\n *\n * #### Example:\n *     // Mongoose does **not** convert the RegExp to uppercase.\n *     M.find({ email: /an example/ });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.uppercase = function(shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(v => {\n    if (typeof v !== 'string') {\n      v = this.cast(v);\n    }\n    if (v) {\n      return v.toUpperCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds a trim [setter](https://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * The string value will be [trimmed](https://masteringjs.io/tutorials/fundamentals/trim-string) when set.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: { type: String, trim: true }});\n *     const M = db.model('M', s);\n *     const string = ' some name ';\n *     console.log(string.length); // 11\n *     const m = new M({ name: string });\n *     console.log(m.name.length); // 9\n *\n *     // Equivalent to `findOne({ name: string.trim() })`\n *     M.findOne({ name: string });\n *\n * Note that `trim` does **not** affect regular expression queries:\n *\n * #### Example:\n *     // Mongoose does **not** trim whitespace from the RegExp.\n *     M.find({ name: / some name / });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.trim = function(shouldTrim) {\n  if (arguments.length > 0 && !shouldTrim) {\n    return this;\n  }\n  return this.set(v => {\n    if (typeof v !== 'string') {\n      v = this.cast(v);\n    }\n    if (v) {\n      return v.trim();\n    }\n    return v;\n  });\n};\n\n/**\n * Sets a minimum length validator.\n *\n * #### Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, minlength: 5 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\n *     const minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, minlength: minlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\n *     })\n *\n * @param {Number} value minimum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.minlength = function(value, message) {\n  if (this.minlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.minlength;\n    msg = msg.replace(/{MINLENGTH}/, value);\n    this.validators.push({\n      validator: this.minlengthValidator = function(v) {\n        return v === null || v.length >= value;\n      },\n      message: msg,\n      type: 'minlength',\n      minlength: value\n    });\n  }\n\n  return this;\n};\n\nSchemaString.prototype.minLength = SchemaString.prototype.minlength;\n\n/**\n * Sets a maximum length validator.\n *\n * #### Example:\n *\n *     const schema = new Schema({ postalCode: { type: String, maxlength: 9 })\n *     const Address = db.model('Address', schema)\n *     const address = new Address({ postalCode: '9512512345' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\n *     const maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\n *     const schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\n *     const Address = mongoose.model('Address', schema);\n *     const address = new Address({ postalCode: '9512512345' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\n *     })\n *\n * @param {Number} value maximum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.maxlength = function(value, message) {\n  if (this.maxlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.maxlength;\n    msg = msg.replace(/{MAXLENGTH}/, value);\n    this.validators.push({\n      validator: this.maxlengthValidator = function(v) {\n        return v === null || v.length <= value;\n      },\n      message: msg,\n      type: 'maxlength',\n      maxlength: value\n    });\n  }\n\n  return this;\n};\n\nSchemaString.prototype.maxLength = SchemaString.prototype.maxlength;\n\n/**\n * Sets a regexp validator.\n *\n * Any value that does not pass `regExp`.test(val) will fail validation.\n *\n * #### Example:\n *\n *     const s = new Schema({ name: { type: String, match: /^a/ }})\n *     const M = db.model('M', s)\n *     const m = new M({ name: 'I am invalid' })\n *     m.validate(function (err) {\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\n *       m.name = 'apples'\n *       m.validate(function (err) {\n *         assert.ok(err) // success\n *       })\n *     })\n *\n *     // using a custom error message\n *     const match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\n *     const s = new Schema({ file: { type: String, match: match }})\n *     const M = db.model('M', s);\n *     const m = new M({ file: 'invalid' });\n *     m.validate(function (err) {\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\n *     })\n *\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\n *\n *     const s = new Schema({ name: { type: String, match: /^a/, required: true }})\n *\n * @param {RegExp} regExp regular expression to test against\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.match = function match(regExp, message) {\n  // yes, we allow multiple match validators\n\n  const msg = message || MongooseError.messages.String.match;\n\n  const matchValidator = function(v) {\n    if (!regExp) {\n      return false;\n    }\n\n    // In case RegExp happens to have `/g` flag set, we need to reset the\n    // `lastIndex`, otherwise `match` will intermittently fail.\n    regExp.lastIndex = 0;\n\n    const ret = ((v != null && v !== '')\n      ? regExp.test(v)\n      : true);\n    return ret;\n  };\n\n  this.validators.push({\n    validator: matchValidator,\n    message: msg,\n    type: 'regexp',\n    regexp: regExp\n  });\n  return this;\n};\n\n/**\n * Check if the given value satisfies the `required` validator. The value is\n * considered valid if it is a string (that is, not `null` or `undefined`) and\n * has positive length. The `required` validator **will** fail for empty\n * strings.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaString.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?\n    this.constructor.checkRequired() :\n    SchemaString.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Casts to String\n *\n * @api private\n */\n\nSchemaString.prototype.cast = function(value, doc, init) {\n  if (typeof value !== 'string' && SchemaType._isRef(this, value, doc, init)) {\n    return this._castRef(value, doc, init);\n  }\n\n  let castString;\n  if (typeof this._castFunction === 'function') {\n    castString = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castString = this.constructor.cast();\n  } else {\n    castString = SchemaString.cast();\n  }\n\n  try {\n    return castString(value);\n  } catch (error) {\n    throw new CastError('string', value, this.path, null, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\n/*!\n * ignore\n */\n\nfunction handleArray(val) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n  return val.map(function(m) {\n    return _this.castForQuery(m);\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction handleSingleNoSetters(val) {\n  if (val == null) {\n    return this._castNullish(val);\n  }\n\n  return this.cast(val, this);\n}\n\nconst $conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $all: handleArray,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $options: handleSingleNoSetters,\n  $regex: function handle$regex(val) {\n    if (Object.prototype.toString.call(val) === '[object RegExp]') {\n      return val;\n    }\n\n    return handleSingleNoSetters.call(this, val);\n  },\n  $not: handleSingle\n});\n\nObject.defineProperty(SchemaString.prototype, '$conditionalHandlers', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: Object.freeze($conditionalHandlers)\n});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [val]\n * @api private\n */\n\nSchemaString.prototype.castForQuery = function($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with String.');\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  if (Object.prototype.toString.call(val) === '[object RegExp]' || isBsonType(val, 'BSONRegExp')) {\n    return val;\n  }\n\n  return this._castForQuery(val);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaString;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}