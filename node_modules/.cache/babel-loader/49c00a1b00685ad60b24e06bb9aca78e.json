{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertUninitialized = exports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst bson_1 = require(\"../bson\");\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst get_more_1 = require(\"../operations/get_more\");\n\nconst read_concern_1 = require(\"../read_concern\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst sessions_1 = require(\"../sessions\");\n\nconst utils_1 = require(\"../utils\");\n/** @internal */\n\n\nconst kId = Symbol('id');\n/** @internal */\n\nconst kDocuments = Symbol('documents');\n/** @internal */\n\nconst kServer = Symbol('server');\n/** @internal */\n\nconst kNamespace = Symbol('namespace');\n/** @internal */\n\nconst kTopology = Symbol('topology');\n/** @internal */\n\nconst kSession = Symbol('session');\n/** @internal */\n\nconst kOptions = Symbol('options');\n/** @internal */\n\nconst kTransform = Symbol('transform');\n/** @internal */\n\nconst kInitialized = Symbol('initialized');\n/** @internal */\n\nconst kClosed = Symbol('closed');\n/** @internal */\n\nconst kKilled = Symbol('killed');\n/** @internal */\n\nconst kInit = Symbol('kInit');\n/** @public */\n\nexports.CURSOR_FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\n\nclass AbstractCursor extends mongo_types_1.TypedEventEmitter {\n  /** @internal */\n  constructor(topology, namespace) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    this[kTopology] = topology;\n    this[kNamespace] = namespace;\n    this[kDocuments] = []; // TODO: https://github.com/microsoft/TypeScript/issues/36230\n\n    this[kInitialized] = false;\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kOptions] = {\n      readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference ? options.readPreference : read_preference_1.ReadPreference.primary,\n      ...(0, bson_1.pluckBSONSerializeOptions)(options)\n    };\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n\n    if (readConcern) {\n      this[kOptions].readConcern = readConcern;\n    }\n\n    if (typeof options.batchSize === 'number') {\n      this[kOptions].batchSize = options.batchSize;\n    } // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n\n\n    if (options.comment !== undefined) {\n      this[kOptions].comment = options.comment;\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      this[kOptions].maxTimeMS = options.maxTimeMS;\n    }\n\n    if (options.session instanceof sessions_1.ClientSession) {\n      this[kSession] = options.session;\n    }\n  }\n\n  get id() {\n    return this[kId];\n  }\n  /** @internal */\n\n\n  get topology() {\n    return this[kTopology];\n  }\n  /** @internal */\n\n\n  get server() {\n    return this[kServer];\n  }\n\n  get namespace() {\n    return this[kNamespace];\n  }\n\n  get readPreference() {\n    return this[kOptions].readPreference;\n  }\n\n  get readConcern() {\n    return this[kOptions].readConcern;\n  }\n  /** @internal */\n\n\n  get session() {\n    return this[kSession];\n  }\n\n  set session(clientSession) {\n    this[kSession] = clientSession;\n  }\n  /** @internal */\n\n\n  get cursorOptions() {\n    return this[kOptions];\n  }\n\n  get closed() {\n    return this[kClosed];\n  }\n\n  get killed() {\n    return this[kKilled];\n  }\n\n  get loadBalanced() {\n    return this[kTopology].loadBalanced;\n  }\n  /** Returns current buffered documents length */\n\n\n  bufferedCount() {\n    return this[kDocuments].length;\n  }\n  /** Returns current buffered documents */\n\n\n  readBufferedDocuments(number) {\n    return this[kDocuments].splice(0, number !== null && number !== void 0 ? number : this[kDocuments].length);\n  }\n\n  [Symbol.asyncIterator]() {\n    return {\n      next: () => this.next().then(value => value != null ? {\n        value,\n        done: false\n      } : {\n        value: undefined,\n        done: true\n      })\n    };\n  }\n\n  stream(options) {\n    if (options === null || options === void 0 ? void 0 : options.transform) {\n      const transform = options.transform;\n      const readable = makeCursorStream(this);\n      return readable.pipe(new stream_1.Transform({\n        objectMode: true,\n        highWaterMark: 1,\n\n        transform(chunk, _, callback) {\n          try {\n            const transformed = transform(chunk);\n            callback(undefined, transformed);\n          } catch (err) {\n            callback(err);\n          }\n        }\n\n      }));\n    }\n\n    return makeCursorStream(this);\n  }\n\n  hasNext(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      if (this[kId] === bson_1.Long.ZERO) {\n        return done(undefined, false);\n      }\n\n      if (this[kDocuments].length) {\n        return done(undefined, true);\n      }\n\n      next(this, true, (err, doc) => {\n        if (err) return done(err);\n\n        if (doc) {\n          this[kDocuments].unshift(doc);\n          done(undefined, true);\n          return;\n        }\n\n        done(undefined, false);\n      });\n    });\n  }\n\n  next(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      if (this[kId] === bson_1.Long.ZERO) {\n        return done(new error_1.MongoCursorExhaustedError());\n      }\n\n      next(this, true, done);\n    });\n  }\n\n  tryNext(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      if (this[kId] === bson_1.Long.ZERO) {\n        return done(new error_1.MongoCursorExhaustedError());\n      }\n\n      next(this, false, done);\n    });\n  }\n\n  forEach(iterator, callback) {\n    if (typeof iterator !== 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n    }\n\n    return (0, utils_1.maybePromise)(callback, done => {\n      const transform = this[kTransform];\n\n      const fetchDocs = () => {\n        next(this, true, (err, doc) => {\n          if (err || doc == null) return done(err);\n          let result; // NOTE: no need to transform because `next` will do this automatically\n\n          try {\n            result = iterator(doc); // TODO(NODE-3283): Improve transform typing\n          } catch (error) {\n            return done(error);\n          }\n\n          if (result === false) return done(); // these do need to be transformed since they are copying the rest of the batch\n\n          const internalDocs = this[kDocuments].splice(0, this[kDocuments].length);\n\n          for (let i = 0; i < internalDocs.length; ++i) {\n            try {\n              result = iterator(transform ? transform(internalDocs[i]) : internalDocs[i] // TODO(NODE-3283): Improve transform typing\n              );\n            } catch (error) {\n              return done(error);\n            }\n\n            if (result === false) return done();\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n\n  close(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    const needsToEmitClosed = !this[kClosed];\n    this[kClosed] = true;\n    return (0, utils_1.maybePromise)(callback, done => cleanupCursor(this, {\n      needsToEmitClosed\n    }, done));\n  }\n\n  toArray(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      const docs = [];\n      const transform = this[kTransform];\n\n      const fetchDocs = () => {\n        // NOTE: if we add a `nextBatch` then we should use it here\n        next(this, true, (err, doc) => {\n          if (err) return done(err);\n          if (doc == null) return done(undefined, docs); // NOTE: no need to transform because `next` will do this automatically\n\n          docs.push(doc); // these do need to be transformed since they are copying the rest of the batch\n\n          const internalDocs = transform ? this[kDocuments].splice(0, this[kDocuments].length).map(transform) : this[kDocuments].splice(0, this[kDocuments].length); // TODO(NODE-3283): Improve transform typing\n\n          if (internalDocs) {\n            docs.push(...internalDocs);\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n  /**\n   * Add a cursor flag to the cursor\n   *\n   * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n   * @param value - The flag boolean value.\n   */\n\n\n  addCursorFlag(flag, value) {\n    assertUninitialized(this);\n\n    if (!exports.CURSOR_FLAGS.includes(flag)) {\n      throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n    }\n\n    if (typeof value !== 'boolean') {\n      throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n    }\n\n    this[kOptions][flag] = value;\n    return this;\n  }\n  /**\n   * Map all documents using the provided function\n   * If there is a transform set on the cursor, that will be called first and the result passed to\n   * this function's transform.\n   *\n   * @remarks\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling map,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<Document> = coll.find();\n   * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n   * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n   * ```\n   * @param transform - The mapping transformation method.\n   */\n\n\n  map(transform) {\n    assertUninitialized(this);\n    const oldTransform = this[kTransform]; // TODO(NODE-3283): Improve transform typing\n\n    if (oldTransform) {\n      this[kTransform] = doc => {\n        return transform(oldTransform(doc));\n      };\n    } else {\n      this[kTransform] = transform;\n    }\n\n    return this;\n  }\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n\n\n  withReadPreference(readPreference) {\n    assertUninitialized(this);\n\n    if (readPreference instanceof read_preference_1.ReadPreference) {\n      this[kOptions].readPreference = readPreference;\n    } else if (typeof readPreference === 'string') {\n      this[kOptions].readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    } else {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n    }\n\n    return this;\n  }\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n\n\n  withReadConcern(readConcern) {\n    assertUninitialized(this);\n    const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({\n      readConcern\n    });\n\n    if (resolvedReadConcern) {\n      this[kOptions].readConcern = resolvedReadConcern;\n    }\n\n    return this;\n  }\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n\n\n  maxTimeMS(value) {\n    assertUninitialized(this);\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kOptions].maxTimeMS = value;\n    return this;\n  }\n  /**\n   * Set the batch size for the cursor.\n   *\n   * @param value - The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.\n   */\n\n\n  batchSize(value) {\n    assertUninitialized(this);\n\n    if (this[kOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n    }\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n    }\n\n    this[kOptions].batchSize = value;\n    return this;\n  }\n  /**\n   * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n   * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n   * if the resultant data has already been retrieved by this cursor.\n   */\n\n\n  rewind() {\n    if (!this[kInitialized]) {\n      return;\n    }\n\n    this[kId] = undefined;\n    this[kDocuments] = [];\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kInitialized] = false;\n    const session = this[kSession];\n\n    if (session) {\n      // We only want to end this session if we created it, and it hasn't ended yet\n      if (session.explicit === false && !session.hasEnded) {\n        session.endSession();\n      }\n\n      this[kSession] = undefined;\n    }\n  }\n  /** @internal */\n\n\n  _getMore(batchSize, callback) {\n    const cursorId = this[kId];\n    const cursorNs = this[kNamespace];\n    const server = this[kServer];\n\n    if (cursorId == null) {\n      callback(new error_1.MongoRuntimeError('Unable to iterate cursor with no id'));\n      return;\n    }\n\n    if (server == null) {\n      callback(new error_1.MongoRuntimeError('Unable to iterate cursor without selected server'));\n      return;\n    }\n\n    const getMoreOperation = new get_more_1.GetMoreOperation(cursorNs, cursorId, server, { ...this[kOptions],\n      session: this[kSession],\n      batchSize\n    });\n    (0, execute_operation_1.executeOperation)(this, getMoreOperation, callback);\n  }\n  /**\n   * @internal\n   *\n   * This function is exposed for the unified test runner's createChangeStream\n   * operation.  We cannot refactor to use the abstract _initialize method without\n   * a significant refactor.\n   */\n\n\n  [kInit](callback) {\n    if (this[kSession] == null) {\n      if (this[kTopology].shouldCheckForSessionSupport()) {\n        return this[kTopology].selectServer(read_preference_1.ReadPreference.primaryPreferred, {}, err => {\n          if (err) return callback(err);\n          return this[kInit](callback);\n        });\n      } else if (this[kTopology].hasSessionSupport()) {\n        this[kSession] = this[kTopology].startSession({\n          owner: this,\n          explicit: false\n        });\n      }\n    }\n\n    this._initialize(this[kSession], (err, state) => {\n      if (state) {\n        const response = state.response;\n        this[kServer] = state.server;\n        this[kSession] = state.session;\n\n        if (response.cursor) {\n          this[kId] = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : response.cursor.id;\n\n          if (response.cursor.ns) {\n            this[kNamespace] = (0, utils_1.ns)(response.cursor.ns);\n          }\n\n          this[kDocuments] = response.cursor.firstBatch;\n        } // When server responses return without a cursor document, we close this cursor\n        // and return the raw server response. This is often the case for explain commands\n        // for example\n\n\n        if (this[kId] == null) {\n          this[kId] = bson_1.Long.ZERO; // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n\n          this[kDocuments] = [state.response];\n        }\n      } // the cursor is now initialized, even if an error occurred or it is dead\n\n\n      this[kInitialized] = true;\n\n      if (err || cursorIsDead(this)) {\n        return cleanupCursor(this, {\n          error: err\n        }, () => callback(err, nextDocument(this)));\n      }\n\n      callback();\n    });\n  }\n\n}\n\nexports.AbstractCursor = AbstractCursor;\n/** @event */\n\nAbstractCursor.CLOSE = 'close';\n\nfunction nextDocument(cursor) {\n  if (cursor[kDocuments] == null || !cursor[kDocuments].length) {\n    return null;\n  }\n\n  const doc = cursor[kDocuments].shift();\n\n  if (doc) {\n    const transform = cursor[kTransform];\n\n    if (transform) {\n      return transform(doc);\n    }\n\n    return doc;\n  }\n\n  return null;\n}\n\nfunction next(cursor, blocking, callback) {\n  const cursorId = cursor[kId];\n\n  if (cursor.closed) {\n    return callback(undefined, null);\n  }\n\n  if (cursor[kDocuments] && cursor[kDocuments].length) {\n    callback(undefined, nextDocument(cursor));\n    return;\n  }\n\n  if (cursorId == null) {\n    // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n    cursor[kInit]((err, value) => {\n      if (err) return callback(err);\n\n      if (value) {\n        return callback(undefined, value);\n      }\n\n      return next(cursor, blocking, callback);\n    });\n    return;\n  }\n\n  if (cursorIsDead(cursor)) {\n    return cleanupCursor(cursor, undefined, () => callback(undefined, null));\n  } // otherwise need to call getMore\n\n\n  const batchSize = cursor[kOptions].batchSize || 1000;\n\n  cursor._getMore(batchSize, (err, response) => {\n    if (response) {\n      const cursorId = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : response.cursor.id;\n      cursor[kDocuments] = response.cursor.nextBatch;\n      cursor[kId] = cursorId;\n    }\n\n    if (err || cursorIsDead(cursor)) {\n      return cleanupCursor(cursor, {\n        error: err\n      }, () => callback(err, nextDocument(cursor)));\n    }\n\n    if (cursor[kDocuments].length === 0 && blocking === false) {\n      return callback(undefined, null);\n    }\n\n    next(cursor, blocking, callback);\n  });\n}\n\nfunction cursorIsDead(cursor) {\n  const cursorId = cursor[kId];\n  return !!cursorId && cursorId.isZero();\n}\n\nfunction cleanupCursor(cursor, options, callback) {\n  var _a;\n\n  const cursorId = cursor[kId];\n  const cursorNs = cursor[kNamespace];\n  const server = cursor[kServer];\n  const session = cursor[kSession];\n  const error = options === null || options === void 0 ? void 0 : options.error;\n  const needsToEmitClosed = (_a = options === null || options === void 0 ? void 0 : options.needsToEmitClosed) !== null && _a !== void 0 ? _a : cursor[kDocuments].length === 0;\n\n  if (error) {\n    if (cursor.loadBalanced && error instanceof error_1.MongoNetworkError) {\n      return completeCleanup();\n    }\n  }\n\n  if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n    if (needsToEmitClosed) {\n      cursor[kClosed] = true;\n      cursor[kId] = bson_1.Long.ZERO;\n      cursor.emit(AbstractCursor.CLOSE);\n    }\n\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({\n          error\n        }, callback);\n      }\n\n      if (!session.inTransaction()) {\n        (0, sessions_1.maybeClearPinnedConnection)(session, {\n          error\n        });\n      }\n    }\n\n    return callback();\n  }\n\n  function completeCleanup() {\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({\n          error\n        }, () => {\n          cursor.emit(AbstractCursor.CLOSE);\n          callback();\n        });\n      }\n\n      if (!session.inTransaction()) {\n        (0, sessions_1.maybeClearPinnedConnection)(session, {\n          error\n        });\n      }\n    }\n\n    cursor.emit(AbstractCursor.CLOSE);\n    return callback();\n  }\n\n  cursor[kKilled] = true;\n  server.killCursors(cursorNs, [cursorId], { ...(0, bson_1.pluckBSONSerializeOptions)(cursor[kOptions]),\n    session\n  }, () => completeCleanup());\n}\n/** @internal */\n\n\nfunction assertUninitialized(cursor) {\n  if (cursor[kInitialized]) {\n    throw new error_1.MongoCursorInUseError();\n  }\n}\n\nexports.assertUninitialized = assertUninitialized;\n\nfunction makeCursorStream(cursor) {\n  const readable = new stream_1.Readable({\n    objectMode: true,\n    autoDestroy: false,\n    highWaterMark: 1\n  });\n  let initialized = false;\n  let reading = false;\n  let needToClose = true; // NOTE: we must close the cursor if we never read from it, use `_construct` in future node versions\n\n  readable._read = function () {\n    if (initialized === false) {\n      needToClose = false;\n      initialized = true;\n    }\n\n    if (!reading) {\n      reading = true;\n      readNext();\n    }\n  };\n\n  readable._destroy = function (error, cb) {\n    if (needToClose) {\n      cursor.close(err => process.nextTick(cb, err || error));\n    } else {\n      cb(error);\n    }\n  };\n\n  function readNext() {\n    needToClose = false;\n    next(cursor, true, (err, result) => {\n      needToClose = err ? !cursor.closed : result != null;\n\n      if (err) {\n        // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n        //       desired behavior is that a stream ends cleanly when a user explicitly closes\n        //       a client during iteration. Alternatively, we could do the \"right\" thing and\n        //       propagate the error message by removing this special case.\n        if (err.message.match(/server is closed/)) {\n          cursor.close();\n          return readable.push(null);\n        } // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n        //       to be \"operation interrupted\", where a cursor has been closed but there is an\n        //       active getMore in-flight. This used to check if the cursor was killed but once\n        //       that changed to happen in cleanup legitimate errors would not destroy the\n        //       stream. There are change streams test specifically test these cases.\n\n\n        if (err.message.match(/interrupted/)) {\n          return readable.push(null);\n        }\n\n        return readable.destroy(err);\n      }\n\n      if (result == null) {\n        readable.push(null);\n      } else if (readable.destroyed) {\n        cursor.close();\n      } else {\n        if (readable.push(result)) {\n          return readNext();\n        }\n\n        reading = false;\n      }\n    });\n  }\n\n  return readable;\n}","map":{"version":3,"mappings":"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","names":["kId","Symbol","kDocuments","kServer","kNamespace","kTopology","kSession","kOptions","kTransform","kInitialized","kClosed","kKilled","kInit","exports","AbstractCursor","mongo_types_1","constructor","topology","namespace","options","readPreference","read_preference_1","primary","readConcern","read_concern_1","fromOptions","batchSize","comment","undefined","maxTimeMS","session","sessions_1","id","server","clientSession","cursorOptions","closed","killed","loadBalanced","bufferedCount","length","readBufferedDocuments","number","splice","asyncIterator","next","then","value","done","stream","transform","readable","makeCursorStream","pipe","stream_1","objectMode","highWaterMark","chunk","_","callback","transformed","err","hasNext","bson_1","ZERO","doc","unshift","error_1","tryNext","forEach","iterator","fetchDocs","result","error","internalDocs","i","close","needsToEmitClosed","cleanupCursor","toArray","docs","push","map","addCursorFlag","flag","assertUninitialized","includes","oldTransform","withReadPreference","fromString","withReadConcern","resolvedReadConcern","tailable","rewind","explicit","hasEnded","endSession","_getMore","cursorId","cursorNs","getMoreOperation","get_more_1","shouldCheckForSessionSupport","selectServer","primaryPreferred","hasSessionSupport","startSession","owner","_initialize","state","response","cursor","fromNumber","ns","firstBatch","cursorIsDead","nextDocument","shift","blocking","nextBatch","isZero","_a","completeCleanup","emit","CLOSE","inTransaction","killCursors","autoDestroy","initialized","reading","needToClose","_read","readNext","_destroy","cb","process","nextTick","message","match","destroy","destroyed"],"sources":["B:\\web_project_react\\web_car_react\\node_modules\\mongodb\\src\\cursor\\abstract_cursor.ts"],"sourcesContent":["import { Readable, Transform } from 'stream';\n\nimport { BSONSerializeOptions, Document, Long, pluckBSONSerializeOptions } from '../bson';\nimport {\n  AnyError,\n  MongoCursorExhaustedError,\n  MongoCursorInUseError,\n  MongoInvalidArgumentError,\n  MongoNetworkError,\n  MongoRuntimeError,\n  MongoTailableCursorError\n} from '../error';\nimport { TODO_NODE_3286, TypedEventEmitter } from '../mongo_types';\nimport { executeOperation, ExecutionResult } from '../operations/execute_operation';\nimport { GetMoreOperation } from '../operations/get_more';\nimport { ReadConcern, ReadConcernLike } from '../read_concern';\nimport { ReadPreference, ReadPreferenceLike } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport type { Topology } from '../sdam/topology';\nimport { ClientSession, maybeClearPinnedConnection } from '../sessions';\nimport { Callback, maybePromise, MongoDBNamespace, ns } from '../utils';\n\n/** @internal */\nconst kId = Symbol('id');\n/** @internal */\nconst kDocuments = Symbol('documents');\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kNamespace = Symbol('namespace');\n/** @internal */\nconst kTopology = Symbol('topology');\n/** @internal */\nconst kSession = Symbol('session');\n/** @internal */\nconst kOptions = Symbol('options');\n/** @internal */\nconst kTransform = Symbol('transform');\n/** @internal */\nconst kInitialized = Symbol('initialized');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kKilled = Symbol('killed');\n/** @internal */\nconst kInit = Symbol('kInit');\n\n/** @public */\nexport const CURSOR_FLAGS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'exhaust',\n  'partial'\n] as const;\n\n/** @public\n * @deprecated This interface is deprecated */\nexport interface CursorCloseOptions {\n  /** Bypass calling killCursors when closing the cursor. */\n  /** @deprecated  the skipKillCursors option is deprecated */\n  skipKillCursors?: boolean;\n}\n\n/** @public */\nexport interface CursorStreamOptions {\n  /** A transformation method applied to each document emitted by the stream */\n  transform?(doc: Document): Document;\n}\n\n/** @public */\nexport type CursorFlag = typeof CURSOR_FLAGS[number];\n\n/** @public */\nexport interface AbstractCursorOptions extends BSONSerializeOptions {\n  session?: ClientSession;\n  readPreference?: ReadPreferenceLike;\n  readConcern?: ReadConcernLike;\n  batchSize?: number;\n  maxTimeMS?: number;\n  /**\n   * Comment to apply to the operation.\n   *\n   * In server versions pre-4.4, 'comment' must be string.  A server\n   * error will be thrown if any other type is provided.\n   *\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n   */\n  comment?: unknown;\n  tailable?: boolean;\n  awaitData?: boolean;\n  noCursorTimeout?: boolean;\n}\n\n/** @internal */\nexport type InternalAbstractCursorOptions = Omit<AbstractCursorOptions, 'readPreference'> & {\n  // resolved\n  readPreference: ReadPreference;\n  readConcern?: ReadConcern;\n\n  // cursor flags, some are deprecated\n  oplogReplay?: boolean;\n  exhaust?: boolean;\n  partial?: boolean;\n};\n\n/** @public */\nexport type AbstractCursorEvents = {\n  [AbstractCursor.CLOSE](): void;\n};\n\n/** @public */\nexport abstract class AbstractCursor<\n  TSchema = any,\n  CursorEvents extends AbstractCursorEvents = AbstractCursorEvents\n> extends TypedEventEmitter<CursorEvents> {\n  /** @internal */\n  [kId]?: Long;\n  /** @internal */\n  [kSession]?: ClientSession;\n  /** @internal */\n  [kServer]?: Server;\n  /** @internal */\n  [kNamespace]: MongoDBNamespace;\n  /** @internal */\n  [kDocuments]: TSchema[];\n  /** @internal */\n  [kTopology]: Topology;\n  /** @internal */\n  [kTransform]?: (doc: TSchema) => any;\n  /** @internal */\n  [kInitialized]: boolean;\n  /** @internal */\n  [kClosed]: boolean;\n  /** @internal */\n  [kKilled]: boolean;\n  /** @internal */\n  [kOptions]: InternalAbstractCursorOptions;\n\n  /** @event */\n  static readonly CLOSE = 'close' as const;\n\n  /** @internal */\n  constructor(\n    topology: Topology,\n    namespace: MongoDBNamespace,\n    options: AbstractCursorOptions = {}\n  ) {\n    super();\n\n    this[kTopology] = topology;\n    this[kNamespace] = namespace;\n    this[kDocuments] = []; // TODO: https://github.com/microsoft/TypeScript/issues/36230\n    this[kInitialized] = false;\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kOptions] = {\n      readPreference:\n        options.readPreference && options.readPreference instanceof ReadPreference\n          ? options.readPreference\n          : ReadPreference.primary,\n      ...pluckBSONSerializeOptions(options)\n    };\n\n    const readConcern = ReadConcern.fromOptions(options);\n    if (readConcern) {\n      this[kOptions].readConcern = readConcern;\n    }\n\n    if (typeof options.batchSize === 'number') {\n      this[kOptions].batchSize = options.batchSize;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      this[kOptions].comment = options.comment;\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      this[kOptions].maxTimeMS = options.maxTimeMS;\n    }\n\n    if (options.session instanceof ClientSession) {\n      this[kSession] = options.session;\n    }\n  }\n\n  get id(): Long | undefined {\n    return this[kId];\n  }\n\n  /** @internal */\n  get topology(): Topology {\n    return this[kTopology];\n  }\n\n  /** @internal */\n  get server(): Server | undefined {\n    return this[kServer];\n  }\n\n  get namespace(): MongoDBNamespace {\n    return this[kNamespace];\n  }\n\n  get readPreference(): ReadPreference {\n    return this[kOptions].readPreference;\n  }\n\n  get readConcern(): ReadConcern | undefined {\n    return this[kOptions].readConcern;\n  }\n\n  /** @internal */\n  get session(): ClientSession | undefined {\n    return this[kSession];\n  }\n\n  set session(clientSession: ClientSession | undefined) {\n    this[kSession] = clientSession;\n  }\n\n  /** @internal */\n  get cursorOptions(): InternalAbstractCursorOptions {\n    return this[kOptions];\n  }\n\n  get closed(): boolean {\n    return this[kClosed];\n  }\n\n  get killed(): boolean {\n    return this[kKilled];\n  }\n\n  get loadBalanced(): boolean {\n    return this[kTopology].loadBalanced;\n  }\n\n  /** Returns current buffered documents length */\n  bufferedCount(): number {\n    return this[kDocuments].length;\n  }\n\n  /** Returns current buffered documents */\n  readBufferedDocuments(number?: number): TSchema[] {\n    return this[kDocuments].splice(0, number ?? this[kDocuments].length);\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<TSchema, void> {\n    return {\n      next: () =>\n        this.next().then(value =>\n          value != null ? { value, done: false } : { value: undefined, done: true }\n        )\n    };\n  }\n\n  stream(options?: CursorStreamOptions): Readable {\n    if (options?.transform) {\n      const transform = options.transform;\n      const readable = makeCursorStream(this);\n\n      return readable.pipe(\n        new Transform({\n          objectMode: true,\n          highWaterMark: 1,\n          transform(chunk, _, callback) {\n            try {\n              const transformed = transform(chunk);\n              callback(undefined, transformed);\n            } catch (err) {\n              callback(err);\n            }\n          }\n        })\n      );\n    }\n\n    return makeCursorStream(this);\n  }\n\n  hasNext(): Promise<boolean>;\n  hasNext(callback: Callback<boolean>): void;\n  hasNext(callback?: Callback<boolean>): Promise<boolean> | void {\n    return maybePromise(callback, done => {\n      if (this[kId] === Long.ZERO) {\n        return done(undefined, false);\n      }\n\n      if (this[kDocuments].length) {\n        return done(undefined, true);\n      }\n\n      next<TSchema>(this, true, (err, doc) => {\n        if (err) return done(err);\n\n        if (doc) {\n          this[kDocuments].unshift(doc);\n          done(undefined, true);\n          return;\n        }\n\n        done(undefined, false);\n      });\n    });\n  }\n\n  /** Get the next available document from the cursor, returns null if no more documents are available. */\n  next(): Promise<TSchema | null>;\n  next(callback: Callback<TSchema | null>): void;\n  next(callback?: Callback<TSchema | null>): Promise<TSchema | null> | void;\n  next(callback?: Callback<TSchema | null>): Promise<TSchema | null> | void {\n    return maybePromise(callback, done => {\n      if (this[kId] === Long.ZERO) {\n        return done(new MongoCursorExhaustedError());\n      }\n\n      next(this, true, done);\n    });\n  }\n\n  /**\n   * Try to get the next available document from the cursor or `null` if an empty batch is returned\n   */\n  tryNext(): Promise<TSchema | null>;\n  tryNext(callback: Callback<TSchema | null>): void;\n  tryNext(callback?: Callback<TSchema | null>): Promise<TSchema | null> | void {\n    return maybePromise(callback, done => {\n      if (this[kId] === Long.ZERO) {\n        return done(new MongoCursorExhaustedError());\n      }\n\n      next(this, false, done);\n    });\n  }\n\n  /**\n   * Iterates over all the documents for this cursor using the iterator, callback pattern.\n   *\n   * @param iterator - The iteration callback.\n   * @param callback - The end callback.\n   */\n  forEach(iterator: (doc: TSchema) => boolean | void): Promise<void>;\n  forEach(iterator: (doc: TSchema) => boolean | void, callback: Callback<void>): void;\n  forEach(\n    iterator: (doc: TSchema) => boolean | void,\n    callback?: Callback<void>\n  ): Promise<void> | void {\n    if (typeof iterator !== 'function') {\n      throw new MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n    }\n    return maybePromise(callback, done => {\n      const transform = this[kTransform];\n      const fetchDocs = () => {\n        next<TSchema>(this, true, (err, doc) => {\n          if (err || doc == null) return done(err);\n          let result;\n          // NOTE: no need to transform because `next` will do this automatically\n          try {\n            result = iterator(doc); // TODO(NODE-3283): Improve transform typing\n          } catch (error) {\n            return done(error);\n          }\n\n          if (result === false) return done();\n\n          // these do need to be transformed since they are copying the rest of the batch\n          const internalDocs = this[kDocuments].splice(0, this[kDocuments].length);\n          for (let i = 0; i < internalDocs.length; ++i) {\n            try {\n              result = iterator(\n                (transform ? transform(internalDocs[i]) : internalDocs[i]) as TSchema // TODO(NODE-3283): Improve transform typing\n              );\n            } catch (error) {\n              return done(error);\n            }\n            if (result === false) return done();\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n\n  close(): void;\n  close(callback: Callback): void;\n  /**\n   * @deprecated options argument is deprecated\n   */\n  close(options: CursorCloseOptions): Promise<void>;\n  /**\n   * @deprecated options argument is deprecated\n   */\n  close(options: CursorCloseOptions, callback: Callback): void;\n  close(options?: CursorCloseOptions | Callback, callback?: Callback): Promise<void> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    const needsToEmitClosed = !this[kClosed];\n    this[kClosed] = true;\n\n    return maybePromise(callback, done => cleanupCursor(this, { needsToEmitClosed }, done));\n  }\n\n  /**\n   * Returns an array of documents. The caller is responsible for making sure that there\n   * is enough memory to store the results. Note that the array only contains partial\n   * results when this cursor had been previously accessed. In that case,\n   * cursor.rewind() can be used to reset the cursor.\n   *\n   * @param callback - The result callback.\n   */\n  toArray(): Promise<TSchema[]>;\n  toArray(callback: Callback<TSchema[]>): void;\n  toArray(callback?: Callback<TSchema[]>): Promise<TSchema[]> | void {\n    return maybePromise(callback, done => {\n      const docs: TSchema[] = [];\n      const transform = this[kTransform];\n      const fetchDocs = () => {\n        // NOTE: if we add a `nextBatch` then we should use it here\n        next<TSchema>(this, true, (err, doc) => {\n          if (err) return done(err);\n          if (doc == null) return done(undefined, docs);\n\n          // NOTE: no need to transform because `next` will do this automatically\n          docs.push(doc);\n\n          // these do need to be transformed since they are copying the rest of the batch\n          const internalDocs = (\n            transform\n              ? this[kDocuments].splice(0, this[kDocuments].length).map(transform)\n              : this[kDocuments].splice(0, this[kDocuments].length)\n          ) as TSchema[]; // TODO(NODE-3283): Improve transform typing\n\n          if (internalDocs) {\n            docs.push(...internalDocs);\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n\n  /**\n   * Add a cursor flag to the cursor\n   *\n   * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n   * @param value - The flag boolean value.\n   */\n  addCursorFlag(flag: CursorFlag, value: boolean): this {\n    assertUninitialized(this);\n    if (!CURSOR_FLAGS.includes(flag)) {\n      throw new MongoInvalidArgumentError(`Flag ${flag} is not one of ${CURSOR_FLAGS}`);\n    }\n\n    if (typeof value !== 'boolean') {\n      throw new MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n    }\n\n    this[kOptions][flag] = value;\n    return this;\n  }\n\n  /**\n   * Map all documents using the provided function\n   * If there is a transform set on the cursor, that will be called first and the result passed to\n   * this function's transform.\n   *\n   * @remarks\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling map,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<Document> = coll.find();\n   * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n   * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n   * ```\n   * @param transform - The mapping transformation method.\n   */\n  map<T = any>(transform: (doc: TSchema) => T): AbstractCursor<T> {\n    assertUninitialized(this);\n    const oldTransform = this[kTransform] as (doc: TSchema) => TSchema; // TODO(NODE-3283): Improve transform typing\n    if (oldTransform) {\n      this[kTransform] = doc => {\n        return transform(oldTransform(doc));\n      };\n    } else {\n      this[kTransform] = transform;\n    }\n\n    return this as unknown as AbstractCursor<T>;\n  }\n\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n  withReadPreference(readPreference: ReadPreferenceLike): this {\n    assertUninitialized(this);\n    if (readPreference instanceof ReadPreference) {\n      this[kOptions].readPreference = readPreference;\n    } else if (typeof readPreference === 'string') {\n      this[kOptions].readPreference = ReadPreference.fromString(readPreference);\n    } else {\n      throw new MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n  withReadConcern(readConcern: ReadConcernLike): this {\n    assertUninitialized(this);\n    const resolvedReadConcern = ReadConcern.fromOptions({ readConcern });\n    if (resolvedReadConcern) {\n      this[kOptions].readConcern = resolvedReadConcern;\n    }\n\n    return this;\n  }\n\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  maxTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kOptions].maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Set the batch size for the cursor.\n   *\n   * @param value - The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.\n   */\n  batchSize(value: number): this {\n    assertUninitialized(this);\n    if (this[kOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support batchSize');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n    }\n\n    this[kOptions].batchSize = value;\n    return this;\n  }\n\n  /**\n   * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n   * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n   * if the resultant data has already been retrieved by this cursor.\n   */\n  rewind(): void {\n    if (!this[kInitialized]) {\n      return;\n    }\n\n    this[kId] = undefined;\n    this[kDocuments] = [];\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kInitialized] = false;\n\n    const session = this[kSession];\n    if (session) {\n      // We only want to end this session if we created it, and it hasn't ended yet\n      if (session.explicit === false && !session.hasEnded) {\n        session.endSession();\n      }\n\n      this[kSession] = undefined;\n    }\n  }\n\n  /**\n   * Returns a new uninitialized copy of this cursor, with options matching those that have been set on the current instance\n   */\n  abstract clone(): AbstractCursor<TSchema>;\n\n  /** @internal */\n  abstract _initialize(\n    session: ClientSession | undefined,\n    callback: Callback<ExecutionResult>\n  ): void;\n\n  /** @internal */\n  _getMore(batchSize: number, callback: Callback<Document>): void {\n    const cursorId = this[kId];\n    const cursorNs = this[kNamespace];\n    const server = this[kServer];\n\n    if (cursorId == null) {\n      callback(new MongoRuntimeError('Unable to iterate cursor with no id'));\n      return;\n    }\n\n    if (server == null) {\n      callback(new MongoRuntimeError('Unable to iterate cursor without selected server'));\n      return;\n    }\n\n    const getMoreOperation = new GetMoreOperation(cursorNs, cursorId, server, {\n      ...this[kOptions],\n      session: this[kSession],\n      batchSize\n    });\n\n    executeOperation(this, getMoreOperation, callback);\n  }\n\n  /**\n   * @internal\n   *\n   * This function is exposed for the unified test runner's createChangeStream\n   * operation.  We cannot refactor to use the abstract _initialize method without\n   * a significant refactor.\n   */\n  [kInit](callback: Callback<TSchema | null>): void {\n    if (this[kSession] == null) {\n      if (this[kTopology].shouldCheckForSessionSupport()) {\n        return this[kTopology].selectServer(ReadPreference.primaryPreferred, {}, err => {\n          if (err) return callback(err);\n          return this[kInit](callback);\n        });\n      } else if (this[kTopology].hasSessionSupport()) {\n        this[kSession] = this[kTopology].startSession({ owner: this, explicit: false });\n      }\n    }\n\n    this._initialize(this[kSession], (err, state) => {\n      if (state) {\n        const response = state.response;\n        this[kServer] = state.server;\n        this[kSession] = state.session;\n\n        if (response.cursor) {\n          this[kId] =\n            typeof response.cursor.id === 'number'\n              ? Long.fromNumber(response.cursor.id)\n              : response.cursor.id;\n\n          if (response.cursor.ns) {\n            this[kNamespace] = ns(response.cursor.ns);\n          }\n\n          this[kDocuments] = response.cursor.firstBatch;\n        }\n\n        // When server responses return without a cursor document, we close this cursor\n        // and return the raw server response. This is often the case for explain commands\n        // for example\n        if (this[kId] == null) {\n          this[kId] = Long.ZERO;\n          // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n          this[kDocuments] = [state.response as TODO_NODE_3286];\n        }\n      }\n\n      // the cursor is now initialized, even if an error occurred or it is dead\n      this[kInitialized] = true;\n\n      if (err || cursorIsDead(this)) {\n        return cleanupCursor(this, { error: err }, () => callback(err, nextDocument(this)));\n      }\n\n      callback();\n    });\n  }\n}\n\nfunction nextDocument<T>(cursor: AbstractCursor): T | null {\n  if (cursor[kDocuments] == null || !cursor[kDocuments].length) {\n    return null;\n  }\n\n  const doc = cursor[kDocuments].shift();\n  if (doc) {\n    const transform = cursor[kTransform];\n    if (transform) {\n      return transform(doc) as T;\n    }\n\n    return doc;\n  }\n\n  return null;\n}\n\nfunction next<T>(cursor: AbstractCursor<T>, blocking: boolean, callback: Callback<T | null>): void {\n  const cursorId = cursor[kId];\n  if (cursor.closed) {\n    return callback(undefined, null);\n  }\n\n  if (cursor[kDocuments] && cursor[kDocuments].length) {\n    callback(undefined, nextDocument<T>(cursor));\n    return;\n  }\n\n  if (cursorId == null) {\n    // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n    cursor[kInit]((err, value) => {\n      if (err) return callback(err);\n      if (value) {\n        return callback(undefined, value);\n      }\n      return next(cursor, blocking, callback);\n    });\n\n    return;\n  }\n\n  if (cursorIsDead(cursor)) {\n    return cleanupCursor(cursor, undefined, () => callback(undefined, null));\n  }\n\n  // otherwise need to call getMore\n  const batchSize = cursor[kOptions].batchSize || 1000;\n  cursor._getMore(batchSize, (err, response) => {\n    if (response) {\n      const cursorId =\n        typeof response.cursor.id === 'number'\n          ? Long.fromNumber(response.cursor.id)\n          : response.cursor.id;\n\n      cursor[kDocuments] = response.cursor.nextBatch;\n      cursor[kId] = cursorId;\n    }\n\n    if (err || cursorIsDead(cursor)) {\n      return cleanupCursor(cursor, { error: err }, () => callback(err, nextDocument<T>(cursor)));\n    }\n\n    if (cursor[kDocuments].length === 0 && blocking === false) {\n      return callback(undefined, null);\n    }\n\n    next(cursor, blocking, callback);\n  });\n}\n\nfunction cursorIsDead(cursor: AbstractCursor): boolean {\n  const cursorId = cursor[kId];\n  return !!cursorId && cursorId.isZero();\n}\n\nfunction cleanupCursor(\n  cursor: AbstractCursor,\n  options: { error?: AnyError | undefined; needsToEmitClosed?: boolean } | undefined,\n  callback: Callback\n): void {\n  const cursorId = cursor[kId];\n  const cursorNs = cursor[kNamespace];\n  const server = cursor[kServer];\n  const session = cursor[kSession];\n  const error = options?.error;\n  const needsToEmitClosed = options?.needsToEmitClosed ?? cursor[kDocuments].length === 0;\n\n  if (error) {\n    if (cursor.loadBalanced && error instanceof MongoNetworkError) {\n      return completeCleanup();\n    }\n  }\n\n  if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n    if (needsToEmitClosed) {\n      cursor[kClosed] = true;\n      cursor[kId] = Long.ZERO;\n      cursor.emit(AbstractCursor.CLOSE);\n    }\n\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({ error }, callback);\n      }\n\n      if (!session.inTransaction()) {\n        maybeClearPinnedConnection(session, { error });\n      }\n    }\n\n    return callback();\n  }\n\n  function completeCleanup() {\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({ error }, () => {\n          cursor.emit(AbstractCursor.CLOSE);\n          callback();\n        });\n      }\n\n      if (!session.inTransaction()) {\n        maybeClearPinnedConnection(session, { error });\n      }\n    }\n\n    cursor.emit(AbstractCursor.CLOSE);\n    return callback();\n  }\n\n  cursor[kKilled] = true;\n  server.killCursors(\n    cursorNs,\n    [cursorId],\n    { ...pluckBSONSerializeOptions(cursor[kOptions]), session },\n    () => completeCleanup()\n  );\n}\n\n/** @internal */\nexport function assertUninitialized(cursor: AbstractCursor): void {\n  if (cursor[kInitialized]) {\n    throw new MongoCursorInUseError();\n  }\n}\n\nfunction makeCursorStream(cursor: AbstractCursor) {\n  const readable = new Readable({\n    objectMode: true,\n    autoDestroy: false,\n    highWaterMark: 1\n  });\n\n  let initialized = false;\n  let reading = false;\n  let needToClose = true; // NOTE: we must close the cursor if we never read from it, use `_construct` in future node versions\n\n  readable._read = function () {\n    if (initialized === false) {\n      needToClose = false;\n      initialized = true;\n    }\n\n    if (!reading) {\n      reading = true;\n      readNext();\n    }\n  };\n\n  readable._destroy = function (error, cb) {\n    if (needToClose) {\n      cursor.close(err => process.nextTick(cb, err || error));\n    } else {\n      cb(error);\n    }\n  };\n\n  function readNext() {\n    needToClose = false;\n    next(cursor, true, (err, result) => {\n      needToClose = err ? !cursor.closed : result != null;\n\n      if (err) {\n        // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n        //       desired behavior is that a stream ends cleanly when a user explicitly closes\n        //       a client during iteration. Alternatively, we could do the \"right\" thing and\n        //       propagate the error message by removing this special case.\n        if (err.message.match(/server is closed/)) {\n          cursor.close();\n          return readable.push(null);\n        }\n\n        // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n        //       to be \"operation interrupted\", where a cursor has been closed but there is an\n        //       active getMore in-flight. This used to check if the cursor was killed but once\n        //       that changed to happen in cleanup legitimate errors would not destroy the\n        //       stream. There are change streams test specifically test these cases.\n        if (err.message.match(/interrupted/)) {\n          return readable.push(null);\n        }\n\n        return readable.destroy(err);\n      }\n\n      if (result == null) {\n        readable.push(null);\n      } else if (readable.destroyed) {\n        cursor.close();\n      } else {\n        if (readable.push(result)) {\n          return readNext();\n        }\n\n        reading = false;\n      }\n    });\n  }\n\n  return readable;\n}\n"]},"metadata":{},"sourceType":"script"}