{"ast":null,"code":"var ip = exports;\n\nvar {\n  Buffer\n} = require('buffer');\n\nvar os = require('os');\n\nip.toBuffer = function (ip, buff, offset) {\n  offset = ~~offset;\n  var result;\n\n  if (this.isV4Format(ip)) {\n    result = buff || new Buffer(offset + 4);\n    ip.split(/\\./g).map(byte => {\n      result[offset++] = parseInt(byte, 10) & 0xff;\n    });\n  } else if (this.isV6Format(ip)) {\n    var sections = ip.split(':', 8);\n    var i;\n\n    for (i = 0; i < sections.length; i++) {\n      var isv4 = this.isV4Format(sections[i]);\n      var v4Buffer;\n\n      if (isv4) {\n        v4Buffer = this.toBuffer(sections[i]);\n        sections[i] = v4Buffer.slice(0, 2).toString('hex');\n      }\n\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, v4Buffer.slice(2, 4).toString('hex'));\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0');\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0');\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n\n      var argv = [i, 1];\n\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0');\n      }\n\n      sections.splice.apply(sections, argv);\n    }\n\n    result = buff || new Buffer(offset + 16);\n\n    for (i = 0; i < sections.length; i++) {\n      var word = parseInt(sections[i], 16);\n      result[offset++] = word >> 8 & 0xff;\n      result[offset++] = word & 0xff;\n    }\n  }\n\n  if (!result) {\n    throw Error(`Invalid ip address: ${ip}`);\n  }\n\n  return result;\n};\n\nip.toString = function (buff, offset, length) {\n  offset = ~~offset;\n  length = length || buff.length - offset;\n  var result = [];\n  var i;\n\n  if (length === 4) {\n    // IPv4\n    for (i = 0; i < length; i++) {\n      result.push(buff[offset + i]);\n    }\n\n    result = result.join('.');\n  } else if (length === 16) {\n    // IPv6\n    for (i = 0; i < length; i += 2) {\n      result.push(buff.readUInt16BE(offset + i).toString(16));\n    }\n\n    result = result.join(':');\n    result = result.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\n    result = result.replace(/:{3,4}/, '::');\n  }\n\n  return result;\n};\n\nvar ipv4Regex = /^(\\d{1,3}\\.){3,3}\\d{1,3}$/;\nvar ipv6Regex = /^(::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;\n\nip.isV4Format = function (ip) {\n  return ipv4Regex.test(ip);\n};\n\nip.isV6Format = function (ip) {\n  return ipv6Regex.test(ip);\n};\n\nfunction _normalizeFamily(family) {\n  if (family === 4) {\n    return 'ipv4';\n  }\n\n  if (family === 6) {\n    return 'ipv6';\n  }\n\n  return family ? family.toLowerCase() : 'ipv4';\n}\n\nip.fromPrefixLen = function (prefixlen, family) {\n  if (prefixlen > 32) {\n    family = 'ipv6';\n  } else {\n    family = _normalizeFamily(family);\n  }\n\n  var len = 4;\n\n  if (family === 'ipv6') {\n    len = 16;\n  }\n\n  var buff = new Buffer(len);\n\n  for (var i = 0, n = buff.length; i < n; ++i) {\n    var bits = 8;\n\n    if (prefixlen < 8) {\n      bits = prefixlen;\n    }\n\n    prefixlen -= bits;\n    buff[i] = ~(0xff >> bits) & 0xff;\n  }\n\n  return ip.toString(buff);\n};\n\nip.mask = function (addr, mask) {\n  addr = ip.toBuffer(addr);\n  mask = ip.toBuffer(mask);\n  var result = new Buffer(Math.max(addr.length, mask.length)); // Same protocol - do bitwise and\n\n  var i;\n\n  if (addr.length === mask.length) {\n    for (i = 0; i < addr.length; i++) {\n      result[i] = addr[i] & mask[i];\n    }\n  } else if (mask.length === 4) {\n    // IPv6 address and IPv4 mask\n    // (Mask low bits)\n    for (i = 0; i < mask.length; i++) {\n      result[i] = addr[addr.length - 4 + i] & mask[i];\n    }\n  } else {\n    // IPv6 mask and IPv4 addr\n    for (i = 0; i < result.length - 6; i++) {\n      result[i] = 0;\n    } // ::ffff:ipv4\n\n\n    result[10] = 0xff;\n    result[11] = 0xff;\n\n    for (i = 0; i < addr.length; i++) {\n      result[i + 12] = addr[i] & mask[i + 12];\n    }\n\n    i += 12;\n  }\n\n  for (; i < result.length; i++) {\n    result[i] = 0;\n  }\n\n  return ip.toString(result);\n};\n\nip.cidr = function (cidrString) {\n  var cidrParts = cidrString.split('/');\n  var addr = cidrParts[0];\n\n  if (cidrParts.length !== 2) {\n    throw new Error(`invalid CIDR subnet: ${addr}`);\n  }\n\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n  return ip.mask(addr, mask);\n};\n\nip.subnet = function (addr, mask) {\n  var networkAddress = ip.toLong(ip.mask(addr, mask)); // Calculate the mask's length.\n\n  var maskBuffer = ip.toBuffer(mask);\n  var maskLength = 0;\n\n  for (var i = 0; i < maskBuffer.length; i++) {\n    if (maskBuffer[i] === 0xff) {\n      maskLength += 8;\n    } else {\n      var octet = maskBuffer[i] & 0xff;\n\n      while (octet) {\n        octet = octet << 1 & 0xff;\n        maskLength++;\n      }\n    }\n  }\n\n  var numberOfAddresses = Math.pow(2, 32 - maskLength);\n  return {\n    networkAddress: ip.fromLong(networkAddress),\n    firstAddress: numberOfAddresses <= 2 ? ip.fromLong(networkAddress) : ip.fromLong(networkAddress + 1),\n    lastAddress: numberOfAddresses <= 2 ? ip.fromLong(networkAddress + numberOfAddresses - 1) : ip.fromLong(networkAddress + numberOfAddresses - 2),\n    broadcastAddress: ip.fromLong(networkAddress + numberOfAddresses - 1),\n    subnetMask: mask,\n    subnetMaskLength: maskLength,\n    numHosts: numberOfAddresses <= 2 ? numberOfAddresses : numberOfAddresses - 2,\n    length: numberOfAddresses,\n\n    contains(other) {\n      return networkAddress === ip.toLong(ip.mask(other, mask));\n    }\n\n  };\n};\n\nip.cidrSubnet = function (cidrString) {\n  var cidrParts = cidrString.split('/');\n  var addr = cidrParts[0];\n\n  if (cidrParts.length !== 2) {\n    throw new Error(`invalid CIDR subnet: ${addr}`);\n  }\n\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n  return ip.subnet(addr, mask);\n};\n\nip.not = function (addr) {\n  var buff = ip.toBuffer(addr);\n\n  for (var i = 0; i < buff.length; i++) {\n    buff[i] = 0xff ^ buff[i];\n  }\n\n  return ip.toString(buff);\n};\n\nip.or = function (a, b) {\n  var i;\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b); // same protocol\n\n  if (a.length === b.length) {\n    for (i = 0; i < a.length; ++i) {\n      a[i] |= b[i];\n    }\n\n    return ip.toString(a); // mixed protocols\n  }\n\n  var buff = a;\n  var other = b;\n\n  if (b.length > a.length) {\n    buff = b;\n    other = a;\n  }\n\n  var offset = buff.length - other.length;\n\n  for (i = offset; i < buff.length; ++i) {\n    buff[i] |= other[i - offset];\n  }\n\n  return ip.toString(buff);\n};\n\nip.isEqual = function (a, b) {\n  var i;\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b); // Same protocol\n\n  if (a.length === b.length) {\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n\n    return true;\n  } // Swap\n\n\n  if (b.length === 4) {\n    var t = b;\n    b = a;\n    a = t;\n  } // a - IPv4, b - IPv6\n\n\n  for (i = 0; i < 10; i++) {\n    if (b[i] !== 0) return false;\n  }\n\n  var word = b.readUInt16BE(10);\n  if (word !== 0 && word !== 0xffff) return false;\n\n  for (i = 0; i < 4; i++) {\n    if (a[i] !== b[i + 12]) return false;\n  }\n\n  return true;\n};\n\nip.isPrivate = function (addr) {\n  return /^(::f{4}:)?10\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?192\\.168\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?172\\.(1[6-9]|2\\d|30|31)\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?169\\.254\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^f[cd][0-9a-f]{2}:/i.test(addr) || /^fe80:/i.test(addr) || /^::1$/.test(addr) || /^::$/.test(addr);\n};\n\nip.isPublic = function (addr) {\n  return !ip.isPrivate(addr);\n};\n\nip.isLoopback = function (addr) {\n  return /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})/.test(addr) || /^fe80::1$/.test(addr) || /^::1$/.test(addr) || /^::$/.test(addr);\n};\n\nip.loopback = function (family) {\n  //\n  // Default to `ipv4`\n  //\n  family = _normalizeFamily(family);\n\n  if (family !== 'ipv4' && family !== 'ipv6') {\n    throw new Error('family must be ipv4 or ipv6');\n  }\n\n  return family === 'ipv4' ? '127.0.0.1' : 'fe80::1';\n}; //\n// ### function address (name, family)\n// #### @name {string|'public'|'private'} **Optional** Name or security\n//      of the network interface.\n// #### @family {ipv4|ipv6} **Optional** IP family of the address (defaults\n//      to ipv4).\n//\n// Returns the address for the network interface on the current system with\n// the specified `name`:\n//   * String: First `family` address of the interface.\n//             If not found see `undefined`.\n//   * 'public': the first public ip address of family.\n//   * 'private': the first private ip address of family.\n//   * undefined: First address with `ipv4` or loopback address `127.0.0.1`.\n//\n\n\nip.address = function (name, family) {\n  var interfaces = os.networkInterfaces(); //\n  // Default to `ipv4`\n  //\n\n  family = _normalizeFamily(family); //\n  // If a specific network interface has been named,\n  // return the address.\n  //\n\n  if (name && name !== 'private' && name !== 'public') {\n    var res = interfaces[name].filter(details => {\n      var itemFamily = _normalizeFamily(details.family);\n\n      return itemFamily === family;\n    });\n\n    if (res.length === 0) {\n      return undefined;\n    }\n\n    return res[0].address;\n  }\n\n  var all = Object.keys(interfaces).map(nic => {\n    //\n    // Note: name will only be `public` or `private`\n    // when this is called.\n    //\n    var addresses = interfaces[nic].filter(details => {\n      details.family = _normalizeFamily(details.family);\n\n      if (details.family !== family || ip.isLoopback(details.address)) {\n        return false;\n      }\n\n      if (!name) {\n        return true;\n      }\n\n      return name === 'public' ? ip.isPrivate(details.address) : ip.isPublic(details.address);\n    });\n    return addresses.length ? addresses[0].address : undefined;\n  }).filter(Boolean);\n  return !all.length ? ip.loopback(family) : all[0];\n};\n\nip.toLong = function (ip) {\n  var ipl = 0;\n  ip.split('.').forEach(octet => {\n    ipl <<= 8;\n    ipl += parseInt(octet);\n  });\n  return ipl >>> 0;\n};\n\nip.fromLong = function (ipl) {\n  return `${ipl >>> 24}.${ipl >> 16 & 255}.${ipl >> 8 & 255}.${ipl & 255}`;\n};","map":{"version":3,"names":["ip","exports","Buffer","require","os","toBuffer","buff","offset","result","isV4Format","split","map","byte","parseInt","isV6Format","sections","i","length","isv4","v4Buffer","slice","toString","splice","unshift","push","argv","apply","word","Error","join","readUInt16BE","replace","ipv4Regex","ipv6Regex","test","_normalizeFamily","family","toLowerCase","fromPrefixLen","prefixlen","len","n","bits","mask","addr","Math","max","cidr","cidrString","cidrParts","subnet","networkAddress","toLong","maskBuffer","maskLength","octet","numberOfAddresses","pow","fromLong","firstAddress","lastAddress","broadcastAddress","subnetMask","subnetMaskLength","numHosts","contains","other","cidrSubnet","not","or","a","b","isEqual","t","isPrivate","isPublic","isLoopback","loopback","address","name","interfaces","networkInterfaces","res","filter","details","itemFamily","undefined","all","Object","keys","nic","addresses","Boolean","ipl","forEach"],"sources":["B:/web_project_react/web_car_react/node_modules/ip/lib/ip.js"],"sourcesContent":["var ip = exports;\nvar { Buffer } = require('buffer');\nvar os = require('os');\n\nip.toBuffer = function (ip, buff, offset) {\n  offset = ~~offset;\n\n  var result;\n\n  if (this.isV4Format(ip)) {\n    result = buff || new Buffer(offset + 4);\n    ip.split(/\\./g).map((byte) => {\n      result[offset++] = parseInt(byte, 10) & 0xff;\n    });\n  } else if (this.isV6Format(ip)) {\n    var sections = ip.split(':', 8);\n\n    var i;\n    for (i = 0; i < sections.length; i++) {\n      var isv4 = this.isV4Format(sections[i]);\n      var v4Buffer;\n\n      if (isv4) {\n        v4Buffer = this.toBuffer(sections[i]);\n        sections[i] = v4Buffer.slice(0, 2).toString('hex');\n      }\n\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, v4Buffer.slice(2, 4).toString('hex'));\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0');\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0');\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      var argv = [i, 1];\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0');\n      }\n      sections.splice.apply(sections, argv);\n    }\n\n    result = buff || new Buffer(offset + 16);\n    for (i = 0; i < sections.length; i++) {\n      var word = parseInt(sections[i], 16);\n      result[offset++] = (word >> 8) & 0xff;\n      result[offset++] = word & 0xff;\n    }\n  }\n\n  if (!result) {\n    throw Error(`Invalid ip address: ${ip}`);\n  }\n\n  return result;\n};\n\nip.toString = function (buff, offset, length) {\n  offset = ~~offset;\n  length = length || (buff.length - offset);\n\n  var result = [];\n  var i;\n  if (length === 4) {\n    // IPv4\n    for (i = 0; i < length; i++) {\n      result.push(buff[offset + i]);\n    }\n    result = result.join('.');\n  } else if (length === 16) {\n    // IPv6\n    for (i = 0; i < length; i += 2) {\n      result.push(buff.readUInt16BE(offset + i).toString(16));\n    }\n    result = result.join(':');\n    result = result.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\n    result = result.replace(/:{3,4}/, '::');\n  }\n\n  return result;\n};\n\nvar ipv4Regex = /^(\\d{1,3}\\.){3,3}\\d{1,3}$/;\nvar ipv6Regex = /^(::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;\n\nip.isV4Format = function (ip) {\n  return ipv4Regex.test(ip);\n};\n\nip.isV6Format = function (ip) {\n  return ipv6Regex.test(ip);\n};\n\nfunction _normalizeFamily(family) {\n  if (family === 4) {\n    return 'ipv4';\n  }\n  if (family === 6) {\n    return 'ipv6';\n  }\n  return family ? family.toLowerCase() : 'ipv4';\n}\n\nip.fromPrefixLen = function (prefixlen, family) {\n  if (prefixlen > 32) {\n    family = 'ipv6';\n  } else {\n    family = _normalizeFamily(family);\n  }\n\n  var len = 4;\n  if (family === 'ipv6') {\n    len = 16;\n  }\n  var buff = new Buffer(len);\n\n  for (var i = 0, n = buff.length; i < n; ++i) {\n    var bits = 8;\n    if (prefixlen < 8) {\n      bits = prefixlen;\n    }\n    prefixlen -= bits;\n\n    buff[i] = ~(0xff >> bits) & 0xff;\n  }\n\n  return ip.toString(buff);\n};\n\nip.mask = function (addr, mask) {\n  addr = ip.toBuffer(addr);\n  mask = ip.toBuffer(mask);\n\n  var result = new Buffer(Math.max(addr.length, mask.length));\n\n  // Same protocol - do bitwise and\n  var i;\n  if (addr.length === mask.length) {\n    for (i = 0; i < addr.length; i++) {\n      result[i] = addr[i] & mask[i];\n    }\n  } else if (mask.length === 4) {\n    // IPv6 address and IPv4 mask\n    // (Mask low bits)\n    for (i = 0; i < mask.length; i++) {\n      result[i] = addr[addr.length - 4 + i] & mask[i];\n    }\n  } else {\n    // IPv6 mask and IPv4 addr\n    for (i = 0; i < result.length - 6; i++) {\n      result[i] = 0;\n    }\n\n    // ::ffff:ipv4\n    result[10] = 0xff;\n    result[11] = 0xff;\n    for (i = 0; i < addr.length; i++) {\n      result[i + 12] = addr[i] & mask[i + 12];\n    }\n    i += 12;\n  }\n  for (; i < result.length; i++) {\n    result[i] = 0;\n  }\n\n  return ip.toString(result);\n};\n\nip.cidr = function (cidrString) {\n  var cidrParts = cidrString.split('/');\n\n  var addr = cidrParts[0];\n  if (cidrParts.length !== 2) {\n    throw new Error(`invalid CIDR subnet: ${addr}`);\n  }\n\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n\n  return ip.mask(addr, mask);\n};\n\nip.subnet = function (addr, mask) {\n  var networkAddress = ip.toLong(ip.mask(addr, mask));\n\n  // Calculate the mask's length.\n  var maskBuffer = ip.toBuffer(mask);\n  var maskLength = 0;\n\n  for (var i = 0; i < maskBuffer.length; i++) {\n    if (maskBuffer[i] === 0xff) {\n      maskLength += 8;\n    } else {\n      var octet = maskBuffer[i] & 0xff;\n      while (octet) {\n        octet = (octet << 1) & 0xff;\n        maskLength++;\n      }\n    }\n  }\n\n  var numberOfAddresses = Math.pow(2, 32 - maskLength);\n\n  return {\n    networkAddress: ip.fromLong(networkAddress),\n    firstAddress: numberOfAddresses <= 2\n      ? ip.fromLong(networkAddress)\n      : ip.fromLong(networkAddress + 1),\n    lastAddress: numberOfAddresses <= 2\n      ? ip.fromLong(networkAddress + numberOfAddresses - 1)\n      : ip.fromLong(networkAddress + numberOfAddresses - 2),\n    broadcastAddress: ip.fromLong(networkAddress + numberOfAddresses - 1),\n    subnetMask: mask,\n    subnetMaskLength: maskLength,\n    numHosts: numberOfAddresses <= 2\n      ? numberOfAddresses : numberOfAddresses - 2,\n    length: numberOfAddresses,\n    contains(other) {\n      return networkAddress === ip.toLong(ip.mask(other, mask));\n    },\n  };\n};\n\nip.cidrSubnet = function (cidrString) {\n  var cidrParts = cidrString.split('/');\n\n  var addr = cidrParts[0];\n  if (cidrParts.length !== 2) {\n    throw new Error(`invalid CIDR subnet: ${addr}`);\n  }\n\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n\n  return ip.subnet(addr, mask);\n};\n\nip.not = function (addr) {\n  var buff = ip.toBuffer(addr);\n  for (var i = 0; i < buff.length; i++) {\n    buff[i] = 0xff ^ buff[i];\n  }\n  return ip.toString(buff);\n};\n\nip.or = function (a, b) {\n  var i;\n\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b);\n\n  // same protocol\n  if (a.length === b.length) {\n    for (i = 0; i < a.length; ++i) {\n      a[i] |= b[i];\n    }\n    return ip.toString(a);\n\n  // mixed protocols\n  }\n  var buff = a;\n  var other = b;\n  if (b.length > a.length) {\n    buff = b;\n    other = a;\n  }\n\n  var offset = buff.length - other.length;\n  for (i = offset; i < buff.length; ++i) {\n    buff[i] |= other[i - offset];\n  }\n\n  return ip.toString(buff);\n};\n\nip.isEqual = function (a, b) {\n  var i;\n\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b);\n\n  // Same protocol\n  if (a.length === b.length) {\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n\n  // Swap\n  if (b.length === 4) {\n    var t = b;\n    b = a;\n    a = t;\n  }\n\n  // a - IPv4, b - IPv6\n  for (i = 0; i < 10; i++) {\n    if (b[i] !== 0) return false;\n  }\n\n  var word = b.readUInt16BE(10);\n  if (word !== 0 && word !== 0xffff) return false;\n\n  for (i = 0; i < 4; i++) {\n    if (a[i] !== b[i + 12]) return false;\n  }\n\n  return true;\n};\n\nip.isPrivate = function (addr) {\n  return /^(::f{4}:)?10\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i\n    .test(addr)\n    || /^(::f{4}:)?192\\.168\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr)\n    || /^(::f{4}:)?172\\.(1[6-9]|2\\d|30|31)\\.([0-9]{1,3})\\.([0-9]{1,3})$/i\n      .test(addr)\n    || /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr)\n    || /^(::f{4}:)?169\\.254\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr)\n    || /^f[cd][0-9a-f]{2}:/i.test(addr)\n    || /^fe80:/i.test(addr)\n    || /^::1$/.test(addr)\n    || /^::$/.test(addr);\n};\n\nip.isPublic = function (addr) {\n  return !ip.isPrivate(addr);\n};\n\nip.isLoopback = function (addr) {\n  return /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})/\n    .test(addr)\n    || /^fe80::1$/.test(addr)\n    || /^::1$/.test(addr)\n    || /^::$/.test(addr);\n};\n\nip.loopback = function (family) {\n  //\n  // Default to `ipv4`\n  //\n  family = _normalizeFamily(family);\n\n  if (family !== 'ipv4' && family !== 'ipv6') {\n    throw new Error('family must be ipv4 or ipv6');\n  }\n\n  return family === 'ipv4' ? '127.0.0.1' : 'fe80::1';\n};\n\n//\n// ### function address (name, family)\n// #### @name {string|'public'|'private'} **Optional** Name or security\n//      of the network interface.\n// #### @family {ipv4|ipv6} **Optional** IP family of the address (defaults\n//      to ipv4).\n//\n// Returns the address for the network interface on the current system with\n// the specified `name`:\n//   * String: First `family` address of the interface.\n//             If not found see `undefined`.\n//   * 'public': the first public ip address of family.\n//   * 'private': the first private ip address of family.\n//   * undefined: First address with `ipv4` or loopback address `127.0.0.1`.\n//\nip.address = function (name, family) {\n  var interfaces = os.networkInterfaces();\n\n  //\n  // Default to `ipv4`\n  //\n  family = _normalizeFamily(family);\n\n  //\n  // If a specific network interface has been named,\n  // return the address.\n  //\n  if (name && name !== 'private' && name !== 'public') {\n    var res = interfaces[name].filter((details) => {\n      var itemFamily = _normalizeFamily(details.family);\n      return itemFamily === family;\n    });\n    if (res.length === 0) {\n      return undefined;\n    }\n    return res[0].address;\n  }\n\n  var all = Object.keys(interfaces).map((nic) => {\n    //\n    // Note: name will only be `public` or `private`\n    // when this is called.\n    //\n    var addresses = interfaces[nic].filter((details) => {\n      details.family = _normalizeFamily(details.family);\n      if (details.family !== family || ip.isLoopback(details.address)) {\n        return false;\n      } if (!name) {\n        return true;\n      }\n\n      return name === 'public' ? ip.isPrivate(details.address)\n        : ip.isPublic(details.address);\n    });\n\n    return addresses.length ? addresses[0].address : undefined;\n  }).filter(Boolean);\n\n  return !all.length ? ip.loopback(family) : all[0];\n};\n\nip.toLong = function (ip) {\n  var ipl = 0;\n  ip.split('.').forEach((octet) => {\n    ipl <<= 8;\n    ipl += parseInt(octet);\n  });\n  return (ipl >>> 0);\n};\n\nip.fromLong = function (ipl) {\n  return (`${ipl >>> 24}.${\n    ipl >> 16 & 255}.${\n    ipl >> 8 & 255}.${\n    ipl & 255}`);\n};\n"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAT;;AACA,IAAI;EAAEC;AAAF,IAAaC,OAAO,CAAC,QAAD,CAAxB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AAEAH,EAAE,CAACK,QAAH,GAAc,UAAUL,EAAV,EAAcM,IAAd,EAAoBC,MAApB,EAA4B;EACxCA,MAAM,GAAG,CAAC,CAACA,MAAX;EAEA,IAAIC,MAAJ;;EAEA,IAAI,KAAKC,UAAL,CAAgBT,EAAhB,CAAJ,EAAyB;IACvBQ,MAAM,GAAGF,IAAI,IAAI,IAAIJ,MAAJ,CAAWK,MAAM,GAAG,CAApB,CAAjB;IACAP,EAAE,CAACU,KAAH,CAAS,KAAT,EAAgBC,GAAhB,CAAqBC,IAAD,IAAU;MAC5BJ,MAAM,CAACD,MAAM,EAAP,CAAN,GAAmBM,QAAQ,CAACD,IAAD,EAAO,EAAP,CAAR,GAAqB,IAAxC;IACD,CAFD;EAGD,CALD,MAKO,IAAI,KAAKE,UAAL,CAAgBd,EAAhB,CAAJ,EAAyB;IAC9B,IAAIe,QAAQ,GAAGf,EAAE,CAACU,KAAH,CAAS,GAAT,EAAc,CAAd,CAAf;IAEA,IAAIM,CAAJ;;IACA,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,QAAQ,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;MACpC,IAAIE,IAAI,GAAG,KAAKT,UAAL,CAAgBM,QAAQ,CAACC,CAAD,CAAxB,CAAX;MACA,IAAIG,QAAJ;;MAEA,IAAID,IAAJ,EAAU;QACRC,QAAQ,GAAG,KAAKd,QAAL,CAAcU,QAAQ,CAACC,CAAD,CAAtB,CAAX;QACAD,QAAQ,CAACC,CAAD,CAAR,GAAcG,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkB,CAAlB,EAAqBC,QAArB,CAA8B,KAA9B,CAAd;MACD;;MAED,IAAIF,QAAQ,IAAI,EAAEH,CAAF,GAAM,CAAtB,EAAyB;QACvBD,QAAQ,CAACO,MAAT,CAAgBN,CAAhB,EAAmB,CAAnB,EAAsBG,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkB,CAAlB,EAAqBC,QAArB,CAA8B,KAA9B,CAAtB;MACD;IACF;;IAED,IAAIN,QAAQ,CAAC,CAAD,CAAR,KAAgB,EAApB,EAAwB;MACtB,OAAOA,QAAQ,CAACE,MAAT,GAAkB,CAAzB,EAA4BF,QAAQ,CAACQ,OAAT,CAAiB,GAAjB;IAC7B,CAFD,MAEO,IAAIR,QAAQ,CAACA,QAAQ,CAACE,MAAT,GAAkB,CAAnB,CAAR,KAAkC,EAAtC,EAA0C;MAC/C,OAAOF,QAAQ,CAACE,MAAT,GAAkB,CAAzB,EAA4BF,QAAQ,CAACS,IAAT,CAAc,GAAd;IAC7B,CAFM,MAEA,IAAIT,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;MAC9B,KAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,QAAQ,CAACE,MAAb,IAAuBF,QAAQ,CAACC,CAAD,CAAR,KAAgB,EAAnD,EAAuDA,CAAC,EAAxD,CAA2D;;MAC3D,IAAIS,IAAI,GAAG,CAACT,CAAD,EAAI,CAAJ,CAAX;;MACA,KAAKA,CAAC,GAAG,IAAID,QAAQ,CAACE,MAAtB,EAA8BD,CAAC,GAAG,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;QACxCS,IAAI,CAACD,IAAL,CAAU,GAAV;MACD;;MACDT,QAAQ,CAACO,MAAT,CAAgBI,KAAhB,CAAsBX,QAAtB,EAAgCU,IAAhC;IACD;;IAEDjB,MAAM,GAAGF,IAAI,IAAI,IAAIJ,MAAJ,CAAWK,MAAM,GAAG,EAApB,CAAjB;;IACA,KAAKS,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,QAAQ,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;MACpC,IAAIW,IAAI,GAAGd,QAAQ,CAACE,QAAQ,CAACC,CAAD,CAAT,EAAc,EAAd,CAAnB;MACAR,MAAM,CAACD,MAAM,EAAP,CAAN,GAAoBoB,IAAI,IAAI,CAAT,GAAc,IAAjC;MACAnB,MAAM,CAACD,MAAM,EAAP,CAAN,GAAmBoB,IAAI,GAAG,IAA1B;IACD;EACF;;EAED,IAAI,CAACnB,MAAL,EAAa;IACX,MAAMoB,KAAK,CAAE,uBAAsB5B,EAAG,EAA3B,CAAX;EACD;;EAED,OAAOQ,MAAP;AACD,CAtDD;;AAwDAR,EAAE,CAACqB,QAAH,GAAc,UAAUf,IAAV,EAAgBC,MAAhB,EAAwBU,MAAxB,EAAgC;EAC5CV,MAAM,GAAG,CAAC,CAACA,MAAX;EACAU,MAAM,GAAGA,MAAM,IAAKX,IAAI,CAACW,MAAL,GAAcV,MAAlC;EAEA,IAAIC,MAAM,GAAG,EAAb;EACA,IAAIQ,CAAJ;;EACA,IAAIC,MAAM,KAAK,CAAf,EAAkB;IAChB;IACA,KAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,MAAhB,EAAwBD,CAAC,EAAzB,EAA6B;MAC3BR,MAAM,CAACgB,IAAP,CAAYlB,IAAI,CAACC,MAAM,GAAGS,CAAV,CAAhB;IACD;;IACDR,MAAM,GAAGA,MAAM,CAACqB,IAAP,CAAY,GAAZ,CAAT;EACD,CAND,MAMO,IAAIZ,MAAM,KAAK,EAAf,EAAmB;IACxB;IACA,KAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,MAAhB,EAAwBD,CAAC,IAAI,CAA7B,EAAgC;MAC9BR,MAAM,CAACgB,IAAP,CAAYlB,IAAI,CAACwB,YAAL,CAAkBvB,MAAM,GAAGS,CAA3B,EAA8BK,QAA9B,CAAuC,EAAvC,CAAZ;IACD;;IACDb,MAAM,GAAGA,MAAM,CAACqB,IAAP,CAAY,GAAZ,CAAT;IACArB,MAAM,GAAGA,MAAM,CAACuB,OAAP,CAAe,oBAAf,EAAqC,QAArC,CAAT;IACAvB,MAAM,GAAGA,MAAM,CAACuB,OAAP,CAAe,QAAf,EAAyB,IAAzB,CAAT;EACD;;EAED,OAAOvB,MAAP;AACD,CAvBD;;AAyBA,IAAIwB,SAAS,GAAG,2BAAhB;AACA,IAAIC,SAAS,GAAG,wEAAhB;;AAEAjC,EAAE,CAACS,UAAH,GAAgB,UAAUT,EAAV,EAAc;EAC5B,OAAOgC,SAAS,CAACE,IAAV,CAAelC,EAAf,CAAP;AACD,CAFD;;AAIAA,EAAE,CAACc,UAAH,GAAgB,UAAUd,EAAV,EAAc;EAC5B,OAAOiC,SAAS,CAACC,IAAV,CAAelC,EAAf,CAAP;AACD,CAFD;;AAIA,SAASmC,gBAAT,CAA0BC,MAA1B,EAAkC;EAChC,IAAIA,MAAM,KAAK,CAAf,EAAkB;IAChB,OAAO,MAAP;EACD;;EACD,IAAIA,MAAM,KAAK,CAAf,EAAkB;IAChB,OAAO,MAAP;EACD;;EACD,OAAOA,MAAM,GAAGA,MAAM,CAACC,WAAP,EAAH,GAA0B,MAAvC;AACD;;AAEDrC,EAAE,CAACsC,aAAH,GAAmB,UAAUC,SAAV,EAAqBH,MAArB,EAA6B;EAC9C,IAAIG,SAAS,GAAG,EAAhB,EAAoB;IAClBH,MAAM,GAAG,MAAT;EACD,CAFD,MAEO;IACLA,MAAM,GAAGD,gBAAgB,CAACC,MAAD,CAAzB;EACD;;EAED,IAAII,GAAG,GAAG,CAAV;;EACA,IAAIJ,MAAM,KAAK,MAAf,EAAuB;IACrBI,GAAG,GAAG,EAAN;EACD;;EACD,IAAIlC,IAAI,GAAG,IAAIJ,MAAJ,CAAWsC,GAAX,CAAX;;EAEA,KAAK,IAAIxB,CAAC,GAAG,CAAR,EAAWyB,CAAC,GAAGnC,IAAI,CAACW,MAAzB,EAAiCD,CAAC,GAAGyB,CAArC,EAAwC,EAAEzB,CAA1C,EAA6C;IAC3C,IAAI0B,IAAI,GAAG,CAAX;;IACA,IAAIH,SAAS,GAAG,CAAhB,EAAmB;MACjBG,IAAI,GAAGH,SAAP;IACD;;IACDA,SAAS,IAAIG,IAAb;IAEApC,IAAI,CAACU,CAAD,CAAJ,GAAU,EAAE,QAAQ0B,IAAV,IAAkB,IAA5B;EACD;;EAED,OAAO1C,EAAE,CAACqB,QAAH,CAAYf,IAAZ,CAAP;AACD,CAxBD;;AA0BAN,EAAE,CAAC2C,IAAH,GAAU,UAAUC,IAAV,EAAgBD,IAAhB,EAAsB;EAC9BC,IAAI,GAAG5C,EAAE,CAACK,QAAH,CAAYuC,IAAZ,CAAP;EACAD,IAAI,GAAG3C,EAAE,CAACK,QAAH,CAAYsC,IAAZ,CAAP;EAEA,IAAInC,MAAM,GAAG,IAAIN,MAAJ,CAAW2C,IAAI,CAACC,GAAL,CAASF,IAAI,CAAC3B,MAAd,EAAsB0B,IAAI,CAAC1B,MAA3B,CAAX,CAAb,CAJ8B,CAM9B;;EACA,IAAID,CAAJ;;EACA,IAAI4B,IAAI,CAAC3B,MAAL,KAAgB0B,IAAI,CAAC1B,MAAzB,EAAiC;IAC/B,KAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG4B,IAAI,CAAC3B,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;MAChCR,MAAM,CAACQ,CAAD,CAAN,GAAY4B,IAAI,CAAC5B,CAAD,CAAJ,GAAU2B,IAAI,CAAC3B,CAAD,CAA1B;IACD;EACF,CAJD,MAIO,IAAI2B,IAAI,CAAC1B,MAAL,KAAgB,CAApB,EAAuB;IAC5B;IACA;IACA,KAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2B,IAAI,CAAC1B,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;MAChCR,MAAM,CAACQ,CAAD,CAAN,GAAY4B,IAAI,CAACA,IAAI,CAAC3B,MAAL,GAAc,CAAd,GAAkBD,CAAnB,CAAJ,GAA4B2B,IAAI,CAAC3B,CAAD,CAA5C;IACD;EACF,CANM,MAMA;IACL;IACA,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGR,MAAM,CAACS,MAAP,GAAgB,CAAhC,EAAmCD,CAAC,EAApC,EAAwC;MACtCR,MAAM,CAACQ,CAAD,CAAN,GAAY,CAAZ;IACD,CAJI,CAML;;;IACAR,MAAM,CAAC,EAAD,CAAN,GAAa,IAAb;IACAA,MAAM,CAAC,EAAD,CAAN,GAAa,IAAb;;IACA,KAAKQ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG4B,IAAI,CAAC3B,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;MAChCR,MAAM,CAACQ,CAAC,GAAG,EAAL,CAAN,GAAiB4B,IAAI,CAAC5B,CAAD,CAAJ,GAAU2B,IAAI,CAAC3B,CAAC,GAAG,EAAL,CAA/B;IACD;;IACDA,CAAC,IAAI,EAAL;EACD;;EACD,OAAOA,CAAC,GAAGR,MAAM,CAACS,MAAlB,EAA0BD,CAAC,EAA3B,EAA+B;IAC7BR,MAAM,CAACQ,CAAD,CAAN,GAAY,CAAZ;EACD;;EAED,OAAOhB,EAAE,CAACqB,QAAH,CAAYb,MAAZ,CAAP;AACD,CArCD;;AAuCAR,EAAE,CAAC+C,IAAH,GAAU,UAAUC,UAAV,EAAsB;EAC9B,IAAIC,SAAS,GAAGD,UAAU,CAACtC,KAAX,CAAiB,GAAjB,CAAhB;EAEA,IAAIkC,IAAI,GAAGK,SAAS,CAAC,CAAD,CAApB;;EACA,IAAIA,SAAS,CAAChC,MAAV,KAAqB,CAAzB,EAA4B;IAC1B,MAAM,IAAIW,KAAJ,CAAW,wBAAuBgB,IAAK,EAAvC,CAAN;EACD;;EAED,IAAID,IAAI,GAAG3C,EAAE,CAACsC,aAAH,CAAiBzB,QAAQ,CAACoC,SAAS,CAAC,CAAD,CAAV,EAAe,EAAf,CAAzB,CAAX;EAEA,OAAOjD,EAAE,CAAC2C,IAAH,CAAQC,IAAR,EAAcD,IAAd,CAAP;AACD,CAXD;;AAaA3C,EAAE,CAACkD,MAAH,GAAY,UAAUN,IAAV,EAAgBD,IAAhB,EAAsB;EAChC,IAAIQ,cAAc,GAAGnD,EAAE,CAACoD,MAAH,CAAUpD,EAAE,CAAC2C,IAAH,CAAQC,IAAR,EAAcD,IAAd,CAAV,CAArB,CADgC,CAGhC;;EACA,IAAIU,UAAU,GAAGrD,EAAE,CAACK,QAAH,CAAYsC,IAAZ,CAAjB;EACA,IAAIW,UAAU,GAAG,CAAjB;;EAEA,KAAK,IAAItC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqC,UAAU,CAACpC,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;IAC1C,IAAIqC,UAAU,CAACrC,CAAD,CAAV,KAAkB,IAAtB,EAA4B;MAC1BsC,UAAU,IAAI,CAAd;IACD,CAFD,MAEO;MACL,IAAIC,KAAK,GAAGF,UAAU,CAACrC,CAAD,CAAV,GAAgB,IAA5B;;MACA,OAAOuC,KAAP,EAAc;QACZA,KAAK,GAAIA,KAAK,IAAI,CAAV,GAAe,IAAvB;QACAD,UAAU;MACX;IACF;EACF;;EAED,IAAIE,iBAAiB,GAAGX,IAAI,CAACY,GAAL,CAAS,CAAT,EAAY,KAAKH,UAAjB,CAAxB;EAEA,OAAO;IACLH,cAAc,EAAEnD,EAAE,CAAC0D,QAAH,CAAYP,cAAZ,CADX;IAELQ,YAAY,EAAEH,iBAAiB,IAAI,CAArB,GACVxD,EAAE,CAAC0D,QAAH,CAAYP,cAAZ,CADU,GAEVnD,EAAE,CAAC0D,QAAH,CAAYP,cAAc,GAAG,CAA7B,CAJC;IAKLS,WAAW,EAAEJ,iBAAiB,IAAI,CAArB,GACTxD,EAAE,CAAC0D,QAAH,CAAYP,cAAc,GAAGK,iBAAjB,GAAqC,CAAjD,CADS,GAETxD,EAAE,CAAC0D,QAAH,CAAYP,cAAc,GAAGK,iBAAjB,GAAqC,CAAjD,CAPC;IAQLK,gBAAgB,EAAE7D,EAAE,CAAC0D,QAAH,CAAYP,cAAc,GAAGK,iBAAjB,GAAqC,CAAjD,CARb;IASLM,UAAU,EAAEnB,IATP;IAULoB,gBAAgB,EAAET,UAVb;IAWLU,QAAQ,EAAER,iBAAiB,IAAI,CAArB,GACNA,iBADM,GACcA,iBAAiB,GAAG,CAZvC;IAaLvC,MAAM,EAAEuC,iBAbH;;IAcLS,QAAQ,CAACC,KAAD,EAAQ;MACd,OAAOf,cAAc,KAAKnD,EAAE,CAACoD,MAAH,CAAUpD,EAAE,CAAC2C,IAAH,CAAQuB,KAAR,EAAevB,IAAf,CAAV,CAA1B;IACD;;EAhBI,CAAP;AAkBD,CAvCD;;AAyCA3C,EAAE,CAACmE,UAAH,GAAgB,UAAUnB,UAAV,EAAsB;EACpC,IAAIC,SAAS,GAAGD,UAAU,CAACtC,KAAX,CAAiB,GAAjB,CAAhB;EAEA,IAAIkC,IAAI,GAAGK,SAAS,CAAC,CAAD,CAApB;;EACA,IAAIA,SAAS,CAAChC,MAAV,KAAqB,CAAzB,EAA4B;IAC1B,MAAM,IAAIW,KAAJ,CAAW,wBAAuBgB,IAAK,EAAvC,CAAN;EACD;;EAED,IAAID,IAAI,GAAG3C,EAAE,CAACsC,aAAH,CAAiBzB,QAAQ,CAACoC,SAAS,CAAC,CAAD,CAAV,EAAe,EAAf,CAAzB,CAAX;EAEA,OAAOjD,EAAE,CAACkD,MAAH,CAAUN,IAAV,EAAgBD,IAAhB,CAAP;AACD,CAXD;;AAaA3C,EAAE,CAACoE,GAAH,GAAS,UAAUxB,IAAV,EAAgB;EACvB,IAAItC,IAAI,GAAGN,EAAE,CAACK,QAAH,CAAYuC,IAAZ,CAAX;;EACA,KAAK,IAAI5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,IAAI,CAACW,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;IACpCV,IAAI,CAACU,CAAD,CAAJ,GAAU,OAAOV,IAAI,CAACU,CAAD,CAArB;EACD;;EACD,OAAOhB,EAAE,CAACqB,QAAH,CAAYf,IAAZ,CAAP;AACD,CAND;;AAQAN,EAAE,CAACqE,EAAH,GAAQ,UAAUC,CAAV,EAAaC,CAAb,EAAgB;EACtB,IAAIvD,CAAJ;EAEAsD,CAAC,GAAGtE,EAAE,CAACK,QAAH,CAAYiE,CAAZ,CAAJ;EACAC,CAAC,GAAGvE,EAAE,CAACK,QAAH,CAAYkE,CAAZ,CAAJ,CAJsB,CAMtB;;EACA,IAAID,CAAC,CAACrD,MAAF,KAAasD,CAAC,CAACtD,MAAnB,EAA2B;IACzB,KAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGsD,CAAC,CAACrD,MAAlB,EAA0B,EAAED,CAA5B,EAA+B;MAC7BsD,CAAC,CAACtD,CAAD,CAAD,IAAQuD,CAAC,CAACvD,CAAD,CAAT;IACD;;IACD,OAAOhB,EAAE,CAACqB,QAAH,CAAYiD,CAAZ,CAAP,CAJyB,CAM3B;EACC;;EACD,IAAIhE,IAAI,GAAGgE,CAAX;EACA,IAAIJ,KAAK,GAAGK,CAAZ;;EACA,IAAIA,CAAC,CAACtD,MAAF,GAAWqD,CAAC,CAACrD,MAAjB,EAAyB;IACvBX,IAAI,GAAGiE,CAAP;IACAL,KAAK,GAAGI,CAAR;EACD;;EAED,IAAI/D,MAAM,GAAGD,IAAI,CAACW,MAAL,GAAciD,KAAK,CAACjD,MAAjC;;EACA,KAAKD,CAAC,GAAGT,MAAT,EAAiBS,CAAC,GAAGV,IAAI,CAACW,MAA1B,EAAkC,EAAED,CAApC,EAAuC;IACrCV,IAAI,CAACU,CAAD,CAAJ,IAAWkD,KAAK,CAAClD,CAAC,GAAGT,MAAL,CAAhB;EACD;;EAED,OAAOP,EAAE,CAACqB,QAAH,CAAYf,IAAZ,CAAP;AACD,CA5BD;;AA8BAN,EAAE,CAACwE,OAAH,GAAa,UAAUF,CAAV,EAAaC,CAAb,EAAgB;EAC3B,IAAIvD,CAAJ;EAEAsD,CAAC,GAAGtE,EAAE,CAACK,QAAH,CAAYiE,CAAZ,CAAJ;EACAC,CAAC,GAAGvE,EAAE,CAACK,QAAH,CAAYkE,CAAZ,CAAJ,CAJ2B,CAM3B;;EACA,IAAID,CAAC,CAACrD,MAAF,KAAasD,CAAC,CAACtD,MAAnB,EAA2B;IACzB,KAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGsD,CAAC,CAACrD,MAAlB,EAA0BD,CAAC,EAA3B,EAA+B;MAC7B,IAAIsD,CAAC,CAACtD,CAAD,CAAD,KAASuD,CAAC,CAACvD,CAAD,CAAd,EAAmB,OAAO,KAAP;IACpB;;IACD,OAAO,IAAP;EACD,CAZ0B,CAc3B;;;EACA,IAAIuD,CAAC,CAACtD,MAAF,KAAa,CAAjB,EAAoB;IAClB,IAAIwD,CAAC,GAAGF,CAAR;IACAA,CAAC,GAAGD,CAAJ;IACAA,CAAC,GAAGG,CAAJ;EACD,CAnB0B,CAqB3B;;;EACA,KAAKzD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;IACvB,IAAIuD,CAAC,CAACvD,CAAD,CAAD,KAAS,CAAb,EAAgB,OAAO,KAAP;EACjB;;EAED,IAAIW,IAAI,GAAG4C,CAAC,CAACzC,YAAF,CAAe,EAAf,CAAX;EACA,IAAIH,IAAI,KAAK,CAAT,IAAcA,IAAI,KAAK,MAA3B,EAAmC,OAAO,KAAP;;EAEnC,KAAKX,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;IACtB,IAAIsD,CAAC,CAACtD,CAAD,CAAD,KAASuD,CAAC,CAACvD,CAAC,GAAG,EAAL,CAAd,EAAwB,OAAO,KAAP;EACzB;;EAED,OAAO,IAAP;AACD,CAlCD;;AAoCAhB,EAAE,CAAC0E,SAAH,GAAe,UAAU9B,IAAV,EAAgB;EAC7B,OAAO,4DACJV,IADI,CACCU,IADD,KAEF,oDAAoDV,IAApD,CAAyDU,IAAzD,CAFE,IAGF,mEACAV,IADA,CACKU,IADL,CAHE,IAKF,6DAA6DV,IAA7D,CAAkEU,IAAlE,CALE,IAMF,oDAAoDV,IAApD,CAAyDU,IAAzD,CANE,IAOF,sBAAsBV,IAAtB,CAA2BU,IAA3B,CAPE,IAQF,UAAUV,IAAV,CAAeU,IAAf,CARE,IASF,QAAQV,IAAR,CAAaU,IAAb,CATE,IAUF,OAAOV,IAAP,CAAYU,IAAZ,CAVL;AAWD,CAZD;;AAcA5C,EAAE,CAAC2E,QAAH,GAAc,UAAU/B,IAAV,EAAgB;EAC5B,OAAO,CAAC5C,EAAE,CAAC0E,SAAH,CAAa9B,IAAb,CAAR;AACD,CAFD;;AAIA5C,EAAE,CAAC4E,UAAH,GAAgB,UAAUhC,IAAV,EAAgB;EAC9B,OAAO,2DACJV,IADI,CACCU,IADD,KAEF,YAAYV,IAAZ,CAAiBU,IAAjB,CAFE,IAGF,QAAQV,IAAR,CAAaU,IAAb,CAHE,IAIF,OAAOV,IAAP,CAAYU,IAAZ,CAJL;AAKD,CAND;;AAQA5C,EAAE,CAAC6E,QAAH,GAAc,UAAUzC,MAAV,EAAkB;EAC9B;EACA;EACA;EACAA,MAAM,GAAGD,gBAAgB,CAACC,MAAD,CAAzB;;EAEA,IAAIA,MAAM,KAAK,MAAX,IAAqBA,MAAM,KAAK,MAApC,EAA4C;IAC1C,MAAM,IAAIR,KAAJ,CAAU,6BAAV,CAAN;EACD;;EAED,OAAOQ,MAAM,KAAK,MAAX,GAAoB,WAApB,GAAkC,SAAzC;AACD,CAXD,C,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACApC,EAAE,CAAC8E,OAAH,GAAa,UAAUC,IAAV,EAAgB3C,MAAhB,EAAwB;EACnC,IAAI4C,UAAU,GAAG5E,EAAE,CAAC6E,iBAAH,EAAjB,CADmC,CAGnC;EACA;EACA;;EACA7C,MAAM,GAAGD,gBAAgB,CAACC,MAAD,CAAzB,CANmC,CAQnC;EACA;EACA;EACA;;EACA,IAAI2C,IAAI,IAAIA,IAAI,KAAK,SAAjB,IAA8BA,IAAI,KAAK,QAA3C,EAAqD;IACnD,IAAIG,GAAG,GAAGF,UAAU,CAACD,IAAD,CAAV,CAAiBI,MAAjB,CAAyBC,OAAD,IAAa;MAC7C,IAAIC,UAAU,GAAGlD,gBAAgB,CAACiD,OAAO,CAAChD,MAAT,CAAjC;;MACA,OAAOiD,UAAU,KAAKjD,MAAtB;IACD,CAHS,CAAV;;IAIA,IAAI8C,GAAG,CAACjE,MAAJ,KAAe,CAAnB,EAAsB;MACpB,OAAOqE,SAAP;IACD;;IACD,OAAOJ,GAAG,CAAC,CAAD,CAAH,CAAOJ,OAAd;EACD;;EAED,IAAIS,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYT,UAAZ,EAAwBrE,GAAxB,CAA6B+E,GAAD,IAAS;IAC7C;IACA;IACA;IACA;IACA,IAAIC,SAAS,GAAGX,UAAU,CAACU,GAAD,CAAV,CAAgBP,MAAhB,CAAwBC,OAAD,IAAa;MAClDA,OAAO,CAAChD,MAAR,GAAiBD,gBAAgB,CAACiD,OAAO,CAAChD,MAAT,CAAjC;;MACA,IAAIgD,OAAO,CAAChD,MAAR,KAAmBA,MAAnB,IAA6BpC,EAAE,CAAC4E,UAAH,CAAcQ,OAAO,CAACN,OAAtB,CAAjC,EAAiE;QAC/D,OAAO,KAAP;MACD;;MAAC,IAAI,CAACC,IAAL,EAAW;QACX,OAAO,IAAP;MACD;;MAED,OAAOA,IAAI,KAAK,QAAT,GAAoB/E,EAAE,CAAC0E,SAAH,CAAaU,OAAO,CAACN,OAArB,CAApB,GACH9E,EAAE,CAAC2E,QAAH,CAAYS,OAAO,CAACN,OAApB,CADJ;IAED,CAVe,CAAhB;IAYA,OAAOa,SAAS,CAAC1E,MAAV,GAAmB0E,SAAS,CAAC,CAAD,CAAT,CAAab,OAAhC,GAA0CQ,SAAjD;EACD,CAlBS,EAkBPH,MAlBO,CAkBAS,OAlBA,CAAV;EAoBA,OAAO,CAACL,GAAG,CAACtE,MAAL,GAAcjB,EAAE,CAAC6E,QAAH,CAAYzC,MAAZ,CAAd,GAAoCmD,GAAG,CAAC,CAAD,CAA9C;AACD,CA5CD;;AA8CAvF,EAAE,CAACoD,MAAH,GAAY,UAAUpD,EAAV,EAAc;EACxB,IAAI6F,GAAG,GAAG,CAAV;EACA7F,EAAE,CAACU,KAAH,CAAS,GAAT,EAAcoF,OAAd,CAAuBvC,KAAD,IAAW;IAC/BsC,GAAG,KAAK,CAAR;IACAA,GAAG,IAAIhF,QAAQ,CAAC0C,KAAD,CAAf;EACD,CAHD;EAIA,OAAQsC,GAAG,KAAK,CAAhB;AACD,CAPD;;AASA7F,EAAE,CAAC0D,QAAH,GAAc,UAAUmC,GAAV,EAAe;EAC3B,OAAS,GAAEA,GAAG,KAAK,EAAG,IACpBA,GAAG,IAAI,EAAP,GAAY,GAAI,IAChBA,GAAG,IAAI,CAAP,GAAW,GAAI,IACfA,GAAG,GAAG,GAAI,EAHZ;AAID,CALD"},"metadata":{},"sourceType":"script"}