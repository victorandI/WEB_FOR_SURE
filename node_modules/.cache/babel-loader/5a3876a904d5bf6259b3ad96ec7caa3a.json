{"ast":null,"code":"'use strict';\n\nconst get = require('../get');\n\nconst utils = require('../../utils');\n/**\n * Given a Mongoose index definition (key + options objects) and a MongoDB server\n * index definition, determine if the two indexes are equal.\n *\n * @param {Object} key the Mongoose index spec\n * @param {Object} options the Mongoose index definition's options\n * @param {Object} dbIndex the index in MongoDB as returned by `listIndexes()`\n * @api private\n */\n\n\nmodule.exports = function isIndexEqual(key, options, dbIndex) {\n  // Special case: text indexes have a special format in the db. For example,\n  // `{ name: 'text' }` becomes:\n  // {\n  //   v: 2,\n  //   key: { _fts: 'text', _ftsx: 1 },\n  //   name: 'name_text',\n  //   ns: 'test.tests',\n  //   background: true,\n  //   weights: { name: 1 },\n  //   default_language: 'english',\n  //   language_override: 'language',\n  //   textIndexVersion: 3\n  // }\n  if (dbIndex.textIndexVersion != null) {\n    delete dbIndex.key._fts;\n    delete dbIndex.key._ftsx;\n    const weights = { ...dbIndex.weights,\n      ...dbIndex.key\n    };\n\n    if (Object.keys(weights).length !== Object.keys(key).length) {\n      return false;\n    }\n\n    for (const prop of Object.keys(weights)) {\n      if (!(prop in key)) {\n        return false;\n      }\n\n      const weight = weights[prop];\n\n      if (weight !== get(options, 'weights.' + prop) && !(weight === 1 && get(options, 'weights.' + prop) == null)) {\n        return false;\n      }\n    }\n\n    if (options['default_language'] !== dbIndex['default_language']) {\n      return dbIndex['default_language'] === 'english' && options['default_language'] == null;\n    }\n\n    return true;\n  }\n\n  const optionKeys = ['unique', 'partialFilterExpression', 'sparse', 'expireAfterSeconds', 'collation'];\n\n  for (const key of optionKeys) {\n    if (!(key in options) && !(key in dbIndex)) {\n      continue;\n    }\n\n    if (key === 'collation') {\n      if (options[key] == null || dbIndex[key] == null) {\n        return options[key] == null && dbIndex[key] == null;\n      }\n\n      const definedKeys = Object.keys(options.collation);\n      const schemaCollation = options.collation;\n      const dbCollation = dbIndex.collation;\n\n      for (const opt of definedKeys) {\n        if (get(schemaCollation, opt) !== get(dbCollation, opt)) {\n          return false;\n        }\n      }\n    } else if (!utils.deepEqual(options[key], dbIndex[key])) {\n      return false;\n    }\n  }\n\n  const schemaIndexKeys = Object.keys(key);\n  const dbIndexKeys = Object.keys(dbIndex.key);\n\n  if (schemaIndexKeys.length !== dbIndexKeys.length) {\n    return false;\n  }\n\n  for (let i = 0; i < schemaIndexKeys.length; ++i) {\n    if (schemaIndexKeys[i] !== dbIndexKeys[i]) {\n      return false;\n    }\n\n    if (!utils.deepEqual(key[schemaIndexKeys[i]], dbIndex.key[dbIndexKeys[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n};","map":{"version":3,"names":["get","require","utils","module","exports","isIndexEqual","key","options","dbIndex","textIndexVersion","_fts","_ftsx","weights","Object","keys","length","prop","weight","optionKeys","definedKeys","collation","schemaCollation","dbCollation","opt","deepEqual","schemaIndexKeys","dbIndexKeys","i"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/helpers/indexes/isIndexEqual.js"],"sourcesContent":["'use strict';\n\nconst get = require('../get');\nconst utils = require('../../utils');\n/**\n * Given a Mongoose index definition (key + options objects) and a MongoDB server\n * index definition, determine if the two indexes are equal.\n *\n * @param {Object} key the Mongoose index spec\n * @param {Object} options the Mongoose index definition's options\n * @param {Object} dbIndex the index in MongoDB as returned by `listIndexes()`\n * @api private\n */\n\nmodule.exports = function isIndexEqual(key, options, dbIndex) {\n  // Special case: text indexes have a special format in the db. For example,\n  // `{ name: 'text' }` becomes:\n  // {\n  //   v: 2,\n  //   key: { _fts: 'text', _ftsx: 1 },\n  //   name: 'name_text',\n  //   ns: 'test.tests',\n  //   background: true,\n  //   weights: { name: 1 },\n  //   default_language: 'english',\n  //   language_override: 'language',\n  //   textIndexVersion: 3\n  // }\n  if (dbIndex.textIndexVersion != null) {\n    delete dbIndex.key._fts;\n    delete dbIndex.key._ftsx;\n    const weights = { ...dbIndex.weights, ...dbIndex.key };\n    if (Object.keys(weights).length !== Object.keys(key).length) {\n      return false;\n    }\n    for (const prop of Object.keys(weights)) {\n      if (!(prop in key)) {\n        return false;\n      }\n      const weight = weights[prop];\n      if (weight !== get(options, 'weights.' + prop) && !(weight === 1 && get(options, 'weights.' + prop) == null)) {\n        return false;\n      }\n    }\n\n    if (options['default_language'] !== dbIndex['default_language']) {\n      return dbIndex['default_language'] === 'english' && options['default_language'] == null;\n    }\n\n    return true;\n  }\n\n  const optionKeys = [\n    'unique',\n    'partialFilterExpression',\n    'sparse',\n    'expireAfterSeconds',\n    'collation'\n  ];\n  for (const key of optionKeys) {\n    if (!(key in options) && !(key in dbIndex)) {\n      continue;\n    }\n    if (key === 'collation') {\n      if (options[key] == null || dbIndex[key] == null) {\n        return options[key] == null && dbIndex[key] == null;\n      }\n      const definedKeys = Object.keys(options.collation);\n      const schemaCollation = options.collation;\n      const dbCollation = dbIndex.collation;\n      for (const opt of definedKeys) {\n        if (get(schemaCollation, opt) !== get(dbCollation, opt)) {\n          return false;\n        }\n      }\n    } else if (!utils.deepEqual(options[key], dbIndex[key])) {\n      return false;\n    }\n  }\n\n  const schemaIndexKeys = Object.keys(key);\n  const dbIndexKeys = Object.keys(dbIndex.key);\n  if (schemaIndexKeys.length !== dbIndexKeys.length) {\n    return false;\n  }\n  for (let i = 0; i < schemaIndexKeys.length; ++i) {\n    if (schemaIndexKeys[i] !== dbIndexKeys[i]) {\n      return false;\n    }\n    if (!utils.deepEqual(key[schemaIndexKeys[i]], dbIndex.key[dbIndexKeys[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}