{"ast":null,"code":"'use strict';\n\nconst clone = require('./clone');\n\nconst MongooseError = require('../error/index');\n\nfunction processConnectionOptions(uri, options) {\n  const opts = options ? options : {};\n  const readPreference = opts.readPreference ? opts.readPreference : getUriReadPreference(uri);\n  const resolvedOpts = readPreference && readPreference !== 'primary' ? resolveOptsConflicts(readPreference, opts) : opts;\n  return clone(resolvedOpts);\n}\n\nfunction resolveOptsConflicts(pref, opts) {\n  // don't silently override user-provided indexing options\n  if (setsIndexOptions(opts) && setsSecondaryRead(pref)) {\n    throwReadPreferenceError();\n  } // if user has not explicitly set any auto-indexing options,\n  // we can silently default them all to false\n  else {\n    return defaultIndexOptsToFalse(opts);\n  }\n}\n\nfunction setsIndexOptions(opts) {\n  const configIdx = opts.config && opts.config.autoIndex;\n  const {\n    autoCreate,\n    autoIndex\n  } = opts;\n  return !!(configIdx || autoCreate || autoIndex);\n}\n\nfunction setsSecondaryRead(prefString) {\n  return !!(prefString === 'secondary' || prefString === 'secondaryPreferred');\n}\n\nfunction getUriReadPreference(connectionString) {\n  const exp = /(?:&|\\?)readPreference=(\\w+)(?:&|$)/;\n  const match = exp.exec(connectionString);\n  return match ? match[1] : null;\n}\n\nfunction defaultIndexOptsToFalse(opts) {\n  opts.config = {\n    autoIndex: false\n  };\n  opts.autoCreate = false;\n  opts.autoIndex = false;\n  return opts;\n}\n\nfunction throwReadPreferenceError() {\n  throw new MongooseError('MongoDB prohibits index creation on connections that read from ' + 'non-primary replicas.  Connections that set \"readPreference\" to \"secondary\" or ' + '\"secondaryPreferred\" may not opt-in to the following connection options: ' + 'autoCreate, autoIndex');\n}\n\nmodule.exports = processConnectionOptions;","map":{"version":3,"names":["clone","require","MongooseError","processConnectionOptions","uri","options","opts","readPreference","getUriReadPreference","resolvedOpts","resolveOptsConflicts","pref","setsIndexOptions","setsSecondaryRead","throwReadPreferenceError","defaultIndexOptsToFalse","configIdx","config","autoIndex","autoCreate","prefString","connectionString","exp","match","exec","module","exports"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/helpers/processConnectionOptions.js"],"sourcesContent":["'use strict';\n\nconst clone = require('./clone');\nconst MongooseError = require('../error/index');\n\nfunction processConnectionOptions(uri, options) {\n  const opts = options ? options : {};\n  const readPreference = opts.readPreference\n    ? opts.readPreference\n    : getUriReadPreference(uri);\n\n  const resolvedOpts = (readPreference && readPreference !== 'primary')\n    ? resolveOptsConflicts(readPreference, opts)\n    : opts;\n\n  return clone(resolvedOpts);\n}\n\nfunction resolveOptsConflicts(pref, opts) {\n  // don't silently override user-provided indexing options\n  if (setsIndexOptions(opts) && setsSecondaryRead(pref)) {\n    throwReadPreferenceError();\n  }\n\n  // if user has not explicitly set any auto-indexing options,\n  // we can silently default them all to false\n  else {\n    return defaultIndexOptsToFalse(opts);\n  }\n}\n\nfunction setsIndexOptions(opts) {\n  const configIdx = opts.config && opts.config.autoIndex;\n  const { autoCreate, autoIndex } = opts;\n  return !!(configIdx || autoCreate || autoIndex);\n}\n\nfunction setsSecondaryRead(prefString) {\n  return !!(prefString === 'secondary' || prefString === 'secondaryPreferred');\n}\n\nfunction getUriReadPreference(connectionString) {\n  const exp = /(?:&|\\?)readPreference=(\\w+)(?:&|$)/;\n  const match = exp.exec(connectionString);\n  return match ? match[1] : null;\n}\n\nfunction defaultIndexOptsToFalse(opts) {\n  opts.config = { autoIndex: false };\n  opts.autoCreate = false;\n  opts.autoIndex = false;\n  return opts;\n}\n\nfunction throwReadPreferenceError() {\n  throw new MongooseError(\n    'MongoDB prohibits index creation on connections that read from ' +\n            'non-primary replicas.  Connections that set \"readPreference\" to \"secondary\" or ' +\n            '\"secondaryPreferred\" may not opt-in to the following connection options: ' +\n            'autoCreate, autoIndex'\n  );\n}\n\nmodule.exports = processConnectionOptions;\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,gBAAD,CAA7B;;AAEA,SAASE,wBAAT,CAAkCC,GAAlC,EAAuCC,OAAvC,EAAgD;EAC9C,MAAMC,IAAI,GAAGD,OAAO,GAAGA,OAAH,GAAa,EAAjC;EACA,MAAME,cAAc,GAAGD,IAAI,CAACC,cAAL,GACnBD,IAAI,CAACC,cADc,GAEnBC,oBAAoB,CAACJ,GAAD,CAFxB;EAIA,MAAMK,YAAY,GAAIF,cAAc,IAAIA,cAAc,KAAK,SAAtC,GACjBG,oBAAoB,CAACH,cAAD,EAAiBD,IAAjB,CADH,GAEjBA,IAFJ;EAIA,OAAON,KAAK,CAACS,YAAD,CAAZ;AACD;;AAED,SAASC,oBAAT,CAA8BC,IAA9B,EAAoCL,IAApC,EAA0C;EACxC;EACA,IAAIM,gBAAgB,CAACN,IAAD,CAAhB,IAA0BO,iBAAiB,CAACF,IAAD,CAA/C,EAAuD;IACrDG,wBAAwB;EACzB,CAFD,CAIA;EACA;EALA,KAMK;IACH,OAAOC,uBAAuB,CAACT,IAAD,CAA9B;EACD;AACF;;AAED,SAASM,gBAAT,CAA0BN,IAA1B,EAAgC;EAC9B,MAAMU,SAAS,GAAGV,IAAI,CAACW,MAAL,IAAeX,IAAI,CAACW,MAAL,CAAYC,SAA7C;EACA,MAAM;IAAEC,UAAF;IAAcD;EAAd,IAA4BZ,IAAlC;EACA,OAAO,CAAC,EAAEU,SAAS,IAAIG,UAAb,IAA2BD,SAA7B,CAAR;AACD;;AAED,SAASL,iBAAT,CAA2BO,UAA3B,EAAuC;EACrC,OAAO,CAAC,EAAEA,UAAU,KAAK,WAAf,IAA8BA,UAAU,KAAK,oBAA/C,CAAR;AACD;;AAED,SAASZ,oBAAT,CAA8Ba,gBAA9B,EAAgD;EAC9C,MAAMC,GAAG,GAAG,qCAAZ;EACA,MAAMC,KAAK,GAAGD,GAAG,CAACE,IAAJ,CAASH,gBAAT,CAAd;EACA,OAAOE,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAR,GAAc,IAA1B;AACD;;AAED,SAASR,uBAAT,CAAiCT,IAAjC,EAAuC;EACrCA,IAAI,CAACW,MAAL,GAAc;IAAEC,SAAS,EAAE;EAAb,CAAd;EACAZ,IAAI,CAACa,UAAL,GAAkB,KAAlB;EACAb,IAAI,CAACY,SAAL,GAAiB,KAAjB;EACA,OAAOZ,IAAP;AACD;;AAED,SAASQ,wBAAT,GAAoC;EAClC,MAAM,IAAIZ,aAAJ,CACJ,oEACQ,iFADR,GAEQ,2EAFR,GAGQ,uBAJJ,CAAN;AAMD;;AAEDuB,MAAM,CAACC,OAAP,GAAiBvB,wBAAjB"},"metadata":{},"sourceType":"script"}