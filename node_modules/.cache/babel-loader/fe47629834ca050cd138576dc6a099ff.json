{"ast":null,"code":"'use strict';\n\nconst utils = require('./utils');\n/**\n * VirtualType constructor\n *\n * This is what mongoose uses to define virtual attributes via `Schema.prototype.virtual`.\n *\n * #### Example:\n *\n *     const fullname = schema.virtual('fullname');\n *     fullname instanceof mongoose.VirtualType // true\n *\n * @param {Object} options\n * @param {string|function} [options.ref] if `ref` is not nullish, this becomes a [populated virtual](/docs/populate.html#populate-virtuals)\n * @param {string|function} [options.localField] the local field to populate on if this is a populated virtual.\n * @param {string|function} [options.foreignField] the foreign field to populate on if this is a populated virtual.\n * @param {boolean} [options.justOne=false] by default, a populated virtual is an array. If you set `justOne`, the populated virtual will be a single doc or `null`.\n * @param {boolean} [options.getters=false] if you set this to `true`, Mongoose will call any custom getters you defined on this virtual\n * @param {boolean} [options.count=false] if you set this to `true`, `populate()` will set this virtual to the number of populated documents, as opposed to the documents themselves, using [`Query#countDocuments()`](./api.html#query_Query-countDocuments)\n * @param {Object|Function} [options.match=null] add an extra match condition to `populate()`\n * @param {Number} [options.limit=null] add a default `limit` to the `populate()` query\n * @param {Number} [options.skip=null] add a default `skip` to the `populate()` query\n * @param {Number} [options.perDocumentLimit=null] For legacy reasons, `limit` with `populate()` may give incorrect results because it only executes a single query for every document being populated. If you set `perDocumentLimit`, Mongoose will ensure correct `limit` per document by executing a separate query for each document to `populate()`. For example, `.find().populate({ path: 'test', perDocumentLimit: 2 })` will execute 2 additional queries if `.find()` returns 2 documents.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @param {string} name\n * @api public\n */\n\n\nfunction VirtualType(options, name) {\n  this.path = name;\n  this.getters = [];\n  this.setters = [];\n  this.options = Object.assign({}, options);\n}\n/**\n * If no getters/getters, add a default\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api private\n */\n\n\nVirtualType.prototype._applyDefaultGetters = function () {\n  if (this.getters.length > 0 || this.setters.length > 0) {\n    return;\n  }\n\n  const path = this.path;\n  const internalProperty = '$' + path;\n  this.getters.push(function () {\n    return this[internalProperty];\n  });\n  this.setters.push(function (v) {\n    this[internalProperty] = v;\n  });\n};\n/*!\n * ignore\n */\n\n\nVirtualType.prototype.clone = function () {\n  const clone = new VirtualType(this.options, this.path);\n  clone.getters = [].concat(this.getters);\n  clone.setters = [].concat(this.setters);\n  return clone;\n};\n/**\n * Adds a custom getter to this virtual.\n *\n * Mongoose calls the getter function with the below 3 parameters.\n *\n * - `value`: the value returned by the previous getter. If there is only one getter, `value` will be `undefined`.\n * - `virtual`: the virtual object you called `.get()` on\n * - `doc`: the document this virtual is attached to. Equivalent to `this`.\n *\n * #### Example:\n *\n *     const virtual = schema.virtual('fullname');\n *     virtual.get(function(value, virtual, doc) {\n *       return this.name.first + ' ' + this.name.last;\n *     });\n *\n * @param {Function(Any, VirtualType, Document)} fn\n * @return {VirtualType} this\n * @api public\n */\n\n\nVirtualType.prototype.get = function (fn) {\n  this.getters.push(fn);\n  return this;\n};\n/**\n * Adds a custom setter to this virtual.\n *\n * Mongoose calls the setter function with the below 3 parameters.\n *\n * - `value`: the value being set\n * - `virtual`: the virtual object you're calling `.set()` on\n * - `doc`: the document this virtual is attached to. Equivalent to `this`.\n *\n * #### Example:\n *\n *     const virtual = schema.virtual('fullname');\n *     virtual.set(function(value, virtual, doc) {\n *       const parts = value.split(' ');\n *       this.name.first = parts[0];\n *       this.name.last = parts[1];\n *     });\n *\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model();\n *     // Calls the setter with `value = 'Jean-Luc Picard'`\n *     doc.fullname = 'Jean-Luc Picard';\n *     doc.name.first; // 'Jean-Luc'\n *     doc.name.last; // 'Picard'\n *\n * @param {Function(Any, VirtualType, Document)} fn\n * @return {VirtualType} this\n * @api public\n */\n\n\nVirtualType.prototype.set = function (fn) {\n  this.setters.push(fn);\n  return this;\n};\n/**\n * Applies getters to `value`.\n *\n * @param {Object} value\n * @param {Document} doc The document this virtual is attached to\n * @return {any} the value after applying all getters\n * @api public\n */\n\n\nVirtualType.prototype.applyGetters = function (value, doc) {\n  if (utils.hasUserDefinedProperty(this.options, ['ref', 'refPath']) && doc.$$populatedVirtuals && doc.$$populatedVirtuals.hasOwnProperty(this.path)) {\n    value = doc.$$populatedVirtuals[this.path];\n  }\n\n  let v = value;\n\n  for (const getter of this.getters) {\n    v = getter.call(doc, v, this, doc);\n  }\n\n  return v;\n};\n/**\n * Applies setters to `value`.\n *\n * @param {Object} value\n * @param {Document} doc\n * @return {any} the value after applying all setters\n * @api public\n */\n\n\nVirtualType.prototype.applySetters = function (value, doc) {\n  let v = value;\n\n  for (const setter of this.setters) {\n    v = setter.call(doc, v, this, doc);\n  }\n\n  return v;\n};\n/*!\n * exports\n */\n\n\nmodule.exports = VirtualType;","map":{"version":3,"names":["utils","require","VirtualType","options","name","path","getters","setters","Object","assign","prototype","_applyDefaultGetters","length","internalProperty","push","v","clone","concat","get","fn","set","applyGetters","value","doc","hasUserDefinedProperty","$$populatedVirtuals","hasOwnProperty","getter","call","applySetters","setter","module","exports"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/virtualtype.js"],"sourcesContent":["'use strict';\n\nconst utils = require('./utils');\n\n/**\n * VirtualType constructor\n *\n * This is what mongoose uses to define virtual attributes via `Schema.prototype.virtual`.\n *\n * #### Example:\n *\n *     const fullname = schema.virtual('fullname');\n *     fullname instanceof mongoose.VirtualType // true\n *\n * @param {Object} options\n * @param {string|function} [options.ref] if `ref` is not nullish, this becomes a [populated virtual](/docs/populate.html#populate-virtuals)\n * @param {string|function} [options.localField] the local field to populate on if this is a populated virtual.\n * @param {string|function} [options.foreignField] the foreign field to populate on if this is a populated virtual.\n * @param {boolean} [options.justOne=false] by default, a populated virtual is an array. If you set `justOne`, the populated virtual will be a single doc or `null`.\n * @param {boolean} [options.getters=false] if you set this to `true`, Mongoose will call any custom getters you defined on this virtual\n * @param {boolean} [options.count=false] if you set this to `true`, `populate()` will set this virtual to the number of populated documents, as opposed to the documents themselves, using [`Query#countDocuments()`](./api.html#query_Query-countDocuments)\n * @param {Object|Function} [options.match=null] add an extra match condition to `populate()`\n * @param {Number} [options.limit=null] add a default `limit` to the `populate()` query\n * @param {Number} [options.skip=null] add a default `skip` to the `populate()` query\n * @param {Number} [options.perDocumentLimit=null] For legacy reasons, `limit` with `populate()` may give incorrect results because it only executes a single query for every document being populated. If you set `perDocumentLimit`, Mongoose will ensure correct `limit` per document by executing a separate query for each document to `populate()`. For example, `.find().populate({ path: 'test', perDocumentLimit: 2 })` will execute 2 additional queries if `.find()` returns 2 documents.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @param {string} name\n * @api public\n */\n\nfunction VirtualType(options, name) {\n  this.path = name;\n  this.getters = [];\n  this.setters = [];\n  this.options = Object.assign({}, options);\n}\n\n/**\n * If no getters/getters, add a default\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api private\n */\n\nVirtualType.prototype._applyDefaultGetters = function() {\n  if (this.getters.length > 0 || this.setters.length > 0) {\n    return;\n  }\n\n  const path = this.path;\n  const internalProperty = '$' + path;\n  this.getters.push(function() {\n    return this[internalProperty];\n  });\n  this.setters.push(function(v) {\n    this[internalProperty] = v;\n  });\n};\n\n/*!\n * ignore\n */\n\nVirtualType.prototype.clone = function() {\n  const clone = new VirtualType(this.options, this.path);\n  clone.getters = [].concat(this.getters);\n  clone.setters = [].concat(this.setters);\n  return clone;\n};\n\n/**\n * Adds a custom getter to this virtual.\n *\n * Mongoose calls the getter function with the below 3 parameters.\n *\n * - `value`: the value returned by the previous getter. If there is only one getter, `value` will be `undefined`.\n * - `virtual`: the virtual object you called `.get()` on\n * - `doc`: the document this virtual is attached to. Equivalent to `this`.\n *\n * #### Example:\n *\n *     const virtual = schema.virtual('fullname');\n *     virtual.get(function(value, virtual, doc) {\n *       return this.name.first + ' ' + this.name.last;\n *     });\n *\n * @param {Function(Any, VirtualType, Document)} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.get = function(fn) {\n  this.getters.push(fn);\n  return this;\n};\n\n/**\n * Adds a custom setter to this virtual.\n *\n * Mongoose calls the setter function with the below 3 parameters.\n *\n * - `value`: the value being set\n * - `virtual`: the virtual object you're calling `.set()` on\n * - `doc`: the document this virtual is attached to. Equivalent to `this`.\n *\n * #### Example:\n *\n *     const virtual = schema.virtual('fullname');\n *     virtual.set(function(value, virtual, doc) {\n *       const parts = value.split(' ');\n *       this.name.first = parts[0];\n *       this.name.last = parts[1];\n *     });\n *\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model();\n *     // Calls the setter with `value = 'Jean-Luc Picard'`\n *     doc.fullname = 'Jean-Luc Picard';\n *     doc.name.first; // 'Jean-Luc'\n *     doc.name.last; // 'Picard'\n *\n * @param {Function(Any, VirtualType, Document)} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.set = function(fn) {\n  this.setters.push(fn);\n  return this;\n};\n\n/**\n * Applies getters to `value`.\n *\n * @param {Object} value\n * @param {Document} doc The document this virtual is attached to\n * @return {any} the value after applying all getters\n * @api public\n */\n\nVirtualType.prototype.applyGetters = function(value, doc) {\n  if (utils.hasUserDefinedProperty(this.options, ['ref', 'refPath']) &&\n      doc.$$populatedVirtuals &&\n      doc.$$populatedVirtuals.hasOwnProperty(this.path)) {\n    value = doc.$$populatedVirtuals[this.path];\n  }\n\n  let v = value;\n  for (const getter of this.getters) {\n    v = getter.call(doc, v, this, doc);\n  }\n  return v;\n};\n\n/**\n * Applies setters to `value`.\n *\n * @param {Object} value\n * @param {Document} doc\n * @return {any} the value after applying all setters\n * @api public\n */\n\nVirtualType.prototype.applySetters = function(value, doc) {\n  let v = value;\n  for (const setter of this.setters) {\n    v = setter.call(doc, v, this, doc);\n  }\n  return v;\n};\n\n/*!\n * exports\n */\n\nmodule.exports = VirtualType;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}