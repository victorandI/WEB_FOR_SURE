{"ast":null,"code":"'use strict';\n\nlet asyncFunctionPrototype = null; // try/catch for Babel compatibility, because Babel preset-env requires\n// regenerator-runtime for async/await and we don't want to include that\n// for a simple check.\n\ntry {\n  asyncFunctionPrototype = Object.getPrototypeOf(async function () {});\n} catch (err) {}\n\nif (asyncFunctionPrototype == null) {\n  module.exports = function isAsyncFunction() {\n    return false;\n  };\n} else {\n  module.exports = function isAsyncFunction(v) {\n    return typeof v === 'function' && Object.getPrototypeOf(v) === asyncFunctionPrototype;\n  };\n}","map":{"version":3,"names":["asyncFunctionPrototype","Object","getPrototypeOf","err","module","exports","isAsyncFunction","v"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/helpers/isAsyncFunction.js"],"sourcesContent":["'use strict';\n\nlet asyncFunctionPrototype = null;\n// try/catch for Babel compatibility, because Babel preset-env requires\n// regenerator-runtime for async/await and we don't want to include that\n// for a simple check.\ntry {\n  asyncFunctionPrototype = Object.getPrototypeOf(async function() {});\n} catch (err) {}\n\nif (asyncFunctionPrototype == null) {\n  module.exports = function isAsyncFunction() {\n    return false;\n  };\n} else {\n  module.exports = function isAsyncFunction(v) {\n    return (\n      typeof v === 'function' &&\n      Object.getPrototypeOf(v) === asyncFunctionPrototype\n    );\n  };\n}\n"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAG,IAA7B,C,CACA;AACA;AACA;;AACA,IAAI;EACFA,sBAAsB,GAAGC,MAAM,CAACC,cAAP,CAAsB,kBAAiB,CAAE,CAAzC,CAAzB;AACD,CAFD,CAEE,OAAOC,GAAP,EAAY,CAAE;;AAEhB,IAAIH,sBAAsB,IAAI,IAA9B,EAAoC;EAClCI,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,GAA2B;IAC1C,OAAO,KAAP;EACD,CAFD;AAGD,CAJD,MAIO;EACLF,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,CAAzB,EAA4B;IAC3C,OACE,OAAOA,CAAP,KAAa,UAAb,IACAN,MAAM,CAACC,cAAP,CAAsBK,CAAtB,MAA6BP,sBAF/B;EAID,CALD;AAMD"},"metadata":{},"sourceType":"script"}