{"ast":null,"code":"'use strict';\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\n\nconst sessionNewDocuments = require('../helpers/symbols').sessionNewDocuments;\n\nconst utils = require('../utils');\n\nmodule.exports = function trackTransaction(schema) {\n  schema.pre('save', function () {\n    const session = this.$session();\n\n    if (session == null) {\n      return;\n    }\n\n    if (session.transaction == null || session[sessionNewDocuments] == null) {\n      return;\n    }\n\n    if (!session[sessionNewDocuments].has(this)) {\n      const initialState = {};\n\n      if (this.isNew) {\n        initialState.isNew = true;\n      }\n\n      if (this.$__schema.options.versionKey) {\n        initialState.versionKey = this.get(this.$__schema.options.versionKey);\n      }\n\n      initialState.modifiedPaths = new Set(Object.keys(this.$__.activePaths.states.modify));\n      initialState.atomics = _getAtomics(this);\n      session[sessionNewDocuments].set(this, initialState);\n    } else {\n      const state = session[sessionNewDocuments].get(this);\n\n      for (const path of Object.keys(this.$__.activePaths.states.modify)) {\n        state.modifiedPaths.add(path);\n      }\n\n      state.atomics = _getAtomics(this, state.atomics);\n    }\n  });\n};\n\nfunction _getAtomics(doc, previous) {\n  const pathToAtomics = new Map();\n  previous = previous || new Map();\n  const pathsToCheck = Object.keys(doc.$__.activePaths.init).concat(Object.keys(doc.$__.activePaths.modify));\n\n  for (const path of pathsToCheck) {\n    const val = doc.$__getValue(path);\n\n    if (val != null && Array.isArray(val) && utils.isMongooseDocumentArray(val) && val.length && val[arrayAtomicsSymbol] != null && Object.keys(val[arrayAtomicsSymbol]).length !== 0) {\n      const existing = previous.get(path) || {};\n      pathToAtomics.set(path, mergeAtomics(existing, val[arrayAtomicsSymbol]));\n    }\n  }\n\n  const dirty = doc.$__dirty();\n\n  for (const dirt of dirty) {\n    const path = dirt.path;\n    const val = dirt.value;\n\n    if (val != null && val[arrayAtomicsSymbol] != null && Object.keys(val[arrayAtomicsSymbol]).length !== 0) {\n      const existing = previous.get(path) || {};\n      pathToAtomics.set(path, mergeAtomics(existing, val[arrayAtomicsSymbol]));\n    }\n  }\n\n  return pathToAtomics;\n}\n\nfunction mergeAtomics(destination, source) {\n  destination = destination || {};\n\n  if (source.$pullAll != null) {\n    destination.$pullAll = (destination.$pullAll || []).concat(source.$pullAll);\n  }\n\n  if (source.$push != null) {\n    destination.$push = destination.$push || {};\n    destination.$push.$each = (destination.$push.$each || []).concat(source.$push.$each);\n  }\n\n  if (source.$addToSet != null) {\n    destination.$addToSet = (destination.$addToSet || []).concat(source.$addToSet);\n  }\n\n  if (source.$set != null) {\n    destination.$set = Object.assign(destination.$set || {}, source.$set);\n  }\n\n  return destination;\n}","map":{"version":3,"names":["arrayAtomicsSymbol","require","sessionNewDocuments","utils","module","exports","trackTransaction","schema","pre","session","$session","transaction","has","initialState","isNew","$__schema","options","versionKey","get","modifiedPaths","Set","Object","keys","$__","activePaths","states","modify","atomics","_getAtomics","set","state","path","add","doc","previous","pathToAtomics","Map","pathsToCheck","init","concat","val","$__getValue","Array","isArray","isMongooseDocumentArray","length","existing","mergeAtomics","dirty","$__dirty","dirt","value","destination","source","$pullAll","$push","$each","$addToSet","$set","assign"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/plugins/trackTransaction.js"],"sourcesContent":["'use strict';\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\nconst sessionNewDocuments = require('../helpers/symbols').sessionNewDocuments;\nconst utils = require('../utils');\n\nmodule.exports = function trackTransaction(schema) {\n  schema.pre('save', function() {\n    const session = this.$session();\n    if (session == null) {\n      return;\n    }\n    if (session.transaction == null || session[sessionNewDocuments] == null) {\n      return;\n    }\n\n    if (!session[sessionNewDocuments].has(this)) {\n      const initialState = {};\n      if (this.isNew) {\n        initialState.isNew = true;\n      }\n      if (this.$__schema.options.versionKey) {\n        initialState.versionKey = this.get(this.$__schema.options.versionKey);\n      }\n\n      initialState.modifiedPaths = new Set(Object.keys(this.$__.activePaths.states.modify));\n      initialState.atomics = _getAtomics(this);\n\n      session[sessionNewDocuments].set(this, initialState);\n    } else {\n      const state = session[sessionNewDocuments].get(this);\n\n      for (const path of Object.keys(this.$__.activePaths.states.modify)) {\n        state.modifiedPaths.add(path);\n      }\n      state.atomics = _getAtomics(this, state.atomics);\n    }\n  });\n};\n\nfunction _getAtomics(doc, previous) {\n  const pathToAtomics = new Map();\n  previous = previous || new Map();\n\n  const pathsToCheck = Object.keys(doc.$__.activePaths.init).concat(Object.keys(doc.$__.activePaths.modify));\n\n  for (const path of pathsToCheck) {\n    const val = doc.$__getValue(path);\n    if (val != null &&\n        Array.isArray(val) &&\n        utils.isMongooseDocumentArray(val) &&\n        val.length &&\n        val[arrayAtomicsSymbol] != null &&\n        Object.keys(val[arrayAtomicsSymbol]).length !== 0) {\n      const existing = previous.get(path) || {};\n      pathToAtomics.set(path, mergeAtomics(existing, val[arrayAtomicsSymbol]));\n    }\n  }\n\n  const dirty = doc.$__dirty();\n  for (const dirt of dirty) {\n    const path = dirt.path;\n\n    const val = dirt.value;\n    if (val != null && val[arrayAtomicsSymbol] != null && Object.keys(val[arrayAtomicsSymbol]).length !== 0) {\n      const existing = previous.get(path) || {};\n      pathToAtomics.set(path, mergeAtomics(existing, val[arrayAtomicsSymbol]));\n    }\n  }\n\n  return pathToAtomics;\n}\n\nfunction mergeAtomics(destination, source) {\n  destination = destination || {};\n\n  if (source.$pullAll != null) {\n    destination.$pullAll = (destination.$pullAll || []).concat(source.$pullAll);\n  }\n  if (source.$push != null) {\n    destination.$push = destination.$push || {};\n    destination.$push.$each = (destination.$push.$each || []).concat(source.$push.$each);\n  }\n  if (source.$addToSet != null) {\n    destination.$addToSet = (destination.$addToSet || []).concat(source.$addToSet);\n  }\n  if (source.$set != null) {\n    destination.$set = Object.assign(destination.$set || {}, source.$set);\n  }\n\n  return destination;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}