{"ast":null,"code":"'use strict';\n\nconst castFilterPath = require('../query/castFilterPath');\n\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\n\nconst getPath = require('../schema/getPath');\n\nconst updatedPathsByArrayFilter = require('./updatedPathsByArrayFilter');\n\nmodule.exports = function castArrayFilters(query) {\n  const arrayFilters = query.options.arrayFilters;\n  const update = query.getUpdate();\n  const schema = query.schema;\n  const updatedPathsByFilter = updatedPathsByArrayFilter(update);\n  let strictQuery = schema.options.strict;\n\n  if (query._mongooseOptions.strict != null) {\n    strictQuery = query._mongooseOptions.strict;\n  }\n\n  if (query.model && query.model.base.options.strictQuery != null) {\n    strictQuery = query.model.base.options.strictQuery;\n  }\n\n  if (schema._userProvidedOptions.strictQuery != null) {\n    strictQuery = schema._userProvidedOptions.strictQuery;\n  }\n\n  if (query._mongooseOptions.strictQuery != null) {\n    strictQuery = query._mongooseOptions.strictQuery;\n  }\n\n  _castArrayFilters(arrayFilters, schema, strictQuery, updatedPathsByFilter, query);\n};\n\nfunction _castArrayFilters(arrayFilters, schema, strictQuery, updatedPathsByFilter, query) {\n  if (!Array.isArray(arrayFilters)) {\n    return;\n  }\n\n  for (const filter of arrayFilters) {\n    if (filter == null) {\n      throw new Error(`Got null array filter in ${arrayFilters}`);\n    }\n\n    for (const key of Object.keys(filter)) {\n      if (key === '$and' || key === '$or') {\n        _castArrayFilters(filter[key], schema, strictQuery, updatedPathsByFilter, query);\n\n        continue;\n      }\n\n      if (filter[key] == null) {\n        continue;\n      }\n\n      if (updatedPathsByFilter[key] === null) {\n        continue;\n      }\n\n      if (Object.keys(updatedPathsByFilter).length === 0) {\n        continue;\n      }\n\n      const dot = key.indexOf('.');\n      let filterPath = dot === -1 ? updatedPathsByFilter[key] + '.0' : updatedPathsByFilter[key.substring(0, dot)] + '.0' + key.substring(dot);\n\n      if (filterPath == null) {\n        throw new Error(`Filter path not found for ${key}`);\n      } // If there are multiple array filters in the path being updated, make sure\n      // to replace them so we can get the schema path.\n\n\n      filterPath = cleanPositionalOperators(filterPath);\n      const schematype = getPath(schema, filterPath);\n\n      if (schematype == null) {\n        if (!strictQuery) {\n          return;\n        } // For now, treat `strictQuery = true` and `strictQuery = 'throw'` as\n        // equivalent for casting array filters. `strictQuery = true` doesn't\n        // quite work in this context because we never want to silently strip out\n        // array filters, even if the path isn't in the schema.\n\n\n        throw new Error(`Could not find path \"${filterPath}\" in schema`);\n      }\n\n      if (typeof filter[key] === 'object') {\n        filter[key] = castFilterPath(query, schematype, filter[key]);\n      } else {\n        filter[key] = schematype.castForQuery(filter[key]);\n      }\n    }\n  }\n}","map":{"version":3,"names":["castFilterPath","require","cleanPositionalOperators","getPath","updatedPathsByArrayFilter","module","exports","castArrayFilters","query","arrayFilters","options","update","getUpdate","schema","updatedPathsByFilter","strictQuery","strict","_mongooseOptions","model","base","_userProvidedOptions","_castArrayFilters","Array","isArray","filter","Error","key","Object","keys","length","dot","indexOf","filterPath","substring","schematype","castForQuery"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/helpers/update/castArrayFilters.js"],"sourcesContent":["'use strict';\n\nconst castFilterPath = require('../query/castFilterPath');\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\nconst getPath = require('../schema/getPath');\nconst updatedPathsByArrayFilter = require('./updatedPathsByArrayFilter');\n\nmodule.exports = function castArrayFilters(query) {\n  const arrayFilters = query.options.arrayFilters;\n  const update = query.getUpdate();\n  const schema = query.schema;\n  const updatedPathsByFilter = updatedPathsByArrayFilter(update);\n\n  let strictQuery = schema.options.strict;\n  if (query._mongooseOptions.strict != null) {\n    strictQuery = query._mongooseOptions.strict;\n  }\n  if (query.model && query.model.base.options.strictQuery != null) {\n    strictQuery = query.model.base.options.strictQuery;\n  }\n  if (schema._userProvidedOptions.strictQuery != null) {\n    strictQuery = schema._userProvidedOptions.strictQuery;\n  }\n  if (query._mongooseOptions.strictQuery != null) {\n    strictQuery = query._mongooseOptions.strictQuery;\n  }\n\n  _castArrayFilters(arrayFilters, schema, strictQuery, updatedPathsByFilter, query);\n};\n\nfunction _castArrayFilters(arrayFilters, schema, strictQuery, updatedPathsByFilter, query) {\n  if (!Array.isArray(arrayFilters)) {\n    return;\n  }\n\n  for (const filter of arrayFilters) {\n    if (filter == null) {\n      throw new Error(`Got null array filter in ${arrayFilters}`);\n    }\n    for (const key of Object.keys(filter)) {\n      if (key === '$and' || key === '$or') {\n        _castArrayFilters(filter[key], schema, strictQuery, updatedPathsByFilter, query);\n        continue;\n      }\n      if (filter[key] == null) {\n        continue;\n      }\n      if (updatedPathsByFilter[key] === null) {\n        continue;\n      }\n      if (Object.keys(updatedPathsByFilter).length === 0) {\n        continue;\n      }\n      const dot = key.indexOf('.');\n      let filterPath = dot === -1 ?\n        updatedPathsByFilter[key] + '.0' :\n        updatedPathsByFilter[key.substring(0, dot)] + '.0' + key.substring(dot);\n      if (filterPath == null) {\n        throw new Error(`Filter path not found for ${key}`);\n      }\n\n      // If there are multiple array filters in the path being updated, make sure\n      // to replace them so we can get the schema path.\n      filterPath = cleanPositionalOperators(filterPath);\n      const schematype = getPath(schema, filterPath);\n      if (schematype == null) {\n        if (!strictQuery) {\n          return;\n        }\n        // For now, treat `strictQuery = true` and `strictQuery = 'throw'` as\n        // equivalent for casting array filters. `strictQuery = true` doesn't\n        // quite work in this context because we never want to silently strip out\n        // array filters, even if the path isn't in the schema.\n        throw new Error(`Could not find path \"${filterPath}\" in schema`);\n      }\n      if (typeof filter[key] === 'object') {\n        filter[key] = castFilterPath(query, schematype, filter[key]);\n      } else {\n        filter[key] = schematype.castForQuery(filter[key]);\n      }\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}