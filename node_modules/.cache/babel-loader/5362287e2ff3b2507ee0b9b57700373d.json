{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPool = void 0;\n\nconst Denque = require(\"denque\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst utils_1 = require(\"../utils\");\n\nconst connect_1 = require(\"./connect\");\n\nconst connection_1 = require(\"./connection\");\n\nconst connection_pool_events_1 = require(\"./connection_pool_events\");\n\nconst errors_1 = require(\"./errors\");\n\nconst metrics_1 = require(\"./metrics\");\n/** @internal */\n\n\nconst kLogger = Symbol('logger');\n/** @internal */\n\nconst kConnections = Symbol('connections');\n/** @internal */\n\nconst kPermits = Symbol('permits');\n/** @internal */\n\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\n\nconst kGeneration = Symbol('generation');\n/** @internal */\n\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\n\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\n\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\n\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\n\nconst kCancelled = Symbol('cancelled');\n/** @internal */\n\nconst kMetrics = Symbol('metrics');\n/** @internal */\n\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\n\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\n\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n  /** @internal */\n  constructor(options) {\n    var _a, _b, _c, _d;\n\n    super();\n    this.closed = false;\n    this.options = Object.freeze({ ...options,\n      connectionType: connection_1.Connection,\n      maxPoolSize: (_a = options.maxPoolSize) !== null && _a !== void 0 ? _a : 100,\n      minPoolSize: (_b = options.minPoolSize) !== null && _b !== void 0 ? _b : 0,\n      maxIdleTimeMS: (_c = options.maxIdleTimeMS) !== null && _c !== void 0 ? _c : 0,\n      waitQueueTimeoutMS: (_d = options.waitQueueTimeoutMS) !== null && _d !== void 0 ? _d : 0,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n    }\n\n    this[kLogger] = new logger_1.Logger('ConnectionPool');\n    this[kConnections] = new Denque();\n    this[kPermits] = this.options.maxPoolSize;\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new Denque();\n    this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n    this[kCheckedOut] = 0;\n    this[kProcessingWaitQueue] = false;\n    process.nextTick(() => {\n      this.emit(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n      ensureMinPoolSize(this);\n    });\n  }\n  /** The address of the endpoint the pool is connected to */\n\n\n  get address() {\n    return this.options.hostAddress.toString();\n  }\n  /** An integer representing the SDAM generation of the pool */\n\n\n  get generation() {\n    return this[kGeneration];\n  }\n  /** An integer expressing how many total connections (active + in use) the pool currently has */\n\n\n  get totalConnectionCount() {\n    return this[kConnections].length + (this.options.maxPoolSize - this[kPermits]);\n  }\n  /** An integer expressing how many connections are currently available in the pool. */\n\n\n  get availableConnectionCount() {\n    return this[kConnections].length;\n  }\n\n  get waitQueueSize() {\n    return this[kWaitQueue].length;\n  }\n\n  get loadBalanced() {\n    return this.options.loadBalanced;\n  }\n\n  get serviceGenerations() {\n    return this[kServiceGenerations];\n  }\n\n  get currentCheckedOutCount() {\n    return this[kCheckedOut];\n  }\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n\n\n  waitQueueErrorMetrics() {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n\n\n  checkOut(callback) {\n    this.emit(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n\n    if (this.closed) {\n      this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'poolClosed'));\n      callback(new errors_1.PoolClosedError(this));\n      return;\n    }\n\n    const waitQueueMember = {\n      callback\n    };\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n\n    if (waitQueueTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout'));\n        waitQueueMember.callback(new errors_1.WaitQueueTimeoutError(this.loadBalanced ? this.waitQueueErrorMetrics() : 'Timed out while checking out a connection from connection pool', this.address));\n      }, waitQueueTimeoutMS);\n    }\n\n    this[kCheckedOut] = this[kCheckedOut] + 1;\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(processWaitQueue, this);\n  }\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n\n\n  checkIn(connection) {\n    const poolClosed = this.closed;\n    const stale = connectionIsStale(this, connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n\n    this[kCheckedOut] = this[kCheckedOut] - 1;\n    this.emit(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      destroyConnection(this, connection, reason);\n    }\n\n    process.nextTick(processWaitQueue, this);\n  }\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n\n\n  clear(serviceId) {\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid); // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n\n      if (generation == null) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n    } else {\n      this[kGeneration] += 1;\n    }\n\n    this.emit('connectionPoolCleared', new connection_pool_events_1.ConnectionPoolClearedEvent(this, serviceId));\n  }\n\n  close(_options, _cb) {\n    let options = _options;\n    const callback = _cb !== null && _cb !== void 0 ? _cb : _options;\n\n    if (typeof options === 'function') {\n      options = {};\n    }\n\n    options = Object.assign({\n      force: false\n    }, options);\n\n    if (this.closed) {\n      return callback();\n    } // immediately cancel any in-flight connections\n\n\n    this[kCancellationToken].emit('cancel'); // drain the wait queue\n\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].pop();\n\n      if (waitQueueMember) {\n        if (waitQueueMember.timer) {\n          clearTimeout(waitQueueMember.timer);\n        }\n\n        if (!waitQueueMember[kCancelled]) {\n          // TODO(NODE-3483): Replace with MongoConnectionPoolClosedError\n          waitQueueMember.callback(new error_1.MongoRuntimeError('Connection pool closed'));\n        }\n      }\n    } // clear the min pool size timer\n\n\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n\n    if (minPoolSizeTimer) {\n      clearTimeout(minPoolSizeTimer);\n    } // end the connection counter\n\n\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    } // mark the pool as closed immediately\n\n\n    this.closed = true;\n    (0, utils_1.eachAsync)(this[kConnections].toArray(), (conn, cb) => {\n      this.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n      conn.destroy(options, cb);\n    }, err => {\n      this[kConnections].clear();\n      this.emit(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n      callback(err);\n    });\n  }\n  /**\n   * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n   * has completed by calling back.\n   *\n   * NOTE: please note the required signature of `fn`\n   *\n   * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n   *   In these cases we pass the connection in to this method to ensure it is used and a new\n   *   connection is not checked out.\n   *\n   * @param conn - A pinned connection for use in load balancing mode.\n   * @param fn - A function which operates on a managed connection\n   * @param callback - The original callback\n   */\n\n\n  withConnection(conn, fn, callback) {\n    if (conn) {\n      // use the provided connection, and do _not_ check it in after execution\n      fn(undefined, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n      });\n      return;\n    }\n\n    this.checkOut((err, conn) => {\n      // don't callback with `err` here, we might want to act upon it inside `fn`\n      fn(err, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n\n        if (conn) {\n          this.checkIn(conn);\n        }\n      });\n    });\n  }\n\n}\n\nexports.ConnectionPool = ConnectionPool;\n/**\n * Emitted when the connection pool is created.\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted when a connection is created.\n * @event\n */\n\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\n\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\n\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\n\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\n\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\n\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\n\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;\n\nfunction ensureMinPoolSize(pool) {\n  if (pool.closed || pool.options.minPoolSize === 0) {\n    return;\n  }\n\n  const minPoolSize = pool.options.minPoolSize;\n\n  for (let i = pool.totalConnectionCount; i < minPoolSize; ++i) {\n    createConnection(pool);\n  }\n\n  pool[kMinPoolSizeTimer] = setTimeout(() => ensureMinPoolSize(pool), 10);\n}\n\nfunction connectionIsStale(pool, connection) {\n  const serviceId = connection.serviceId;\n\n  if (pool.loadBalanced && serviceId) {\n    const sid = serviceId.toHexString();\n    const generation = pool.serviceGenerations.get(sid);\n    return connection.generation !== generation;\n  }\n\n  return connection.generation !== pool[kGeneration];\n}\n\nfunction connectionIsIdle(pool, connection) {\n  return !!(pool.options.maxIdleTimeMS && connection.idleTime > pool.options.maxIdleTimeMS);\n}\n\nfunction createConnection(pool, callback) {\n  const connectOptions = { ...pool.options,\n    id: pool[kConnectionCounter].next().value,\n    generation: pool[kGeneration],\n    cancellationToken: pool[kCancellationToken]\n  };\n  pool[kPermits]--;\n  (0, connect_1.connect)(connectOptions, (err, connection) => {\n    if (err || !connection) {\n      pool[kPermits]++;\n      pool[kLogger].debug(`connection attempt failed with error [${JSON.stringify(err)}]`);\n\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n\n      return;\n    } // The pool might have closed since we started trying to create a connection\n\n\n    if (pool.closed) {\n      connection.destroy({\n        force: true\n      });\n      return;\n    } // forward all events from the connection to the pool\n\n\n    for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n      connection.on(event, e => pool.emit(event, e));\n    }\n\n    pool.emit(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(pool, connection));\n\n    if (pool.loadBalanced) {\n      connection.on(connection_1.Connection.PINNED, pinType => pool[kMetrics].markPinned(pinType));\n      connection.on(connection_1.Connection.UNPINNED, pinType => pool[kMetrics].markUnpinned(pinType));\n      const serviceId = connection.serviceId;\n\n      if (serviceId) {\n        let generation;\n        const sid = serviceId.toHexString();\n\n        if (generation = pool.serviceGenerations.get(sid)) {\n          connection.generation = generation;\n        } else {\n          pool.serviceGenerations.set(sid, 0);\n          connection.generation = 0;\n        }\n      }\n    }\n\n    connection.markAvailable();\n    pool.emit(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(pool, connection)); // if a callback has been provided, check out the connection immediately\n\n    if (typeof callback === 'function') {\n      callback(undefined, connection);\n      return;\n    } // otherwise add it to the pool for later acquisition, and try to process the wait queue\n\n\n    pool[kConnections].push(connection);\n    process.nextTick(processWaitQueue, pool);\n  });\n}\n\nfunction destroyConnection(pool, connection, reason) {\n  pool.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(pool, connection, reason)); // allow more connections to be created\n\n  pool[kPermits]++; // destroy the connection\n\n  process.nextTick(() => connection.destroy());\n}\n\nfunction processWaitQueue(pool) {\n  if (pool.closed || pool[kProcessingWaitQueue]) {\n    return;\n  }\n\n  pool[kProcessingWaitQueue] = true;\n\n  while (pool.waitQueueSize) {\n    const waitQueueMember = pool[kWaitQueue].peekFront();\n\n    if (!waitQueueMember) {\n      pool[kWaitQueue].shift();\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      pool[kWaitQueue].shift();\n      continue;\n    }\n\n    if (!pool.availableConnectionCount) {\n      break;\n    }\n\n    const connection = pool[kConnections].shift();\n\n    if (!connection) {\n      break;\n    }\n\n    const isStale = connectionIsStale(pool, connection);\n    const isIdle = connectionIsIdle(pool, connection);\n\n    if (!isStale && !isIdle && !connection.closed) {\n      pool.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(pool, connection));\n\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      pool[kWaitQueue].shift();\n      waitQueueMember.callback(undefined, connection);\n    } else {\n      const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n      destroyConnection(pool, connection, reason);\n    }\n  }\n\n  const maxPoolSize = pool.options.maxPoolSize;\n\n  if (pool.waitQueueSize && (maxPoolSize <= 0 || pool.totalConnectionCount < maxPoolSize)) {\n    createConnection(pool, (err, connection) => {\n      const waitQueueMember = pool[kWaitQueue].shift();\n\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        if (!err && connection) {\n          pool[kConnections].push(connection);\n        }\n\n        pool[kProcessingWaitQueue] = false;\n        return;\n      }\n\n      if (err) {\n        pool.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(pool, err));\n      } else if (connection) {\n        pool.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(pool, connection));\n      }\n\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      waitQueueMember.callback(err, connection);\n      pool[kProcessingWaitQueue] = false;\n      process.nextTick(() => processWaitQueue(pool));\n    });\n  } else {\n    pool[kProcessingWaitQueue] = false;\n  }\n}","map":{"version":3,"mappings":"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","names":["kLogger","Symbol","kConnections","kPermits","kMinPoolSizeTimer","kGeneration","kServiceGenerations","kConnectionCounter","kCancellationToken","kWaitQueue","kCancelled","kMetrics","kCheckedOut","kProcessingWaitQueue","ConnectionPool","mongo_types_1","constructor","options","closed","Object","freeze","connectionType","connection_1","maxPoolSize","_a","minPoolSize","_b","maxIdleTimeMS","_c","waitQueueTimeoutMS","_d","autoEncrypter","metadata","error_1","logger_1","Denque","undefined","Map","setMaxListeners","Infinity","metrics_1","process","nextTick","emit","CONNECTION_POOL_CREATED","connection_pool_events_1","ensureMinPoolSize","address","hostAddress","toString","generation","totalConnectionCount","length","availableConnectionCount","waitQueueSize","loadBalanced","serviceGenerations","currentCheckedOutCount","waitQueueErrorMetrics","info","checkOut","callback","CONNECTION_CHECK_OUT_STARTED","CONNECTION_CHECK_OUT_FAILED","errors_1","waitQueueMember","timer","setTimeout","push","processWaitQueue","checkIn","connection","poolClosed","stale","connectionIsStale","willDestroy","markAvailable","unshift","CONNECTION_CHECKED_IN","reason","destroyConnection","clear","serviceId","sid","toHexString","get","set","close","_options","_cb","assign","force","pop","clearTimeout","minPoolSizeTimer","return","toArray","conn","cb","CONNECTION_CLOSED","destroy","err","CONNECTION_POOL_CLOSED","withConnection","fn","fnErr","result","exports","constants_1","pool","i","createConnection","connectionIsIdle","idleTime","connectOptions","id","next","value","cancellationToken","debug","JSON","stringify","event","CLUSTER_TIME_RECEIVED","on","e","CONNECTION_CREATED","PINNED","pinType","markPinned","UNPINNED","markUnpinned","CONNECTION_READY","peekFront","shift","isStale","isIdle","CONNECTION_CHECKED_OUT"],"sources":["B:\\web_project_react\\web_car_react\\node_modules\\mongodb\\src\\cmap\\connection_pool.ts"],"sourcesContent":["import Denque = require('denque');\nimport type { ObjectId } from '../bson';\nimport {\n  APM_EVENTS,\n  CONNECTION_CHECK_OUT_FAILED,\n  CONNECTION_CHECK_OUT_STARTED,\n  CONNECTION_CHECKED_IN,\n  CONNECTION_CHECKED_OUT,\n  CONNECTION_CLOSED,\n  CONNECTION_CREATED,\n  CONNECTION_POOL_CLEARED,\n  CONNECTION_POOL_CLOSED,\n  CONNECTION_POOL_CREATED,\n  CONNECTION_READY\n} from '../constants';\nimport { MongoError, MongoInvalidArgumentError, MongoRuntimeError } from '../error';\nimport { Logger } from '../logger';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport { Callback, eachAsync, makeCounter } from '../utils';\nimport { connect } from './connect';\nimport { Connection, ConnectionEvents, ConnectionOptions } from './connection';\nimport {\n  ConnectionCheckedInEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionPoolClearedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionPoolCreatedEvent,\n  ConnectionReadyEvent\n} from './connection_pool_events';\nimport { PoolClosedError, WaitQueueTimeoutError } from './errors';\nimport { ConnectionPoolMetrics } from './metrics';\n\n/** @internal */\nconst kLogger = Symbol('logger');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPermits = Symbol('permits');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n\n/** @public */\nexport interface ConnectionPoolOptions extends Omit<ConnectionOptions, 'id' | 'generation'> {\n  /** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections. */\n  maxPoolSize: number;\n  /** The minimum number of connections that MUST exist at any moment in a single connection pool. */\n  minPoolSize: number;\n  /** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. */\n  maxIdleTimeMS: number;\n  /** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit. */\n  waitQueueTimeoutMS: number;\n  /** If we are in load balancer mode. */\n  loadBalanced: boolean;\n}\n\n/** @internal */\nexport interface WaitQueueMember {\n  callback: Callback<Connection>;\n  timer?: NodeJS.Timeout;\n  [kCancelled]?: boolean;\n}\n\n/** @public */\nexport interface CloseOptions {\n  force?: boolean;\n}\n\n/** @public */\nexport type ConnectionPoolEvents = {\n  connectionPoolCreated(event: ConnectionPoolCreatedEvent): void;\n  connectionPoolClosed(event: ConnectionPoolClosedEvent): void;\n  connectionPoolCleared(event: ConnectionPoolClearedEvent): void;\n  connectionCreated(event: ConnectionCreatedEvent): void;\n  connectionReady(event: ConnectionReadyEvent): void;\n  connectionClosed(event: ConnectionClosedEvent): void;\n  connectionCheckOutStarted(event: ConnectionCheckOutStartedEvent): void;\n  connectionCheckOutFailed(event: ConnectionCheckOutFailedEvent): void;\n  connectionCheckedOut(event: ConnectionCheckedOutEvent): void;\n  connectionCheckedIn(event: ConnectionCheckedInEvent): void;\n} & Omit<ConnectionEvents, 'close' | 'message'>;\n\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nexport class ConnectionPool extends TypedEventEmitter<ConnectionPoolEvents> {\n  closed: boolean;\n  options: Readonly<ConnectionPoolOptions>;\n  /** @internal */\n  [kLogger]: Logger;\n  /** @internal */\n  [kConnections]: Denque<Connection>;\n  /**\n   * An integer expressing how many total connections are permitted\n   * @internal\n   */\n  [kPermits]: number;\n  /** @internal */\n  [kMinPoolSizeTimer]?: NodeJS.Timeout;\n  /**\n   * An integer representing the SDAM generation of the pool\n   * @internal\n   */\n  [kGeneration]: number;\n  /** A map of generations to service ids\n   * @internal\n   */\n  [kServiceGenerations]: Map<string, number>;\n  /** @internal */\n  [kConnectionCounter]: Generator<number>;\n  /** @internal */\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kWaitQueue]: Denque<WaitQueueMember>;\n  /** @internal */\n  [kMetrics]: ConnectionPoolMetrics;\n  /** @internal */\n  [kCheckedOut]: number;\n  /** @internal */\n  [kProcessingWaitQueue]: boolean;\n\n  /**\n   * Emitted when the connection pool is created.\n   * @event\n   */\n  static readonly CONNECTION_POOL_CREATED = CONNECTION_POOL_CREATED;\n  /**\n   * Emitted once when the connection pool is closed\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLOSED = CONNECTION_POOL_CLOSED;\n  /**\n   * Emitted each time the connection pool is cleared and it's generation incremented\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLEARED = CONNECTION_POOL_CLEARED;\n  /**\n   * Emitted when a connection is created.\n   * @event\n   */\n  static readonly CONNECTION_CREATED = CONNECTION_CREATED;\n  /**\n   * Emitted when a connection becomes established, and is ready to use\n   * @event\n   */\n  static readonly CONNECTION_READY = CONNECTION_READY;\n  /**\n   * Emitted when a connection is closed\n   * @event\n   */\n  static readonly CONNECTION_CLOSED = CONNECTION_CLOSED;\n  /**\n   * Emitted when an attempt to check out a connection begins\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_STARTED = CONNECTION_CHECK_OUT_STARTED;\n  /**\n   * Emitted when an attempt to check out a connection fails\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_FAILED = CONNECTION_CHECK_OUT_FAILED;\n  /**\n   * Emitted each time a connection is successfully checked out of the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_OUT = CONNECTION_CHECKED_OUT;\n  /**\n   * Emitted each time a connection is successfully checked into the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_IN = CONNECTION_CHECKED_IN;\n\n  /** @internal */\n  constructor(options: ConnectionPoolOptions) {\n    super();\n\n    this.closed = false;\n    this.options = Object.freeze({\n      ...options,\n      connectionType: Connection,\n      maxPoolSize: options.maxPoolSize ?? 100,\n      minPoolSize: options.minPoolSize ?? 0,\n      maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n      waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new MongoInvalidArgumentError(\n        'Connection pool minimum size must not be greater than maximum pool size'\n      );\n    }\n\n    this[kLogger] = new Logger('ConnectionPool');\n    this[kConnections] = new Denque();\n    this[kPermits] = this.options.maxPoolSize;\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = makeCounter(1);\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new Denque();\n    this[kMetrics] = new ConnectionPoolMetrics();\n    this[kCheckedOut] = 0;\n    this[kProcessingWaitQueue] = false;\n\n    process.nextTick(() => {\n      this.emit(ConnectionPool.CONNECTION_POOL_CREATED, new ConnectionPoolCreatedEvent(this));\n      ensureMinPoolSize(this);\n    });\n  }\n\n  /** The address of the endpoint the pool is connected to */\n  get address(): string {\n    return this.options.hostAddress.toString();\n  }\n\n  /** An integer representing the SDAM generation of the pool */\n  get generation(): number {\n    return this[kGeneration];\n  }\n\n  /** An integer expressing how many total connections (active + in use) the pool currently has */\n  get totalConnectionCount(): number {\n    return this[kConnections].length + (this.options.maxPoolSize - this[kPermits]);\n  }\n\n  /** An integer expressing how many connections are currently available in the pool. */\n  get availableConnectionCount(): number {\n    return this[kConnections].length;\n  }\n\n  get waitQueueSize(): number {\n    return this[kWaitQueue].length;\n  }\n\n  get loadBalanced(): boolean {\n    return this.options.loadBalanced;\n  }\n\n  get serviceGenerations(): Map<string, number> {\n    return this[kServiceGenerations];\n  }\n\n  get currentCheckedOutCount(): number {\n    return this[kCheckedOut];\n  }\n\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n  private waitQueueErrorMetrics(): string {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n  checkOut(callback: Callback<Connection>): void {\n    this.emit(\n      ConnectionPool.CONNECTION_CHECK_OUT_STARTED,\n      new ConnectionCheckOutStartedEvent(this)\n    );\n\n    if (this.closed) {\n      this.emit(\n        ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n        new ConnectionCheckOutFailedEvent(this, 'poolClosed')\n      );\n      callback(new PoolClosedError(this));\n      return;\n    }\n\n    const waitQueueMember: WaitQueueMember = { callback };\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n    if (waitQueueTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n\n        this.emit(\n          ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n          new ConnectionCheckOutFailedEvent(this, 'timeout')\n        );\n        waitQueueMember.callback(\n          new WaitQueueTimeoutError(\n            this.loadBalanced\n              ? this.waitQueueErrorMetrics()\n              : 'Timed out while checking out a connection from connection pool',\n            this.address\n          )\n        );\n      }, waitQueueTimeoutMS);\n    }\n\n    this[kCheckedOut] = this[kCheckedOut] + 1;\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(processWaitQueue, this);\n  }\n\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n  checkIn(connection: Connection): void {\n    const poolClosed = this.closed;\n    const stale = connectionIsStale(this, connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n\n    this[kCheckedOut] = this[kCheckedOut] - 1;\n    this.emit(ConnectionPool.CONNECTION_CHECKED_IN, new ConnectionCheckedInEvent(this, connection));\n\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      destroyConnection(this, connection, reason);\n    }\n\n    process.nextTick(processWaitQueue, this);\n  }\n\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n  clear(serviceId?: ObjectId): void {\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n      if (generation == null) {\n        // TODO(NODE-3483)\n        throw new MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n    } else {\n      this[kGeneration] += 1;\n    }\n\n    this.emit('connectionPoolCleared', new ConnectionPoolClearedEvent(this, serviceId));\n  }\n\n  /** Close the pool */\n  close(callback: Callback<void>): void;\n  close(options: CloseOptions, callback: Callback<void>): void;\n  close(_options?: CloseOptions | Callback<void>, _cb?: Callback<void>): void {\n    let options = _options as CloseOptions;\n    const callback = (_cb ?? _options) as Callback<void>;\n    if (typeof options === 'function') {\n      options = {};\n    }\n\n    options = Object.assign({ force: false }, options);\n    if (this.closed) {\n      return callback();\n    }\n\n    // immediately cancel any in-flight connections\n    this[kCancellationToken].emit('cancel');\n\n    // drain the wait queue\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].pop();\n      if (waitQueueMember) {\n        if (waitQueueMember.timer) {\n          clearTimeout(waitQueueMember.timer);\n        }\n        if (!waitQueueMember[kCancelled]) {\n          // TODO(NODE-3483): Replace with MongoConnectionPoolClosedError\n          waitQueueMember.callback(new MongoRuntimeError('Connection pool closed'));\n        }\n      }\n    }\n\n    // clear the min pool size timer\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n    if (minPoolSizeTimer) {\n      clearTimeout(minPoolSizeTimer);\n    }\n\n    // end the connection counter\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    }\n\n    // mark the pool as closed immediately\n    this.closed = true;\n    eachAsync<Connection>(\n      this[kConnections].toArray(),\n      (conn, cb) => {\n        this.emit(\n          ConnectionPool.CONNECTION_CLOSED,\n          new ConnectionClosedEvent(this, conn, 'poolClosed')\n        );\n        conn.destroy(options, cb);\n      },\n      err => {\n        this[kConnections].clear();\n        this.emit(ConnectionPool.CONNECTION_POOL_CLOSED, new ConnectionPoolClosedEvent(this));\n        callback(err);\n      }\n    );\n  }\n\n  /**\n   * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n   * has completed by calling back.\n   *\n   * NOTE: please note the required signature of `fn`\n   *\n   * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n   *   In these cases we pass the connection in to this method to ensure it is used and a new\n   *   connection is not checked out.\n   *\n   * @param conn - A pinned connection for use in load balancing mode.\n   * @param fn - A function which operates on a managed connection\n   * @param callback - The original callback\n   */\n  withConnection(\n    conn: Connection | undefined,\n    fn: WithConnectionCallback,\n    callback?: Callback<Connection>\n  ): void {\n    if (conn) {\n      // use the provided connection, and do _not_ check it in after execution\n      fn(undefined, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n      });\n\n      return;\n    }\n\n    this.checkOut((err, conn) => {\n      // don't callback with `err` here, we might want to act upon it inside `fn`\n      fn(err as MongoError, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n\n        if (conn) {\n          this.checkIn(conn);\n        }\n      });\n    });\n  }\n}\n\nfunction ensureMinPoolSize(pool: ConnectionPool) {\n  if (pool.closed || pool.options.minPoolSize === 0) {\n    return;\n  }\n\n  const minPoolSize = pool.options.minPoolSize;\n  for (let i = pool.totalConnectionCount; i < minPoolSize; ++i) {\n    createConnection(pool);\n  }\n\n  pool[kMinPoolSizeTimer] = setTimeout(() => ensureMinPoolSize(pool), 10);\n}\n\nfunction connectionIsStale(pool: ConnectionPool, connection: Connection) {\n  const serviceId = connection.serviceId;\n  if (pool.loadBalanced && serviceId) {\n    const sid = serviceId.toHexString();\n    const generation = pool.serviceGenerations.get(sid);\n    return connection.generation !== generation;\n  }\n\n  return connection.generation !== pool[kGeneration];\n}\n\nfunction connectionIsIdle(pool: ConnectionPool, connection: Connection) {\n  return !!(pool.options.maxIdleTimeMS && connection.idleTime > pool.options.maxIdleTimeMS);\n}\n\nfunction createConnection(pool: ConnectionPool, callback?: Callback<Connection>) {\n  const connectOptions: ConnectionOptions = {\n    ...pool.options,\n    id: pool[kConnectionCounter].next().value,\n    generation: pool[kGeneration],\n    cancellationToken: pool[kCancellationToken]\n  };\n\n  pool[kPermits]--;\n  connect(connectOptions, (err, connection) => {\n    if (err || !connection) {\n      pool[kPermits]++;\n      pool[kLogger].debug(`connection attempt failed with error [${JSON.stringify(err)}]`);\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n\n      return;\n    }\n\n    // The pool might have closed since we started trying to create a connection\n    if (pool.closed) {\n      connection.destroy({ force: true });\n      return;\n    }\n\n    // forward all events from the connection to the pool\n    for (const event of [...APM_EVENTS, Connection.CLUSTER_TIME_RECEIVED]) {\n      connection.on(event, (e: any) => pool.emit(event, e));\n    }\n\n    pool.emit(ConnectionPool.CONNECTION_CREATED, new ConnectionCreatedEvent(pool, connection));\n\n    if (pool.loadBalanced) {\n      connection.on(Connection.PINNED, pinType => pool[kMetrics].markPinned(pinType));\n      connection.on(Connection.UNPINNED, pinType => pool[kMetrics].markUnpinned(pinType));\n\n      const serviceId = connection.serviceId;\n      if (serviceId) {\n        let generation;\n        const sid = serviceId.toHexString();\n        if ((generation = pool.serviceGenerations.get(sid))) {\n          connection.generation = generation;\n        } else {\n          pool.serviceGenerations.set(sid, 0);\n          connection.generation = 0;\n        }\n      }\n    }\n\n    connection.markAvailable();\n    pool.emit(ConnectionPool.CONNECTION_READY, new ConnectionReadyEvent(pool, connection));\n\n    // if a callback has been provided, check out the connection immediately\n    if (typeof callback === 'function') {\n      callback(undefined, connection);\n      return;\n    }\n\n    // otherwise add it to the pool for later acquisition, and try to process the wait queue\n    pool[kConnections].push(connection);\n    process.nextTick(processWaitQueue, pool);\n  });\n}\n\nfunction destroyConnection(pool: ConnectionPool, connection: Connection, reason: string) {\n  pool.emit(ConnectionPool.CONNECTION_CLOSED, new ConnectionClosedEvent(pool, connection, reason));\n\n  // allow more connections to be created\n  pool[kPermits]++;\n\n  // destroy the connection\n  process.nextTick(() => connection.destroy());\n}\n\nfunction processWaitQueue(pool: ConnectionPool) {\n  if (pool.closed || pool[kProcessingWaitQueue]) {\n    return;\n  }\n\n  pool[kProcessingWaitQueue] = true;\n  while (pool.waitQueueSize) {\n    const waitQueueMember = pool[kWaitQueue].peekFront();\n    if (!waitQueueMember) {\n      pool[kWaitQueue].shift();\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      pool[kWaitQueue].shift();\n      continue;\n    }\n\n    if (!pool.availableConnectionCount) {\n      break;\n    }\n\n    const connection = pool[kConnections].shift();\n    if (!connection) {\n      break;\n    }\n\n    const isStale = connectionIsStale(pool, connection);\n    const isIdle = connectionIsIdle(pool, connection);\n    if (!isStale && !isIdle && !connection.closed) {\n      pool.emit(\n        ConnectionPool.CONNECTION_CHECKED_OUT,\n        new ConnectionCheckedOutEvent(pool, connection)\n      );\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      pool[kWaitQueue].shift();\n      waitQueueMember.callback(undefined, connection);\n    } else {\n      const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n      destroyConnection(pool, connection, reason);\n    }\n  }\n\n  const maxPoolSize = pool.options.maxPoolSize;\n  if (pool.waitQueueSize && (maxPoolSize <= 0 || pool.totalConnectionCount < maxPoolSize)) {\n    createConnection(pool, (err, connection) => {\n      const waitQueueMember = pool[kWaitQueue].shift();\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        if (!err && connection) {\n          pool[kConnections].push(connection);\n        }\n\n        pool[kProcessingWaitQueue] = false;\n        return;\n      }\n\n      if (err) {\n        pool.emit(\n          ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n          new ConnectionCheckOutFailedEvent(pool, err)\n        );\n      } else if (connection) {\n        pool.emit(\n          ConnectionPool.CONNECTION_CHECKED_OUT,\n          new ConnectionCheckedOutEvent(pool, connection)\n        );\n      }\n\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n      waitQueueMember.callback(err, connection);\n      pool[kProcessingWaitQueue] = false;\n      process.nextTick(() => processWaitQueue(pool));\n    });\n  } else {\n    pool[kProcessingWaitQueue] = false;\n  }\n}\n\n/**\n * A callback provided to `withConnection`\n * @internal\n *\n * @param error - An error instance representing the error during the execution.\n * @param connection - The managed connection which was checked out of the pool.\n * @param callback - A function to call back after connection management is complete\n */\nexport type WithConnectionCallback = (\n  error: MongoError | undefined,\n  connection: Connection | undefined,\n  callback: Callback<Connection>\n) => void;\n"]},"metadata":{},"sourceType":"script"}