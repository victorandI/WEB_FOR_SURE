{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindOperation = void 0;\n\nconst shared_1 = require(\"../cmap/wire_protocol/shared\");\n\nconst error_1 = require(\"../error\");\n\nconst read_concern_1 = require(\"../read_concern\");\n\nconst sort_1 = require(\"../sort\");\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n/** @internal */\n\nclass FindOperation extends command_1.CommandOperation {\n  constructor(collection, ns) {\n    let filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(collection, options);\n    this.options = options;\n    this.ns = ns;\n\n    if (typeof filter !== 'object' || Array.isArray(filter)) {\n      throw new error_1.MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');\n    } // If the filter is a buffer, validate that is a valid BSON document\n\n\n    if (Buffer.isBuffer(filter)) {\n      const objectSize = filter[0] | filter[1] << 8 | filter[2] << 16 | filter[3] << 24;\n\n      if (objectSize !== filter.length) {\n        throw new error_1.MongoInvalidArgumentError(`Query filter raw message size does not match message header size [${filter.length}] != [${objectSize}]`);\n      }\n    } // special case passing in an ObjectId as a filter\n\n\n    this.filter = filter != null && filter._bsontype === 'ObjectID' ? {\n      _id: filter\n    } : filter;\n  }\n\n  execute(server, session, callback) {\n    this.server = server;\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    const options = this.options;\n\n    if (options.allowDiskUse != null && serverWireVersion < 4) {\n      callback(new error_1.MongoCompatibilityError('Option \"allowDiskUse\" is not supported on MongoDB < 3.2'));\n      return;\n    }\n\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      callback(new error_1.MongoCompatibilityError(`Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`));\n      return;\n    }\n\n    if (serverWireVersion < 4) {\n      if (this.readConcern && this.readConcern.level !== 'local') {\n        callback(new error_1.MongoCompatibilityError(`Server find command does not support a readConcern level of ${this.readConcern.level}`));\n        return;\n      }\n\n      const findCommand = makeLegacyFindCommand(this.ns, this.filter, options);\n\n      if ((0, shared_1.isSharded)(server) && this.readPreference) {\n        findCommand.$readPreference = this.readPreference.toJSON();\n      }\n\n      server.query(this.ns, findCommand, { ...this.options,\n        ...this.bsonOptions,\n        documentsReturnedIn: 'firstBatch',\n        readPreference: this.readPreference\n      }, callback);\n      return;\n    }\n\n    let findCommand = makeFindCommand(this.ns, this.filter, options);\n\n    if (this.explain) {\n      findCommand = (0, utils_1.decorateWithExplain)(findCommand, this.explain);\n    }\n\n    server.command(this.ns, findCommand, { ...this.options,\n      ...this.bsonOptions,\n      documentsReturnedIn: 'firstBatch',\n      session\n    }, callback);\n  }\n\n}\n\nexports.FindOperation = FindOperation;\n\nfunction makeFindCommand(ns, filter, options) {\n  const findCommand = {\n    find: ns.collection,\n    filter\n  };\n\n  if (options.sort) {\n    findCommand.sort = (0, sort_1.formatSort)(options.sort);\n  }\n\n  if (options.projection) {\n    let projection = options.projection;\n\n    if (projection && Array.isArray(projection)) {\n      projection = projection.length ? projection.reduce((result, field) => {\n        result[field] = 1;\n        return result;\n      }, {}) : {\n        _id: 1\n      };\n    }\n\n    findCommand.projection = projection;\n  }\n\n  if (options.hint) {\n    findCommand.hint = (0, utils_1.normalizeHintField)(options.hint);\n  }\n\n  if (typeof options.skip === 'number') {\n    findCommand.skip = options.skip;\n  }\n\n  if (typeof options.limit === 'number') {\n    if (options.limit < 0) {\n      findCommand.limit = -options.limit;\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.limit = options.limit;\n    }\n  }\n\n  if (typeof options.batchSize === 'number') {\n    if (options.batchSize < 0) {\n      if (options.limit && options.limit !== 0 && Math.abs(options.batchSize) < Math.abs(options.limit)) {\n        findCommand.limit = -options.batchSize;\n      }\n\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.batchSize = options.batchSize;\n    }\n  }\n\n  if (typeof options.singleBatch === 'boolean') {\n    findCommand.singleBatch = options.singleBatch;\n  } // we check for undefined specifically here to allow falsy values\n  // eslint-disable-next-line no-restricted-syntax\n\n\n  if (options.comment !== undefined) {\n    findCommand.comment = options.comment;\n  }\n\n  if (typeof options.maxTimeMS === 'number') {\n    findCommand.maxTimeMS = options.maxTimeMS;\n  }\n\n  const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n\n  if (readConcern) {\n    findCommand.readConcern = readConcern.toJSON();\n  }\n\n  if (options.max) {\n    findCommand.max = options.max;\n  }\n\n  if (options.min) {\n    findCommand.min = options.min;\n  }\n\n  if (typeof options.returnKey === 'boolean') {\n    findCommand.returnKey = options.returnKey;\n  }\n\n  if (typeof options.showRecordId === 'boolean') {\n    findCommand.showRecordId = options.showRecordId;\n  }\n\n  if (typeof options.tailable === 'boolean') {\n    findCommand.tailable = options.tailable;\n  }\n\n  if (typeof options.timeout === 'boolean') {\n    findCommand.noCursorTimeout = !options.timeout;\n  } else if (typeof options.noCursorTimeout === 'boolean') {\n    findCommand.noCursorTimeout = options.noCursorTimeout;\n  }\n\n  if (typeof options.awaitData === 'boolean') {\n    findCommand.awaitData = options.awaitData;\n  }\n\n  if (typeof options.allowPartialResults === 'boolean') {\n    findCommand.allowPartialResults = options.allowPartialResults;\n  }\n\n  if (options.collation) {\n    findCommand.collation = options.collation;\n  }\n\n  if (typeof options.allowDiskUse === 'boolean') {\n    findCommand.allowDiskUse = options.allowDiskUse;\n  }\n\n  if (options.let) {\n    findCommand.let = options.let;\n  }\n\n  return findCommand;\n}\n\nfunction makeLegacyFindCommand(ns, filter, options) {\n  const findCommand = {\n    $query: filter\n  };\n\n  if (options.sort) {\n    findCommand.$orderby = (0, sort_1.formatSort)(options.sort);\n  }\n\n  if (options.hint) {\n    findCommand.$hint = (0, utils_1.normalizeHintField)(options.hint);\n  }\n\n  if (typeof options.returnKey === 'boolean') {\n    findCommand.$returnKey = options.returnKey;\n  }\n\n  if (options.max) {\n    findCommand.$max = options.max;\n  }\n\n  if (options.min) {\n    findCommand.$min = options.min;\n  }\n\n  if (typeof options.showRecordId === 'boolean') {\n    findCommand.$showDiskLoc = options.showRecordId;\n  }\n\n  if (options.comment) {\n    findCommand.$comment = options.comment;\n  }\n\n  if (typeof options.maxTimeMS === 'number') {\n    findCommand.$maxTimeMS = options.maxTimeMS;\n  }\n\n  if (options.explain != null) {\n    findCommand.$explain = true;\n  }\n\n  return findCommand;\n}\n\n(0, operation_1.defineAspects)(FindOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.CURSOR_CREATING]);","map":{"version":3,"mappings":"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","names":["SUPPORTS_WRITE_CONCERN_AND_COLLATION","FindOperation","command_1","constructor","collection","ns","filter","options","Array","isArray","error_1","Buffer","isBuffer","objectSize","length","_bsontype","_id","execute","server","session","callback","serverWireVersion","allowDiskUse","collation","name","readConcern","level","findCommand","makeLegacyFindCommand","readPreference","$readPreference","toJSON","query","bsonOptions","documentsReturnedIn","makeFindCommand","explain","command","exports","find","sort","projection","reduce","result","field","hint","skip","limit","singleBatch","batchSize","Math","abs","comment","undefined","maxTimeMS","read_concern_1","fromOptions","max","min","returnKey","showRecordId","tailable","timeout","noCursorTimeout","awaitData","allowPartialResults","let","$query","$orderby","$hint","$returnKey","$max","$min","$showDiskLoc","$comment","$maxTimeMS","$explain","operation_1","READ_OPERATION","RETRYABLE","EXPLAINABLE","CURSOR_CREATING"],"sources":["B:\\web_project_react\\web_car_react\\node_modules\\mongodb\\src\\operations\\find.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { isSharded } from '../cmap/wire_protocol/shared';\nimport type { Collection } from '../collection';\nimport { MongoCompatibilityError, MongoInvalidArgumentError } from '../error';\nimport { ReadConcern } from '../read_concern';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { formatSort, Sort } from '../sort';\nimport {\n  Callback,\n  decorateWithExplain,\n  maxWireVersion,\n  MongoDBNamespace,\n  normalizeHintField\n} from '../utils';\nimport { CollationOptions, CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects, Hint } from './operation';\n\n/**\n * @public\n * @typeParam TSchema - Unused schema definition, deprecated usage, only specify `FindOptions` with no generic\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface FindOptions<TSchema extends Document = Document> extends CommandOperationOptions {\n  /** Sets the limit of documents returned in the query. */\n  limit?: number;\n  /** Set to sort the documents coming back from the query. Array of indexes, `[['a', 1]]` etc. */\n  sort?: Sort;\n  /** The fields to return in the query. Object of fields to either include or exclude (one of, not both), `{'a':1, 'b': 1}` **or** `{'a': 0, 'b': 0}` */\n  projection?: Document;\n  /** Set to skip N documents ahead in your query (useful for pagination). */\n  skip?: number;\n  /** Tell the query to use specific indexes in the query. Object of indexes to use, `{'_id':1}` */\n  hint?: Hint;\n  /** Specify if the cursor can timeout. */\n  timeout?: boolean;\n  /** Specify if the cursor is tailable. */\n  tailable?: boolean;\n  /** Specify if the cursor is a tailable-await cursor. Requires `tailable` to be true */\n  awaitData?: boolean;\n  /** Set the batchSize for the getMoreCommand when iterating over the query results. */\n  batchSize?: number;\n  /** If true, returns only the index keys in the resulting documents. */\n  returnKey?: boolean;\n  /** The inclusive lower bound for a specific index */\n  min?: Document;\n  /** The exclusive upper bound for a specific index */\n  max?: Document;\n  /** Number of milliseconds to wait before aborting the query. */\n  maxTimeMS?: number;\n  /** The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. Requires `tailable` and `awaitData` to be true */\n  maxAwaitTimeMS?: number;\n  /** The server normally times out idle cursors after an inactivity period (10 minutes) to prevent excess memory use. Set this option to prevent that. */\n  noCursorTimeout?: boolean;\n  /** Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields). */\n  collation?: CollationOptions;\n  /** Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher) */\n  allowDiskUse?: boolean;\n  /** Determines whether to close the cursor after the first batch. Defaults to false. */\n  singleBatch?: boolean;\n  /** For queries against a sharded collection, allows the command (or subsequent getMore commands) to return partial results, rather than an error, if one or more queried shards are unavailable. */\n  allowPartialResults?: boolean;\n  /** Determines whether to return the record identifier for each document. If true, adds a field $recordId to the returned documents. */\n  showRecordId?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n\n/** @internal */\nexport class FindOperation extends CommandOperation<Document> {\n  override options: FindOptions;\n  filter: Document;\n\n  constructor(\n    collection: Collection | undefined,\n    ns: MongoDBNamespace,\n    filter: Document = {},\n    options: FindOptions = {}\n  ) {\n    super(collection, options);\n\n    this.options = options;\n    this.ns = ns;\n\n    if (typeof filter !== 'object' || Array.isArray(filter)) {\n      throw new MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');\n    }\n\n    // If the filter is a buffer, validate that is a valid BSON document\n    if (Buffer.isBuffer(filter)) {\n      const objectSize = filter[0] | (filter[1] << 8) | (filter[2] << 16) | (filter[3] << 24);\n      if (objectSize !== filter.length) {\n        throw new MongoInvalidArgumentError(\n          `Query filter raw message size does not match message header size [${filter.length}] != [${objectSize}]`\n        );\n      }\n    }\n\n    // special case passing in an ObjectId as a filter\n    this.filter = filter != null && filter._bsontype === 'ObjectID' ? { _id: filter } : filter;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    this.server = server;\n\n    const serverWireVersion = maxWireVersion(server);\n    const options = this.options;\n    if (options.allowDiskUse != null && serverWireVersion < 4) {\n      callback(\n        new MongoCompatibilityError('Option \"allowDiskUse\" is not supported on MongoDB < 3.2')\n      );\n      return;\n    }\n\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      callback(\n        new MongoCompatibilityError(\n          `Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`\n        )\n      );\n\n      return;\n    }\n\n    if (serverWireVersion < 4) {\n      if (this.readConcern && this.readConcern.level !== 'local') {\n        callback(\n          new MongoCompatibilityError(\n            `Server find command does not support a readConcern level of ${this.readConcern.level}`\n          )\n        );\n\n        return;\n      }\n\n      const findCommand = makeLegacyFindCommand(this.ns, this.filter, options);\n      if (isSharded(server) && this.readPreference) {\n        findCommand.$readPreference = this.readPreference.toJSON();\n      }\n\n      server.query(\n        this.ns,\n        findCommand,\n        {\n          ...this.options,\n          ...this.bsonOptions,\n          documentsReturnedIn: 'firstBatch',\n          readPreference: this.readPreference\n        },\n        callback\n      );\n\n      return;\n    }\n\n    let findCommand = makeFindCommand(this.ns, this.filter, options);\n    if (this.explain) {\n      findCommand = decorateWithExplain(findCommand, this.explain);\n    }\n\n    server.command(\n      this.ns,\n      findCommand,\n      {\n        ...this.options,\n        ...this.bsonOptions,\n        documentsReturnedIn: 'firstBatch',\n        session\n      },\n      callback\n    );\n  }\n}\n\nfunction makeFindCommand(ns: MongoDBNamespace, filter: Document, options: FindOptions): Document {\n  const findCommand: Document = {\n    find: ns.collection,\n    filter\n  };\n\n  if (options.sort) {\n    findCommand.sort = formatSort(options.sort);\n  }\n\n  if (options.projection) {\n    let projection = options.projection;\n    if (projection && Array.isArray(projection)) {\n      projection = projection.length\n        ? projection.reduce((result, field) => {\n            result[field] = 1;\n            return result;\n          }, {})\n        : { _id: 1 };\n    }\n\n    findCommand.projection = projection;\n  }\n\n  if (options.hint) {\n    findCommand.hint = normalizeHintField(options.hint);\n  }\n\n  if (typeof options.skip === 'number') {\n    findCommand.skip = options.skip;\n  }\n\n  if (typeof options.limit === 'number') {\n    if (options.limit < 0) {\n      findCommand.limit = -options.limit;\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.limit = options.limit;\n    }\n  }\n\n  if (typeof options.batchSize === 'number') {\n    if (options.batchSize < 0) {\n      if (\n        options.limit &&\n        options.limit !== 0 &&\n        Math.abs(options.batchSize) < Math.abs(options.limit)\n      ) {\n        findCommand.limit = -options.batchSize;\n      }\n\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.batchSize = options.batchSize;\n    }\n  }\n\n  if (typeof options.singleBatch === 'boolean') {\n    findCommand.singleBatch = options.singleBatch;\n  }\n\n  // we check for undefined specifically here to allow falsy values\n  // eslint-disable-next-line no-restricted-syntax\n  if (options.comment !== undefined) {\n    findCommand.comment = options.comment;\n  }\n\n  if (typeof options.maxTimeMS === 'number') {\n    findCommand.maxTimeMS = options.maxTimeMS;\n  }\n\n  const readConcern = ReadConcern.fromOptions(options);\n  if (readConcern) {\n    findCommand.readConcern = readConcern.toJSON();\n  }\n\n  if (options.max) {\n    findCommand.max = options.max;\n  }\n\n  if (options.min) {\n    findCommand.min = options.min;\n  }\n\n  if (typeof options.returnKey === 'boolean') {\n    findCommand.returnKey = options.returnKey;\n  }\n\n  if (typeof options.showRecordId === 'boolean') {\n    findCommand.showRecordId = options.showRecordId;\n  }\n\n  if (typeof options.tailable === 'boolean') {\n    findCommand.tailable = options.tailable;\n  }\n\n  if (typeof options.timeout === 'boolean') {\n    findCommand.noCursorTimeout = !options.timeout;\n  } else if (typeof options.noCursorTimeout === 'boolean') {\n    findCommand.noCursorTimeout = options.noCursorTimeout;\n  }\n\n  if (typeof options.awaitData === 'boolean') {\n    findCommand.awaitData = options.awaitData;\n  }\n\n  if (typeof options.allowPartialResults === 'boolean') {\n    findCommand.allowPartialResults = options.allowPartialResults;\n  }\n\n  if (options.collation) {\n    findCommand.collation = options.collation;\n  }\n\n  if (typeof options.allowDiskUse === 'boolean') {\n    findCommand.allowDiskUse = options.allowDiskUse;\n  }\n\n  if (options.let) {\n    findCommand.let = options.let;\n  }\n\n  return findCommand;\n}\n\nfunction makeLegacyFindCommand(\n  ns: MongoDBNamespace,\n  filter: Document,\n  options: FindOptions\n): Document {\n  const findCommand: Document = {\n    $query: filter\n  };\n\n  if (options.sort) {\n    findCommand.$orderby = formatSort(options.sort);\n  }\n\n  if (options.hint) {\n    findCommand.$hint = normalizeHintField(options.hint);\n  }\n\n  if (typeof options.returnKey === 'boolean') {\n    findCommand.$returnKey = options.returnKey;\n  }\n\n  if (options.max) {\n    findCommand.$max = options.max;\n  }\n\n  if (options.min) {\n    findCommand.$min = options.min;\n  }\n\n  if (typeof options.showRecordId === 'boolean') {\n    findCommand.$showDiskLoc = options.showRecordId;\n  }\n\n  if (options.comment) {\n    findCommand.$comment = options.comment;\n  }\n\n  if (typeof options.maxTimeMS === 'number') {\n    findCommand.$maxTimeMS = options.maxTimeMS;\n  }\n\n  if (options.explain != null) {\n    findCommand.$explain = true;\n  }\n\n  return findCommand;\n}\n\ndefineAspects(FindOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXPLAINABLE,\n  Aspect.CURSOR_CREATING\n]);\n"]},"metadata":{},"sourceType":"script"}