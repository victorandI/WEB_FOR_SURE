{"ast":null,"code":"/*!\n * Module dependencies.\n */\n'use strict';\n\nconst MongooseError = require('./mongooseError');\n\nconst allServersUnknown = require('../helpers/topology/allServersUnknown');\n\nconst isAtlas = require('../helpers/topology/isAtlas');\n\nconst isSSLError = require('../helpers/topology/isSSLError');\n/*!\n * ignore\n */\n\n\nconst atlasMessage = 'Could not connect to any servers in your MongoDB Atlas cluster. ' + 'One common reason is that you\\'re trying to access the database from ' + 'an IP that isn\\'t whitelisted. Make sure your current IP address is on your Atlas ' + 'cluster\\'s IP whitelist: https://docs.atlas.mongodb.com/security-whitelist/';\nconst sslMessage = 'Mongoose is connecting with SSL enabled, but the server is ' + 'not accepting SSL connections. Please ensure that the MongoDB server you are ' + 'connecting to is configured to accept SSL connections. Learn more: ' + 'https://mongoosejs.com/docs/tutorials/ssl.html';\n\nclass MongooseServerSelectionError extends MongooseError {\n  /**\n   * MongooseServerSelectionError constructor\n   *\n   * @api private\n   */\n  assimilateError(err) {\n    const reason = err.reason; // Special message for a case that is likely due to IP whitelisting issues.\n\n    const isAtlasWhitelistError = isAtlas(reason) && allServersUnknown(reason) && err.message.indexOf('bad auth') === -1 && err.message.indexOf('Authentication failed') === -1;\n\n    if (isAtlasWhitelistError) {\n      this.message = atlasMessage;\n    } else if (isSSLError(reason)) {\n      this.message = sslMessage;\n    } else {\n      this.message = err.message;\n    }\n\n    for (const key in err) {\n      if (key !== 'name') {\n        this[key] = err[key];\n      }\n    }\n\n    return this;\n  }\n\n}\n\nObject.defineProperty(MongooseServerSelectionError.prototype, 'name', {\n  value: 'MongooseServerSelectionError'\n});\nmodule.exports = MongooseServerSelectionError;","map":{"version":3,"names":["MongooseError","require","allServersUnknown","isAtlas","isSSLError","atlasMessage","sslMessage","MongooseServerSelectionError","assimilateError","err","reason","isAtlasWhitelistError","message","indexOf","key","Object","defineProperty","prototype","value","module","exports"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/error/serverSelection.js"],"sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseError = require('./mongooseError');\nconst allServersUnknown = require('../helpers/topology/allServersUnknown');\nconst isAtlas = require('../helpers/topology/isAtlas');\nconst isSSLError = require('../helpers/topology/isSSLError');\n\n/*!\n * ignore\n */\n\nconst atlasMessage = 'Could not connect to any servers in your MongoDB Atlas cluster. ' +\n  'One common reason is that you\\'re trying to access the database from ' +\n  'an IP that isn\\'t whitelisted. Make sure your current IP address is on your Atlas ' +\n  'cluster\\'s IP whitelist: https://docs.atlas.mongodb.com/security-whitelist/';\n\nconst sslMessage = 'Mongoose is connecting with SSL enabled, but the server is ' +\n  'not accepting SSL connections. Please ensure that the MongoDB server you are ' +\n  'connecting to is configured to accept SSL connections. Learn more: ' +\n  'https://mongoosejs.com/docs/tutorials/ssl.html';\n\nclass MongooseServerSelectionError extends MongooseError {\n  /**\n   * MongooseServerSelectionError constructor\n   *\n   * @api private\n   */\n  assimilateError(err) {\n    const reason = err.reason;\n    // Special message for a case that is likely due to IP whitelisting issues.\n    const isAtlasWhitelistError = isAtlas(reason) &&\n      allServersUnknown(reason) &&\n      err.message.indexOf('bad auth') === -1 &&\n      err.message.indexOf('Authentication failed') === -1;\n\n    if (isAtlasWhitelistError) {\n      this.message = atlasMessage;\n    } else if (isSSLError(reason)) {\n      this.message = sslMessage;\n    } else {\n      this.message = err.message;\n    }\n    for (const key in err) {\n      if (key !== 'name') {\n        this[key] = err[key];\n      }\n    }\n\n    return this;\n  }\n}\n\nObject.defineProperty(MongooseServerSelectionError.prototype, 'name', {\n  value: 'MongooseServerSelectionError'\n});\n\nmodule.exports = MongooseServerSelectionError;\n"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,uCAAD,CAAjC;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,6BAAD,CAAvB;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,gCAAD,CAA1B;AAEA;AACA;AACA;;;AAEA,MAAMI,YAAY,GAAG,qEACnB,uEADmB,GAEnB,oFAFmB,GAGnB,6EAHF;AAKA,MAAMC,UAAU,GAAG,gEACjB,+EADiB,GAEjB,qEAFiB,GAGjB,gDAHF;;AAKA,MAAMC,4BAAN,SAA2CP,aAA3C,CAAyD;EACvD;AACF;AACA;AACA;AACA;EACEQ,eAAe,CAACC,GAAD,EAAM;IACnB,MAAMC,MAAM,GAAGD,GAAG,CAACC,MAAnB,CADmB,CAEnB;;IACA,MAAMC,qBAAqB,GAAGR,OAAO,CAACO,MAAD,CAAP,IAC5BR,iBAAiB,CAACQ,MAAD,CADW,IAE5BD,GAAG,CAACG,OAAJ,CAAYC,OAAZ,CAAoB,UAApB,MAAoC,CAAC,CAFT,IAG5BJ,GAAG,CAACG,OAAJ,CAAYC,OAAZ,CAAoB,uBAApB,MAAiD,CAAC,CAHpD;;IAKA,IAAIF,qBAAJ,EAA2B;MACzB,KAAKC,OAAL,GAAeP,YAAf;IACD,CAFD,MAEO,IAAID,UAAU,CAACM,MAAD,CAAd,EAAwB;MAC7B,KAAKE,OAAL,GAAeN,UAAf;IACD,CAFM,MAEA;MACL,KAAKM,OAAL,GAAeH,GAAG,CAACG,OAAnB;IACD;;IACD,KAAK,MAAME,GAAX,IAAkBL,GAAlB,EAAuB;MACrB,IAAIK,GAAG,KAAK,MAAZ,EAAoB;QAClB,KAAKA,GAAL,IAAYL,GAAG,CAACK,GAAD,CAAf;MACD;IACF;;IAED,OAAO,IAAP;EACD;;AA5BsD;;AA+BzDC,MAAM,CAACC,cAAP,CAAsBT,4BAA4B,CAACU,SAAnD,EAA8D,MAA9D,EAAsE;EACpEC,KAAK,EAAE;AAD6D,CAAtE;AAIAC,MAAM,CAACC,OAAP,GAAiBb,4BAAjB"},"metadata":{},"sourceType":"script"}