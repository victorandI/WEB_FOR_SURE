{"ast":null,"code":"'use strict';\n\nconst MongooseError = require('../../error/mongooseError');\n\nconst setDottedPath = require('../path/setDottedPath');\n\nconst util = require('util');\n/**\n * Given an object that may contain dotted paths, flatten the paths out.\n * For example: `flattenObjectWithDottedPaths({ a: { 'b.c': 42 } })` => `{ a: { b: { c: 42 } } }`\n */\n\n\nmodule.exports = function flattenObjectWithDottedPaths(obj) {\n  if (obj == null || typeof obj !== 'object' || Array.isArray(obj)) {\n    return;\n  } // Avoid Mongoose docs\n\n\n  if (obj.$__) {\n    return;\n  }\n\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    const val = obj[key];\n\n    if (key.indexOf('.') !== -1) {\n      try {\n        delete obj[key];\n        setDottedPath(obj, key, val);\n      } catch (err) {\n        if (!(err instanceof TypeError)) {\n          throw err;\n        }\n\n        throw new MongooseError(`Conflicting dotted paths when setting document path, key: \"${key}\", value: ${util.inspect(val)}`);\n      }\n\n      continue;\n    }\n\n    flattenObjectWithDottedPaths(obj[key]);\n  }\n};","map":{"version":3,"names":["MongooseError","require","setDottedPath","util","module","exports","flattenObjectWithDottedPaths","obj","Array","isArray","$__","keys","Object","key","val","indexOf","err","TypeError","inspect"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/helpers/path/flattenObjectWithDottedPaths.js"],"sourcesContent":["'use strict';\n\nconst MongooseError = require('../../error/mongooseError');\nconst setDottedPath = require('../path/setDottedPath');\nconst util = require('util');\n\n/**\n * Given an object that may contain dotted paths, flatten the paths out.\n * For example: `flattenObjectWithDottedPaths({ a: { 'b.c': 42 } })` => `{ a: { b: { c: 42 } } }`\n */\n\nmodule.exports = function flattenObjectWithDottedPaths(obj) {\n  if (obj == null || typeof obj !== 'object' || Array.isArray(obj)) {\n    return;\n  }\n  // Avoid Mongoose docs\n  if (obj.$__) {\n    return;\n  }\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const val = obj[key];\n    if (key.indexOf('.') !== -1) {\n      try {\n        delete obj[key];\n        setDottedPath(obj, key, val);\n      } catch (err) {\n        if (!(err instanceof TypeError)) {\n          throw err;\n        }\n        throw new MongooseError(`Conflicting dotted paths when setting document path, key: \"${key}\", value: ${util.inspect(val)}`);\n      }\n      continue;\n    }\n\n    flattenObjectWithDottedPaths(obj[key]);\n  }\n};"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,2BAAD,CAA7B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,uBAAD,CAA7B;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,4BAAT,CAAsCC,GAAtC,EAA2C;EAC1D,IAAIA,GAAG,IAAI,IAAP,IAAe,OAAOA,GAAP,KAAe,QAA9B,IAA0CC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAA9C,EAAkE;IAChE;EACD,CAHyD,CAI1D;;;EACA,IAAIA,GAAG,CAACG,GAAR,EAAa;IACX;EACD;;EACD,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYJ,GAAZ,CAAb;;EACA,KAAK,MAAMM,GAAX,IAAkBF,IAAlB,EAAwB;IACtB,MAAMG,GAAG,GAAGP,GAAG,CAACM,GAAD,CAAf;;IACA,IAAIA,GAAG,CAACE,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAA1B,EAA6B;MAC3B,IAAI;QACF,OAAOR,GAAG,CAACM,GAAD,CAAV;QACAX,aAAa,CAACK,GAAD,EAAMM,GAAN,EAAWC,GAAX,CAAb;MACD,CAHD,CAGE,OAAOE,GAAP,EAAY;QACZ,IAAI,EAAEA,GAAG,YAAYC,SAAjB,CAAJ,EAAiC;UAC/B,MAAMD,GAAN;QACD;;QACD,MAAM,IAAIhB,aAAJ,CAAmB,8DAA6Da,GAAI,aAAYV,IAAI,CAACe,OAAL,CAAaJ,GAAb,CAAkB,EAAlH,CAAN;MACD;;MACD;IACD;;IAEDR,4BAA4B,CAACC,GAAG,CAACM,GAAD,CAAJ,CAA5B;EACD;AACF,CA1BD"},"metadata":{},"sourceType":"script"}