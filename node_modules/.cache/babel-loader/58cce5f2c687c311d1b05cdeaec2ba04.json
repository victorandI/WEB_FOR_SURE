{"ast":null,"code":"'use strict';\n\nconst get = require('../get');\n\nconst getSchemaDiscriminatorByValue = require('../discriminator/getSchemaDiscriminatorByValue');\n/*!\n * Like `schema.path()`, except with a document, because impossible to\n * determine path type without knowing the embedded discriminator key.\n */\n\n\nmodule.exports = function getEmbeddedDiscriminatorPath(doc, path, options) {\n  options = options || {};\n  const typeOnly = options.typeOnly;\n  const parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n  let schemaType = null;\n  let type = 'adhocOrUndefined';\n  const schema = getSchemaDiscriminatorByValue(doc.schema, doc.get(doc.schema.options.discriminatorKey)) || doc.schema;\n\n  for (let i = 0; i < parts.length; ++i) {\n    const subpath = parts.slice(0, i + 1).join('.');\n    schemaType = schema.path(subpath);\n\n    if (schemaType == null) {\n      type = 'adhocOrUndefined';\n      continue;\n    }\n\n    if (schemaType.instance === 'Mixed') {\n      return typeOnly ? 'real' : schemaType;\n    }\n\n    type = schema.pathType(subpath);\n\n    if ((schemaType.$isSingleNested || schemaType.$isMongooseDocumentArrayElement) && schemaType.schema.discriminators != null) {\n      const discriminators = schemaType.schema.discriminators;\n      const discriminatorKey = doc.get(subpath + '.' + get(schemaType, 'schema.options.discriminatorKey'));\n\n      if (discriminatorKey == null || discriminators[discriminatorKey] == null) {\n        continue;\n      }\n\n      const rest = parts.slice(i + 1).join('.');\n      return getEmbeddedDiscriminatorPath(doc.get(subpath), rest, options);\n    }\n  } // Are we getting the whole schema or just the type, 'real', 'nested', etc.\n\n\n  return typeOnly ? type : schemaType;\n};","map":{"version":3,"names":["get","require","getSchemaDiscriminatorByValue","module","exports","getEmbeddedDiscriminatorPath","doc","path","options","typeOnly","parts","indexOf","split","schemaType","type","schema","discriminatorKey","i","length","subpath","slice","join","instance","pathType","$isSingleNested","$isMongooseDocumentArrayElement","discriminators","rest"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/helpers/document/getEmbeddedDiscriminatorPath.js"],"sourcesContent":["'use strict';\n\nconst get = require('../get');\nconst getSchemaDiscriminatorByValue = require('../discriminator/getSchemaDiscriminatorByValue');\n\n/*!\n * Like `schema.path()`, except with a document, because impossible to\n * determine path type without knowing the embedded discriminator key.\n */\n\nmodule.exports = function getEmbeddedDiscriminatorPath(doc, path, options) {\n  options = options || {};\n  const typeOnly = options.typeOnly;\n  const parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n  let schemaType = null;\n  let type = 'adhocOrUndefined';\n\n  const schema = getSchemaDiscriminatorByValue(doc.schema, doc.get(doc.schema.options.discriminatorKey)) || doc.schema;\n\n  for (let i = 0; i < parts.length; ++i) {\n    const subpath = parts.slice(0, i + 1).join('.');\n    schemaType = schema.path(subpath);\n    if (schemaType == null) {\n      type = 'adhocOrUndefined';\n      continue;\n    }\n    if (schemaType.instance === 'Mixed') {\n      return typeOnly ? 'real' : schemaType;\n    }\n    type = schema.pathType(subpath);\n    if ((schemaType.$isSingleNested || schemaType.$isMongooseDocumentArrayElement) &&\n    schemaType.schema.discriminators != null) {\n      const discriminators = schemaType.schema.discriminators;\n      const discriminatorKey = doc.get(subpath + '.' +\n        get(schemaType, 'schema.options.discriminatorKey'));\n      if (discriminatorKey == null || discriminators[discriminatorKey] == null) {\n        continue;\n      }\n      const rest = parts.slice(i + 1).join('.');\n      return getEmbeddedDiscriminatorPath(doc.get(subpath), rest, options);\n    }\n  }\n\n  // Are we getting the whole schema or just the type, 'real', 'nested', etc.\n  return typeOnly ? type : schemaType;\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMC,6BAA6B,GAAGD,OAAO,CAAC,gDAAD,CAA7C;AAEA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,4BAAT,CAAsCC,GAAtC,EAA2CC,IAA3C,EAAiDC,OAAjD,EAA0D;EACzEA,OAAO,GAAGA,OAAO,IAAI,EAArB;EACA,MAAMC,QAAQ,GAAGD,OAAO,CAACC,QAAzB;EACA,MAAMC,KAAK,GAAGH,IAAI,CAACI,OAAL,CAAa,GAAb,MAAsB,CAAC,CAAvB,GAA2B,CAACJ,IAAD,CAA3B,GAAoCA,IAAI,CAACK,KAAL,CAAW,GAAX,CAAlD;EACA,IAAIC,UAAU,GAAG,IAAjB;EACA,IAAIC,IAAI,GAAG,kBAAX;EAEA,MAAMC,MAAM,GAAGb,6BAA6B,CAACI,GAAG,CAACS,MAAL,EAAaT,GAAG,CAACN,GAAJ,CAAQM,GAAG,CAACS,MAAJ,CAAWP,OAAX,CAAmBQ,gBAA3B,CAAb,CAA7B,IAA2FV,GAAG,CAACS,MAA9G;;EAEA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACQ,MAA1B,EAAkC,EAAED,CAApC,EAAuC;IACrC,MAAME,OAAO,GAAGT,KAAK,CAACU,KAAN,CAAY,CAAZ,EAAeH,CAAC,GAAG,CAAnB,EAAsBI,IAAtB,CAA2B,GAA3B,CAAhB;IACAR,UAAU,GAAGE,MAAM,CAACR,IAAP,CAAYY,OAAZ,CAAb;;IACA,IAAIN,UAAU,IAAI,IAAlB,EAAwB;MACtBC,IAAI,GAAG,kBAAP;MACA;IACD;;IACD,IAAID,UAAU,CAACS,QAAX,KAAwB,OAA5B,EAAqC;MACnC,OAAOb,QAAQ,GAAG,MAAH,GAAYI,UAA3B;IACD;;IACDC,IAAI,GAAGC,MAAM,CAACQ,QAAP,CAAgBJ,OAAhB,CAAP;;IACA,IAAI,CAACN,UAAU,CAACW,eAAX,IAA8BX,UAAU,CAACY,+BAA1C,KACJZ,UAAU,CAACE,MAAX,CAAkBW,cAAlB,IAAoC,IADpC,EAC0C;MACxC,MAAMA,cAAc,GAAGb,UAAU,CAACE,MAAX,CAAkBW,cAAzC;MACA,MAAMV,gBAAgB,GAAGV,GAAG,CAACN,GAAJ,CAAQmB,OAAO,GAAG,GAAV,GAC/BnB,GAAG,CAACa,UAAD,EAAa,iCAAb,CADoB,CAAzB;;MAEA,IAAIG,gBAAgB,IAAI,IAApB,IAA4BU,cAAc,CAACV,gBAAD,CAAd,IAAoC,IAApE,EAA0E;QACxE;MACD;;MACD,MAAMW,IAAI,GAAGjB,KAAK,CAACU,KAAN,CAAYH,CAAC,GAAG,CAAhB,EAAmBI,IAAnB,CAAwB,GAAxB,CAAb;MACA,OAAOhB,4BAA4B,CAACC,GAAG,CAACN,GAAJ,CAAQmB,OAAR,CAAD,EAAmBQ,IAAnB,EAAyBnB,OAAzB,CAAnC;IACD;EACF,CA/BwE,CAiCzE;;;EACA,OAAOC,QAAQ,GAAGK,IAAH,GAAUD,UAAzB;AACD,CAnCD"},"metadata":{},"sourceType":"script"}