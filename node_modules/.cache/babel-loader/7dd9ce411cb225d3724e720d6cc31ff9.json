{"ast":null,"code":"/*!\n * Module dependencies.\n */\n'use strict';\n\nconst SchemaObjectIdOptions = require('../options/SchemaObjectIdOptions');\n\nconst SchemaType = require('../schematype');\n\nconst castObjectId = require('../cast/objectid');\n\nconst getConstructorName = require('../helpers/getConstructorName');\n\nconst oid = require('../types/objectid');\n\nconst isBsonType = require('../helpers/isBsonType');\n\nconst utils = require('../utils');\n\nconst CastError = SchemaType.CastError;\nlet Document;\n/**\n * ObjectId SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction ObjectId(key, options) {\n  const isKeyHexStr = typeof key === 'string' && key.length === 24 && /^[a-f0-9]+$/i.test(key);\n  const suppressWarning = options && options.suppressWarning;\n\n  if ((isKeyHexStr || typeof key === 'undefined') && !suppressWarning) {\n    utils.warn('mongoose: To create a new ObjectId please try ' + '`Mongoose.Types.ObjectId` instead of using ' + '`Mongoose.Schema.ObjectId`. Set the `suppressWarning` option if ' + 'you\\'re trying to create a hex char path in your schema.');\n  }\n\n  SchemaType.call(this, key, options, 'ObjectID');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nObjectId.schemaName = 'ObjectId';\nObjectId.defaultOptions = {};\n/*!\n * Inherits from SchemaType.\n */\n\nObjectId.prototype = Object.create(SchemaType.prototype);\nObjectId.prototype.constructor = ObjectId;\nObjectId.prototype.OptionsConstructor = SchemaObjectIdOptions;\n/**\n * Attaches a getter for all ObjectId instances\n *\n * #### Example:\n *\n *     // Always convert to string when getting an ObjectId\n *     mongoose.ObjectId.get(v => v.toString());\n *\n *     const Model = mongoose.model('Test', new Schema({}));\n *     typeof (new Model({})._id); // 'string'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nObjectId.get = SchemaType.get;\n/**\n * Sets a default option for all ObjectId instances.\n *\n * #### Example:\n *\n *     // Make all object ids have option `required` equal to true.\n *     mongoose.Schema.ObjectId.set('required', true);\n *\n *     const Order = mongoose.model('Order', new Schema({ userId: ObjectId }));\n *     new Order({ }).validateSync().errors.userId.message; // Path `userId` is required.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nObjectId.set = SchemaType.set;\n/**\n * Adds an auto-generated ObjectId default if turnOn is true.\n * @param {Boolean} turnOn auto generated ObjectId defaults\n * @api public\n * @return {SchemaType} this\n */\n\nObjectId.prototype.auto = function (turnOn) {\n  if (turnOn) {\n    this.default(defaultId);\n    this.set(resetId);\n  }\n\n  return this;\n};\n/*!\n * ignore\n */\n\n\nObjectId._checkRequired = v => isBsonType(v, 'ObjectID');\n/*!\n * ignore\n */\n\n\nObjectId._cast = castObjectId;\n/**\n * Get/set the function used to cast arbitrary values to objectids.\n *\n * #### Example:\n *\n *     // Make Mongoose only try to cast length 24 strings. By default, any 12\n *     // char string is a valid ObjectId.\n *     const original = mongoose.ObjectId.cast();\n *     mongoose.ObjectId.cast(v => {\n *       assert.ok(typeof v !== 'string' || v.length === 24);\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.ObjectId.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nObjectId.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n\n  this._cast = caster;\n  return this._cast;\n};\n/*!\n * ignore\n */\n\n\nObjectId._defaultCaster = v => {\n  if (!isBsonType(v, 'ObjectID')) {\n    throw new Error(v + ' is not an instance of ObjectId');\n  }\n\n  return v;\n};\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * #### Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\n\nObjectId.checkRequired = SchemaType.checkRequired;\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nObjectId.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  } // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n\n\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ? this.constructor.checkRequired() : ObjectId.checkRequired();\n\n  return _checkRequired(value);\n};\n/**\n * Casts to ObjectId\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\n\nObjectId.prototype.cast = function (value, doc, init) {\n  if (!isBsonType(value, 'ObjectID') && SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n    if ((getConstructorName(value) || '').toLowerCase() === 'objectid') {\n      return new oid(value.toHexString());\n    }\n\n    if (value == null || utils.isNonBuiltinObject(value)) {\n      return this._castRef(value, doc, init);\n    }\n  }\n\n  let castObjectId;\n\n  if (typeof this._castFunction === 'function') {\n    castObjectId = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castObjectId = this.constructor.cast();\n  } else {\n    castObjectId = ObjectId.cast();\n  }\n\n  try {\n    return castObjectId(value);\n  } catch (error) {\n    throw new CastError('ObjectId', value, this.path, error, this);\n  }\n};\n/*!\n * ignore\n */\n\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nObjectId.prototype.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n});\n/*!\n * ignore\n */\n\nfunction defaultId() {\n  return new oid();\n}\n\ndefaultId.$runBeforeSetters = true;\n\nfunction resetId(v) {\n  Document || (Document = require('./../document'));\n\n  if (this instanceof Document) {\n    if (v === void 0) {\n      const _v = new oid();\n\n      return _v;\n    }\n  }\n\n  return v;\n}\n/*!\n * Module exports.\n */\n\n\nmodule.exports = ObjectId;","map":{"version":3,"names":["SchemaObjectIdOptions","require","SchemaType","castObjectId","getConstructorName","oid","isBsonType","utils","CastError","Document","ObjectId","key","options","isKeyHexStr","length","test","suppressWarning","warn","call","schemaName","defaultOptions","prototype","Object","create","constructor","OptionsConstructor","get","set","auto","turnOn","default","defaultId","resetId","_checkRequired","v","_cast","cast","caster","arguments","_defaultCaster","Error","checkRequired","value","doc","_isRef","init","toLowerCase","toHexString","isNonBuiltinObject","_castRef","_castFunction","error","path","handleSingle","val","$conditionalHandlers","$gt","$gte","$lt","$lte","$runBeforeSetters","_v","module","exports"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/schema/objectid.js"],"sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst SchemaObjectIdOptions = require('../options/SchemaObjectIdOptions');\nconst SchemaType = require('../schematype');\nconst castObjectId = require('../cast/objectid');\nconst getConstructorName = require('../helpers/getConstructorName');\nconst oid = require('../types/objectid');\nconst isBsonType = require('../helpers/isBsonType');\nconst utils = require('../utils');\n\nconst CastError = SchemaType.CastError;\nlet Document;\n\n/**\n * ObjectId SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction ObjectId(key, options) {\n  const isKeyHexStr = typeof key === 'string' && key.length === 24 && /^[a-f0-9]+$/i.test(key);\n  const suppressWarning = options && options.suppressWarning;\n  if ((isKeyHexStr || typeof key === 'undefined') && !suppressWarning) {\n    utils.warn('mongoose: To create a new ObjectId please try ' +\n      '`Mongoose.Types.ObjectId` instead of using ' +\n      '`Mongoose.Schema.ObjectId`. Set the `suppressWarning` option if ' +\n      'you\\'re trying to create a hex char path in your schema.');\n  }\n  SchemaType.call(this, key, options, 'ObjectID');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nObjectId.schemaName = 'ObjectId';\n\nObjectId.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nObjectId.prototype = Object.create(SchemaType.prototype);\nObjectId.prototype.constructor = ObjectId;\nObjectId.prototype.OptionsConstructor = SchemaObjectIdOptions;\n\n/**\n * Attaches a getter for all ObjectId instances\n *\n * #### Example:\n *\n *     // Always convert to string when getting an ObjectId\n *     mongoose.ObjectId.get(v => v.toString());\n *\n *     const Model = mongoose.model('Test', new Schema({}));\n *     typeof (new Model({})._id); // 'string'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nObjectId.get = SchemaType.get;\n\n/**\n * Sets a default option for all ObjectId instances.\n *\n * #### Example:\n *\n *     // Make all object ids have option `required` equal to true.\n *     mongoose.Schema.ObjectId.set('required', true);\n *\n *     const Order = mongoose.model('Order', new Schema({ userId: ObjectId }));\n *     new Order({ }).validateSync().errors.userId.message; // Path `userId` is required.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nObjectId.set = SchemaType.set;\n\n/**\n * Adds an auto-generated ObjectId default if turnOn is true.\n * @param {Boolean} turnOn auto generated ObjectId defaults\n * @api public\n * @return {SchemaType} this\n */\n\nObjectId.prototype.auto = function(turnOn) {\n  if (turnOn) {\n    this.default(defaultId);\n    this.set(resetId);\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nObjectId._checkRequired = v => isBsonType(v, 'ObjectID');\n\n/*!\n * ignore\n */\n\nObjectId._cast = castObjectId;\n\n/**\n * Get/set the function used to cast arbitrary values to objectids.\n *\n * #### Example:\n *\n *     // Make Mongoose only try to cast length 24 strings. By default, any 12\n *     // char string is a valid ObjectId.\n *     const original = mongoose.ObjectId.cast();\n *     mongoose.ObjectId.cast(v => {\n *       assert.ok(typeof v !== 'string' || v.length === 24);\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.ObjectId.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nObjectId.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nObjectId._defaultCaster = v => {\n  if (!(isBsonType(v, 'ObjectID'))) {\n    throw new Error(v + ' is not an instance of ObjectId');\n  }\n  return v;\n};\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * #### Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nObjectId.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nObjectId.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?\n    this.constructor.checkRequired() :\n    ObjectId.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Casts to ObjectId\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nObjectId.prototype.cast = function(value, doc, init) {\n  if (!(isBsonType(value, 'ObjectID')) && SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n    if ((getConstructorName(value) || '').toLowerCase() === 'objectid') {\n      return new oid(value.toHexString());\n    }\n\n    if (value == null || utils.isNonBuiltinObject(value)) {\n      return this._castRef(value, doc, init);\n    }\n  }\n\n  let castObjectId;\n  if (typeof this._castFunction === 'function') {\n    castObjectId = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castObjectId = this.constructor.cast();\n  } else {\n    castObjectId = ObjectId.cast();\n  }\n\n  try {\n    return castObjectId(value);\n  } catch (error) {\n    throw new CastError('ObjectId', value, this.path, error, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nObjectId.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle\n    });\n\n/*!\n * ignore\n */\n\nfunction defaultId() {\n  return new oid();\n}\n\ndefaultId.$runBeforeSetters = true;\n\nfunction resetId(v) {\n  Document || (Document = require('./../document'));\n\n  if (this instanceof Document) {\n    if (v === void 0) {\n      const _v = new oid();\n      return _v;\n    }\n  }\n\n  return v;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = ObjectId;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}