{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineAspects = exports.AbstractOperation = exports.Aspect = void 0;\n\nconst bson_1 = require(\"../bson\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nexports.Aspect = {\n  READ_OPERATION: Symbol('READ_OPERATION'),\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n  RETRYABLE: Symbol('RETRYABLE'),\n  EXPLAINABLE: Symbol('EXPLAINABLE'),\n  SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n  CURSOR_CREATING: Symbol('CURSOR_CREATING'),\n  CURSOR_ITERATING: Symbol('CURSOR_ITERATING')\n};\n/** @internal */\n\nconst kSession = Symbol('session');\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\n\nclass AbstractOperation {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _a;\n\n    this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION) ? read_preference_1.ReadPreference.primary : (_a = read_preference_1.ReadPreference.fromOptions(options)) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary; // Pull the BSON serialize options from the already-resolved options\n\n    this.bsonOptions = (0, bson_1.resolveBSONOptions)(options);\n    this[kSession] = options.session != null ? options.session : undefined;\n    this.options = options;\n    this.bypassPinningCheck = !!options.bypassPinningCheck;\n    this.trySecondaryWrite = false;\n  }\n\n  hasAspect(aspect) {\n    const ctor = this.constructor;\n\n    if (ctor.aspects == null) {\n      return false;\n    }\n\n    return ctor.aspects.has(aspect);\n  }\n\n  get session() {\n    return this[kSession];\n  }\n\n  get canRetryRead() {\n    return true;\n  }\n\n  get canRetryWrite() {\n    return true;\n  }\n\n}\n\nexports.AbstractOperation = AbstractOperation;\n\nfunction defineAspects(operation, aspects) {\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n    aspects = [aspects];\n  }\n\n  aspects = new Set(aspects);\n  Object.defineProperty(operation, 'aspects', {\n    value: aspects,\n    writable: false\n  });\n  return aspects;\n}\n\nexports.defineAspects = defineAspects;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAKaA,iBAAS;EACpBC,cAAc,EAAEC,MAAM,CAAC,gBAAD,CADF;EAEpBC,eAAe,EAAED,MAAM,CAAC,iBAAD,CAFH;EAGpBE,SAAS,EAAEF,MAAM,CAAC,WAAD,CAHG;EAIpBG,WAAW,EAAEH,MAAM,CAAC,aAAD,CAJC;EAKpBI,cAAc,EAAEJ,MAAM,CAAC,gBAAD,CALF;EAMpBK,eAAe,EAAEL,MAAM,CAAC,iBAAD,CANH;EAOpBM,gBAAgB,EAAEN,MAAM,CAAC,kBAAD;AAPJ,CAAT;AA+Bb;;AACA,MAAMO,QAAQ,GAAGP,MAAM,CAAC,SAAD,CAAvB;AAEA;;;;;;;;AAOA,MAAsBQ,iBAAtB,CAAuC;EAerCC,cAA0C;IAAA,IAA9BC,OAA8B,uEAAF,EAAE;;;;IACxC,KAAKC,cAAL,GAAsB,KAAKC,SAAL,CAAed,eAAOG,eAAtB,IAClBY,iCAAeC,OADG,GAElB,uCAAeC,WAAf,CAA2BL,OAA3B,OAAmC,IAAnC,IAAmCM,aAAnC,GAAmCA,EAAnC,GAAuCH,iCAAeC,OAF1D,CADwC,CAKxC;;IACA,KAAKG,WAAL,GAAmB,+BAAmBP,OAAnB,CAAnB;IAEA,KAAKH,QAAL,IAAiBG,OAAO,CAACQ,OAAR,IAAmB,IAAnB,GAA0BR,OAAO,CAACQ,OAAlC,GAA4CC,SAA7D;IAEA,KAAKT,OAAL,GAAeA,OAAf;IACA,KAAKU,kBAAL,GAA0B,CAAC,CAACV,OAAO,CAACU,kBAApC;IACA,KAAKC,iBAAL,GAAyB,KAAzB;EACD;;EAQDT,SAAS,CAACU,MAAD,EAAe;IACtB,MAAMC,IAAI,GAAG,KAAKd,WAAlB;;IACA,IAAIc,IAAI,CAACC,OAAL,IAAgB,IAApB,EAA0B;MACxB,OAAO,KAAP;IACD;;IAED,OAAOD,IAAI,CAACC,OAAL,CAAaC,GAAb,CAAiBH,MAAjB,CAAP;EACD;;EAEU,IAAPJ,OAAO;IACT,OAAO,KAAKX,QAAL,CAAP;EACD;;EAEe,IAAZmB,YAAY;IACd,OAAO,IAAP;EACD;;EAEgB,IAAbC,aAAa;IACf,OAAO,IAAP;EACD;;AAvDoC;;AAAvC7B;;AA0DA,SAAgB8B,aAAhB,CACEC,SADF,EAEEL,OAFF,EAE0C;EAExC,IAAI,CAACM,KAAK,CAACC,OAAN,CAAcP,OAAd,CAAD,IAA2B,EAAEA,OAAO,YAAYQ,GAArB,CAA/B,EAA0D;IACxDR,OAAO,GAAG,CAACA,OAAD,CAAV;EACD;;EAEDA,OAAO,GAAG,IAAIQ,GAAJ,CAAQR,OAAR,CAAV;EACAS,MAAM,CAACC,cAAP,CAAsBL,SAAtB,EAAiC,SAAjC,EAA4C;IAC1CM,KAAK,EAAEX,OADmC;IAE1CY,QAAQ,EAAE;EAFgC,CAA5C;EAKA,OAAOZ,OAAP;AACD;;AAfD1B","names":["exports","READ_OPERATION","Symbol","WRITE_OPERATION","RETRYABLE","EXPLAINABLE","SKIP_COLLATION","CURSOR_CREATING","CURSOR_ITERATING","kSession","AbstractOperation","constructor","options","readPreference","hasAspect","read_preference_1","primary","fromOptions","_a","bsonOptions","session","undefined","bypassPinningCheck","trySecondaryWrite","aspect","ctor","aspects","has","canRetryRead","canRetryWrite","defineAspects","operation","Array","isArray","Set","Object","defineProperty","value","writable"],"sources":["B:\\web_project_react\\web_car_react\\node_modules\\mongodb\\src\\operations\\operation.ts"],"sourcesContent":["import { BSONSerializeOptions, Document, resolveBSONOptions } from '../bson';\nimport { ReadPreference, ReadPreferenceLike } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback, MongoDBNamespace } from '../utils';\n\nexport const Aspect = {\n  READ_OPERATION: Symbol('READ_OPERATION'),\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n  RETRYABLE: Symbol('RETRYABLE'),\n  EXPLAINABLE: Symbol('EXPLAINABLE'),\n  SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n  CURSOR_CREATING: Symbol('CURSOR_CREATING'),\n  CURSOR_ITERATING: Symbol('CURSOR_ITERATING')\n} as const;\n\n/** @public */\nexport type Hint = string | Document;\n\nexport interface OperationConstructor extends Function {\n  aspects?: Set<symbol>;\n}\n\n/** @public */\nexport interface OperationOptions extends BSONSerializeOptions {\n  /** Specify ClientSession for this command */\n  session?: ClientSession;\n  willRetryWrite?: boolean;\n\n  /** The preferred read preference (ReadPreference.primary, ReadPreference.primary_preferred, ReadPreference.secondary, ReadPreference.secondary_preferred, ReadPreference.nearest). */\n  readPreference?: ReadPreferenceLike;\n\n  /** @internal Hints to `executeOperation` that this operation should not unpin on an ended transaction */\n  bypassPinningCheck?: boolean;\n  omitReadPreference?: boolean;\n}\n\n/** @internal */\nconst kSession = Symbol('session');\n\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\nexport abstract class AbstractOperation<TResult = any> {\n  ns!: MongoDBNamespace;\n  cmd!: Document;\n  readPreference: ReadPreference;\n  server!: Server;\n  bypassPinningCheck: boolean;\n  trySecondaryWrite: boolean;\n\n  // BSON serialization options\n  bsonOptions?: BSONSerializeOptions;\n\n  options: OperationOptions;\n\n  [kSession]: ClientSession | undefined;\n\n  constructor(options: OperationOptions = {}) {\n    this.readPreference = this.hasAspect(Aspect.WRITE_OPERATION)\n      ? ReadPreference.primary\n      : ReadPreference.fromOptions(options) ?? ReadPreference.primary;\n\n    // Pull the BSON serialize options from the already-resolved options\n    this.bsonOptions = resolveBSONOptions(options);\n\n    this[kSession] = options.session != null ? options.session : undefined;\n\n    this.options = options;\n    this.bypassPinningCheck = !!options.bypassPinningCheck;\n    this.trySecondaryWrite = false;\n  }\n\n  abstract execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<TResult>\n  ): void;\n\n  hasAspect(aspect: symbol): boolean {\n    const ctor = this.constructor as OperationConstructor;\n    if (ctor.aspects == null) {\n      return false;\n    }\n\n    return ctor.aspects.has(aspect);\n  }\n\n  get session(): ClientSession | undefined {\n    return this[kSession];\n  }\n\n  get canRetryRead(): boolean {\n    return true;\n  }\n\n  get canRetryWrite(): boolean {\n    return true;\n  }\n}\n\nexport function defineAspects(\n  operation: OperationConstructor,\n  aspects: symbol | symbol[] | Set<symbol>\n): Set<symbol> {\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n    aspects = [aspects];\n  }\n\n  aspects = new Set(aspects);\n  Object.defineProperty(operation, 'aspects', {\n    value: aspects,\n    writable: false\n  });\n\n  return aspects;\n}\n"]},"metadata":{},"sourceType":"script"}