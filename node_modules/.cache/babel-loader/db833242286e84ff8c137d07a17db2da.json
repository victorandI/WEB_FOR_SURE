{"ast":null,"code":"'use strict';\n\nconst isDefiningProjection = require('./isDefiningProjection');\n/*!\n * ignore\n */\n\n\nmodule.exports = function isInclusive(projection) {\n  if (projection == null) {\n    return false;\n  }\n\n  const props = Object.keys(projection);\n  const numProps = props.length;\n\n  if (numProps === 0) {\n    return false;\n  }\n\n  for (let i = 0; i < numProps; ++i) {\n    const prop = props[i]; // Plus paths can't define the projection (see gh-7050)\n\n    if (prop.startsWith('+')) {\n      continue;\n    } // If field is truthy (1, true, etc.) and not an object, then this\n    // projection must be inclusive. If object, assume its $meta, $slice, etc.\n\n\n    if (isDefiningProjection(projection[prop]) && !!projection[prop]) {\n      if (projection[prop] != null && typeof projection[prop] === 'object') {\n        return isInclusive(projection[prop]);\n      } else {\n        return !!projection[prop];\n      }\n    }\n  }\n\n  return false;\n};","map":{"version":3,"names":["isDefiningProjection","require","module","exports","isInclusive","projection","props","Object","keys","numProps","length","i","prop","startsWith"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/helpers/projection/isInclusive.js"],"sourcesContent":["'use strict';\n\nconst isDefiningProjection = require('./isDefiningProjection');\n\n/*!\n * ignore\n */\n\nmodule.exports = function isInclusive(projection) {\n  if (projection == null) {\n    return false;\n  }\n\n  const props = Object.keys(projection);\n  const numProps = props.length;\n  if (numProps === 0) {\n    return false;\n  }\n\n  for (let i = 0; i < numProps; ++i) {\n    const prop = props[i];\n    // Plus paths can't define the projection (see gh-7050)\n    if (prop.startsWith('+')) {\n      continue;\n    }\n    // If field is truthy (1, true, etc.) and not an object, then this\n    // projection must be inclusive. If object, assume its $meta, $slice, etc.\n    if (isDefiningProjection(projection[prop]) && !!projection[prop]) {\n      if (projection[prop] != null && typeof projection[prop] === 'object') {\n        return isInclusive(projection[prop]);\n      } else {\n        return !!projection[prop];\n      }\n    }\n  }\n\n  return false;\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAApC;AAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,UAArB,EAAiC;EAChD,IAAIA,UAAU,IAAI,IAAlB,EAAwB;IACtB,OAAO,KAAP;EACD;;EAED,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYH,UAAZ,CAAd;EACA,MAAMI,QAAQ,GAAGH,KAAK,CAACI,MAAvB;;EACA,IAAID,QAAQ,KAAK,CAAjB,EAAoB;IAClB,OAAO,KAAP;EACD;;EAED,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAApB,EAA8B,EAAEE,CAAhC,EAAmC;IACjC,MAAMC,IAAI,GAAGN,KAAK,CAACK,CAAD,CAAlB,CADiC,CAEjC;;IACA,IAAIC,IAAI,CAACC,UAAL,CAAgB,GAAhB,CAAJ,EAA0B;MACxB;IACD,CALgC,CAMjC;IACA;;;IACA,IAAIb,oBAAoB,CAACK,UAAU,CAACO,IAAD,CAAX,CAApB,IAA0C,CAAC,CAACP,UAAU,CAACO,IAAD,CAA1D,EAAkE;MAChE,IAAIP,UAAU,CAACO,IAAD,CAAV,IAAoB,IAApB,IAA4B,OAAOP,UAAU,CAACO,IAAD,CAAjB,KAA4B,QAA5D,EAAsE;QACpE,OAAOR,WAAW,CAACC,UAAU,CAACO,IAAD,CAAX,CAAlB;MACD,CAFD,MAEO;QACL,OAAO,CAAC,CAACP,UAAU,CAACO,IAAD,CAAnB;MACD;IACF;EACF;;EAED,OAAO,KAAP;AACD,CA7BD"},"metadata":{},"sourceType":"script"}