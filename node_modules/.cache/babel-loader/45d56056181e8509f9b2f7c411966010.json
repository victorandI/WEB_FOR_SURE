{"ast":null,"code":"'use strict';\n/*!\n * Module requirements.\n */\n\nconst MongooseError = require('../error/index');\n\nconst SchemaNumberOptions = require('../options/SchemaNumberOptions');\n\nconst SchemaType = require('../schematype');\n\nconst castNumber = require('../cast/number');\n\nconst handleBitwiseOperator = require('./operators/bitwise');\n\nconst utils = require('../utils');\n\nconst CastError = SchemaType.CastError;\n/**\n * Number SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaNumber(key, options) {\n  SchemaType.call(this, key, options, 'Number');\n}\n/**\n * Attaches a getter for all Number instances.\n *\n * #### Example:\n *\n *     // Make all numbers round down\n *     mongoose.Number.get(function(v) { return Math.floor(v); });\n *\n *     const Model = mongoose.model('Test', new Schema({ test: Number }));\n *     new Model({ test: 3.14 }).test; // 3\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\n\nSchemaNumber.get = SchemaType.get;\n/**\n * Sets a default option for all Number instances.\n *\n * #### Example:\n *\n *     // Make all numbers have option `min` equal to 0.\n *     mongoose.Schema.Number.set('min', 0);\n *\n *     const Order = mongoose.model('Order', new Schema({ amount: Number }));\n *     new Order({ amount: -10 }).validateSync().errors.amount.message; // Path `amount` must be larger than 0.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaNumber.set = SchemaType.set;\n/*!\n * ignore\n */\n\nSchemaNumber._cast = castNumber;\n/**\n * Get/set the function used to cast arbitrary values to numbers.\n *\n * #### Example:\n *\n *     // Make Mongoose cast empty strings '' to 0 for paths declared as numbers\n *     const original = mongoose.Number.cast();\n *     mongoose.Number.cast(v => {\n *       if (v === '') { return 0; }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Number.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaNumber.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n\n  this._cast = caster;\n  return this._cast;\n};\n/*!\n * ignore\n */\n\n\nSchemaNumber._defaultCaster = v => {\n  if (typeof v !== 'number') {\n    throw new Error();\n  }\n\n  return v;\n};\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nSchemaNumber.schemaName = 'Number';\nSchemaNumber.defaultOptions = {};\n/*!\n * Inherits from SchemaType.\n */\n\nSchemaNumber.prototype = Object.create(SchemaType.prototype);\nSchemaNumber.prototype.constructor = SchemaNumber;\nSchemaNumber.prototype.OptionsConstructor = SchemaNumberOptions;\n/*!\n * ignore\n */\n\nSchemaNumber._checkRequired = v => typeof v === 'number' || v instanceof Number;\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\n\nSchemaNumber.checkRequired = SchemaType.checkRequired;\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaNumber.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  } // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n\n\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ? this.constructor.checkRequired() : SchemaNumber.checkRequired();\n\n  return _checkRequired(value);\n};\n/**\n * Sets a minimum number validator.\n *\n * #### Example:\n *\n *     const s = new Schema({ n: { type: Number, min: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 9 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\n *     const min = [10, 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\n *     const schema = new Schema({ n: { type: Number, min: min })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) is beneath the limit (10).\n *     })\n *\n * @param {Number} value minimum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaNumber.prototype.min = function (value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.min;\n    msg = msg.replace(/{MIN}/, value);\n    this.validators.push({\n      validator: this.minValidator = function (v) {\n        return v == null || v >= value;\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n\n  return this;\n};\n/**\n * Sets a maximum number validator.\n *\n * #### Example:\n *\n *     const s = new Schema({ n: { type: Number, max: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 11 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\n *     const max = [10, 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\n *     const schema = new Schema({ n: { type: Number, max: max })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) exceeds the limit (10).\n *     })\n *\n * @param {Number} maximum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaNumber.prototype.max = function (value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.max;\n    msg = msg.replace(/{MAX}/, value);\n    this.validators.push({\n      validator: this.maxValidator = function (v) {\n        return v == null || v <= value;\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n\n  return this;\n};\n/**\n * Sets a enum validator\n *\n * #### Example:\n *\n *     const s = new Schema({ n: { type: Number, enum: [1, 2, 3] });\n *     const M = db.model('M', s);\n *\n *     const m = new M({ n: 4 });\n *     await m.save(); // throws validation error\n *\n *     m.n = 3;\n *     await m.save(); // succeeds\n *\n * @param {Array} values allowed values\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaNumber.prototype.enum = function (values, message) {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n  }\n\n  if (!Array.isArray(values)) {\n    const isObjectSyntax = utils.isPOJO(values) && values.values != null;\n\n    if (isObjectSyntax) {\n      message = values.message;\n      values = values.values;\n    } else if (typeof values === 'number') {\n      values = Array.prototype.slice.call(arguments);\n      message = null;\n    }\n\n    if (utils.isPOJO(values)) {\n      values = Object.values(values);\n    }\n\n    message = message || MongooseError.messages.Number.enum;\n  }\n\n  message = message == null ? MongooseError.messages.Number.enum : message;\n\n  this.enumValidator = v => v == null || values.indexOf(v) !== -1;\n\n  this.validators.push({\n    validator: this.enumValidator,\n    message: message,\n    type: 'enum',\n    enumValues: values\n  });\n  return this;\n};\n/**\n * Casts to number\n *\n * @param {Object} value value to cast\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\n\nSchemaNumber.prototype.cast = function (value, doc, init) {\n  if (typeof value !== 'number' && SchemaType._isRef(this, value, doc, init)) {\n    if (value == null || utils.isNonBuiltinObject(value)) {\n      return this._castRef(value, doc, init);\n    }\n  }\n\n  const val = value && typeof value._id !== 'undefined' ? value._id : // documents\n  value;\n  let castNumber;\n\n  if (typeof this._castFunction === 'function') {\n    castNumber = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castNumber = this.constructor.cast();\n  } else {\n    castNumber = SchemaNumber.cast();\n  }\n\n  try {\n    return castNumber(val);\n  } catch (err) {\n    throw new CastError('Number', val, this.path, err, this);\n  }\n};\n/*!\n * ignore\n */\n\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nfunction handleArray(val) {\n  const _this = this;\n\n  if (!Array.isArray(val)) {\n    return [this.cast(val)];\n  }\n\n  return val.map(function (m) {\n    return _this.cast(m);\n  });\n}\n\nSchemaNumber.prototype.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $bitsAllClear: handleBitwiseOperator,\n  $bitsAnyClear: handleBitwiseOperator,\n  $bitsAllSet: handleBitwiseOperator,\n  $bitsAnySet: handleBitwiseOperator,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $mod: handleArray\n});\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaNumber.prototype.castForQuery = function ($conditional, val) {\n  let handler;\n\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new CastError('number', val, this.path, null, this);\n    }\n\n    return handler.call(this, val);\n  }\n\n  val = this._castForQuery($conditional);\n  return val;\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = SchemaNumber;","map":{"version":3,"names":["MongooseError","require","SchemaNumberOptions","SchemaType","castNumber","handleBitwiseOperator","utils","CastError","SchemaNumber","key","options","call","get","set","_cast","cast","caster","arguments","length","_defaultCaster","v","Error","schemaName","defaultOptions","prototype","Object","create","constructor","OptionsConstructor","_checkRequired","Number","checkRequired","value","doc","_isRef","min","message","minValidator","validators","filter","validator","undefined","msg","messages","replace","push","type","max","maxValidator","enum","values","enumValidator","Array","isArray","isObjectSyntax","isPOJO","slice","indexOf","enumValues","init","isNonBuiltinObject","_castRef","val","_id","_castFunction","err","path","handleSingle","handleArray","_this","map","m","$conditionalHandlers","$bitsAllClear","$bitsAnyClear","$bitsAllSet","$bitsAnySet","$gt","$gte","$lt","$lte","$mod","castForQuery","$conditional","handler","_castForQuery","module","exports"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/schema/number.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module requirements.\n */\n\nconst MongooseError = require('../error/index');\nconst SchemaNumberOptions = require('../options/SchemaNumberOptions');\nconst SchemaType = require('../schematype');\nconst castNumber = require('../cast/number');\nconst handleBitwiseOperator = require('./operators/bitwise');\nconst utils = require('../utils');\n\nconst CastError = SchemaType.CastError;\n\n/**\n * Number SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaNumber(key, options) {\n  SchemaType.call(this, key, options, 'Number');\n}\n\n/**\n * Attaches a getter for all Number instances.\n *\n * #### Example:\n *\n *     // Make all numbers round down\n *     mongoose.Number.get(function(v) { return Math.floor(v); });\n *\n *     const Model = mongoose.model('Test', new Schema({ test: Number }));\n *     new Model({ test: 3.14 }).test; // 3\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaNumber.get = SchemaType.get;\n\n/**\n * Sets a default option for all Number instances.\n *\n * #### Example:\n *\n *     // Make all numbers have option `min` equal to 0.\n *     mongoose.Schema.Number.set('min', 0);\n *\n *     const Order = mongoose.model('Order', new Schema({ amount: Number }));\n *     new Order({ amount: -10 }).validateSync().errors.amount.message; // Path `amount` must be larger than 0.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaNumber.set = SchemaType.set;\n\n/*!\n * ignore\n */\n\nSchemaNumber._cast = castNumber;\n\n/**\n * Get/set the function used to cast arbitrary values to numbers.\n *\n * #### Example:\n *\n *     // Make Mongoose cast empty strings '' to 0 for paths declared as numbers\n *     const original = mongoose.Number.cast();\n *     mongoose.Number.cast(v => {\n *       if (v === '') { return 0; }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Number.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaNumber.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaNumber._defaultCaster = v => {\n  if (typeof v !== 'number') {\n    throw new Error();\n  }\n  return v;\n};\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaNumber.schemaName = 'Number';\n\nSchemaNumber.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaNumber.prototype = Object.create(SchemaType.prototype);\nSchemaNumber.prototype.constructor = SchemaNumber;\nSchemaNumber.prototype.OptionsConstructor = SchemaNumberOptions;\n\n/*!\n * ignore\n */\n\nSchemaNumber._checkRequired = v => typeof v === 'number' || v instanceof Number;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaNumber.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaNumber.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?\n    this.constructor.checkRequired() :\n    SchemaNumber.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Sets a minimum number validator.\n *\n * #### Example:\n *\n *     const s = new Schema({ n: { type: Number, min: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 9 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\n *     const min = [10, 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\n *     const schema = new Schema({ n: { type: Number, min: min })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) is beneath the limit (10).\n *     })\n *\n * @param {Number} value minimum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaNumber.prototype.min = function(value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.min;\n    msg = msg.replace(/{MIN}/, value);\n    this.validators.push({\n      validator: this.minValidator = function(v) {\n        return v == null || v >= value;\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum number validator.\n *\n * #### Example:\n *\n *     const s = new Schema({ n: { type: Number, max: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 11 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\n *     const max = [10, 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\n *     const schema = new Schema({ n: { type: Number, max: max })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) exceeds the limit (10).\n *     })\n *\n * @param {Number} maximum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaNumber.prototype.max = function(value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.max;\n    msg = msg.replace(/{MAX}/, value);\n    this.validators.push({\n      validator: this.maxValidator = function(v) {\n        return v == null || v <= value;\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a enum validator\n *\n * #### Example:\n *\n *     const s = new Schema({ n: { type: Number, enum: [1, 2, 3] });\n *     const M = db.model('M', s);\n *\n *     const m = new M({ n: 4 });\n *     await m.save(); // throws validation error\n *\n *     m.n = 3;\n *     await m.save(); // succeeds\n *\n * @param {Array} values allowed values\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaNumber.prototype.enum = function(values, message) {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n  }\n\n\n  if (!Array.isArray(values)) {\n    const isObjectSyntax = utils.isPOJO(values) && values.values != null;\n    if (isObjectSyntax) {\n      message = values.message;\n      values = values.values;\n    } else if (typeof values === 'number') {\n      values = Array.prototype.slice.call(arguments);\n      message = null;\n    }\n\n    if (utils.isPOJO(values)) {\n      values = Object.values(values);\n    }\n    message = message || MongooseError.messages.Number.enum;\n  }\n\n  message = message == null ? MongooseError.messages.Number.enum : message;\n\n  this.enumValidator = v => v == null || values.indexOf(v) !== -1;\n  this.validators.push({\n    validator: this.enumValidator,\n    message: message,\n    type: 'enum',\n    enumValues: values\n  });\n\n  return this;\n};\n\n/**\n * Casts to number\n *\n * @param {Object} value value to cast\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\nSchemaNumber.prototype.cast = function(value, doc, init) {\n  if (typeof value !== 'number' && SchemaType._isRef(this, value, doc, init)) {\n    if (value == null || utils.isNonBuiltinObject(value)) {\n      return this._castRef(value, doc, init);\n    }\n  }\n\n  const val = value && typeof value._id !== 'undefined' ?\n    value._id : // documents\n    value;\n\n  let castNumber;\n  if (typeof this._castFunction === 'function') {\n    castNumber = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castNumber = this.constructor.cast();\n  } else {\n    castNumber = SchemaNumber.cast();\n  }\n\n  try {\n    return castNumber(val);\n  } catch (err) {\n    throw new CastError('Number', val, this.path, err, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nfunction handleArray(val) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.cast(val)];\n  }\n  return val.map(function(m) {\n    return _this.cast(m);\n  });\n}\n\nSchemaNumber.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $bitsAllClear: handleBitwiseOperator,\n      $bitsAnyClear: handleBitwiseOperator,\n      $bitsAllSet: handleBitwiseOperator,\n      $bitsAnySet: handleBitwiseOperator,\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle,\n      $mod: handleArray\n    });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaNumber.prototype.castForQuery = function($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new CastError('number', val, this.path, null, this);\n    }\n    return handler.call(this, val);\n  }\n  val = this._castForQuery($conditional);\n  return val;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaNumber;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}