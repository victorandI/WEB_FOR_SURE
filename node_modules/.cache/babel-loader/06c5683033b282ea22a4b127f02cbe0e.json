{"ast":null,"code":"'use strict';\n\nconst Document = require('../../../document');\n\nconst ArraySubdocument = require('../../ArraySubdocument');\n\nconst MongooseError = require('../../../error/mongooseError');\n\nconst cleanModifiedSubpaths = require('../../../helpers/document/cleanModifiedSubpaths');\n\nconst internalToObjectOptions = require('../../../options').internalToObjectOptions;\n\nconst utils = require('../../../utils');\n\nconst isBsonType = require('../../../helpers/isBsonType');\n\nconst arrayAtomicsSymbol = require('../../../helpers/symbols').arrayAtomicsSymbol;\n\nconst arrayParentSymbol = require('../../../helpers/symbols').arrayParentSymbol;\n\nconst arrayPathSymbol = require('../../../helpers/symbols').arrayPathSymbol;\n\nconst arraySchemaSymbol = require('../../../helpers/symbols').arraySchemaSymbol;\n\nconst populateModelSymbol = require('../../../helpers/symbols').populateModelSymbol;\n\nconst slicedSymbol = Symbol('mongoose#Array#sliced');\nconst _basePush = Array.prototype.push;\n/*!\n * ignore\n */\n\nconst methods = {\n  /**\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\n   *\n   * If no atomics exist, we return all array values after conversion.\n   *\n   * @return {Array}\n   * @method $__getAtomics\n   * @memberOf MongooseArray\n   * @instance\n   * @api private\n   */\n  $__getAtomics() {\n    const ret = [];\n    const keys = Object.keys(this[arrayAtomicsSymbol] || {});\n    let i = keys.length;\n    const opts = Object.assign({}, internalToObjectOptions, {\n      _isNested: true\n    });\n\n    if (i === 0) {\n      ret[0] = ['$set', this.toObject(opts)];\n      return ret;\n    }\n\n    while (i--) {\n      const op = keys[i];\n      let val = this[arrayAtomicsSymbol][op]; // the atomic values which are arrays are not MongooseArrays. we\n      // need to convert their elements as if they were MongooseArrays\n      // to handle populated arrays versus DocumentArrays properly.\n\n      if (utils.isMongooseObject(val)) {\n        val = val.toObject(opts);\n      } else if (Array.isArray(val)) {\n        val = this.toObject.call(val, opts);\n      } else if (val != null && Array.isArray(val.$each)) {\n        val.$each = this.toObject.call(val.$each, opts);\n      } else if (val != null && typeof val.valueOf === 'function') {\n        val = val.valueOf();\n      }\n\n      if (op === '$addToSet') {\n        val = {\n          $each: val\n        };\n      }\n\n      ret.push([op, val]);\n    }\n\n    return ret;\n  },\n\n  /*!\n   * ignore\n   */\n  $atomics() {\n    return this[arrayAtomicsSymbol];\n  },\n\n  /*!\n   * ignore\n   */\n  $parent() {\n    return this[arrayParentSymbol];\n  },\n\n  /*!\n   * ignore\n   */\n  $path() {\n    return this[arrayPathSymbol];\n  },\n\n  /**\n   * Atomically shifts the array at most one time per document `save()`.\n   *\n   * #### Note:\n   *\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const shifted = doc.array.$shift();\n   *      console.log(shifted); // 1\n   *      console.log(doc.array); // [2,3]\n   *\n   *      // no affect\n   *      shifted = doc.array.$shift();\n   *      console.log(doc.array); // [2,3]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $shift works again\n   *        shifted = doc.array.$shift();\n   *        console.log(shifted ); // 2\n   *        console.log(doc.array); // [3]\n   *      })\n   *\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method $shift\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   */\n  $shift() {\n    this._registerAtomic('$pop', -1);\n\n    this._markModified(); // only allow shifting once\n\n\n    if (this._shifted) {\n      return;\n    }\n\n    this._shifted = true;\n    return [].shift.call(this);\n  },\n\n  /**\n   * Pops the array atomically at most one time per document `save()`.\n   *\n   * #### NOTE:\n   *\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const popped = doc.array.$pop();\n   *      console.log(popped); // 3\n   *      console.log(doc.array); // [1,2]\n   *\n   *      // no affect\n   *      popped = doc.array.$pop();\n   *      console.log(doc.array); // [1,2]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $pop works again\n   *        popped = doc.array.$pop();\n   *        console.log(popped); // 2\n   *        console.log(doc.array); // [1]\n   *      })\n   *\n   * @api public\n   * @method $pop\n   * @memberOf MongooseArray\n   * @instance\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   * @method $pop\n   * @memberOf MongooseArray\n   */\n  $pop() {\n    this._registerAtomic('$pop', 1);\n\n    this._markModified(); // only allow popping once\n\n\n    if (this._popped) {\n      return;\n    }\n\n    this._popped = true;\n    return [].pop.call(this);\n  },\n\n  /*!\n   * ignore\n   */\n  $schema() {\n    return this[arraySchemaSymbol];\n  },\n\n  /**\n   * Casts a member based on this arrays schema.\n   *\n   * @param {any} value\n   * @return value the casted value\n   * @method _cast\n   * @api private\n   * @memberOf MongooseArray\n   */\n  _cast(value) {\n    let populated = false;\n    let Model;\n    const parent = this[arrayParentSymbol];\n\n    if (parent) {\n      populated = parent.$populated(this[arrayPathSymbol], true);\n    }\n\n    if (populated && value !== null && value !== undefined) {\n      // cast to the populated Models schema\n      Model = populated.options[populateModelSymbol]; // only objects are permitted so we can safely assume that\n      // non-objects are to be interpreted as _id\n\n      if (Buffer.isBuffer(value) || isBsonType(value, 'ObjectID') || !utils.isObject(value)) {\n        value = {\n          _id: value\n        };\n      } // gh-2399\n      // we should cast model only when it's not a discriminator\n\n\n      const isDisc = value.schema && value.schema.discriminatorMapping && value.schema.discriminatorMapping.key !== undefined;\n\n      if (!isDisc) {\n        value = new Model(value);\n      }\n\n      return this[arraySchemaSymbol].caster.applySetters(value, parent, true);\n    }\n\n    return this[arraySchemaSymbol].caster.applySetters(value, parent, false);\n  },\n\n  /**\n   * Internal helper for .map()\n   *\n   * @api private\n   * @return {Number}\n   * @method _mapCast\n   * @memberOf MongooseArray\n   */\n  _mapCast(val, index) {\n    return this._cast(val, this.length + index);\n  },\n\n  /**\n   * Marks this array as modified.\n   *\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\n   *\n   * @param {ArraySubdocument} subdoc the embedded doc that invoked this method on the Array\n   * @param {String} embeddedPath the path which changed in the subdoc\n   * @method _markModified\n   * @api private\n   * @memberOf MongooseArray\n   */\n  _markModified(elem) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n\n      if (arguments.length) {\n        dirtyPath = dirtyPath + '.' + elem;\n      }\n\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n\n      parent.markModified(dirtyPath, arguments.length !== 0 ? elem : parent);\n    }\n\n    return this;\n  },\n\n  /**\n   * Register an atomic operation with the parent.\n   *\n   * @param {Array} op operation\n   * @param {any} val\n   * @method _registerAtomic\n   * @api private\n   * @memberOf MongooseArray\n   */\n  _registerAtomic(op, val) {\n    if (this[slicedSymbol]) {\n      return;\n    }\n\n    if (op === '$set') {\n      // $set takes precedence over all other ops.\n      // mark entire array modified.\n      this[arrayAtomicsSymbol] = {\n        $set: val\n      };\n      cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]);\n\n      this._markModified();\n\n      return this;\n    }\n\n    const atomics = this[arrayAtomicsSymbol]; // reset pop/shift after save\n\n    if (op === '$pop' && !('$pop' in atomics)) {\n      const _this = this;\n\n      this[arrayParentSymbol].once('save', function () {\n        _this._popped = _this._shifted = null;\n      });\n    } // check for impossible $atomic combos (Mongo denies more than one\n    // $atomic op on a single path\n\n\n    if (atomics.$set || Object.keys(atomics).length && !(op in atomics)) {\n      // a different op was previously registered.\n      // save the entire thing.\n      this[arrayAtomicsSymbol] = {\n        $set: this\n      };\n      return this;\n    }\n\n    let selector;\n\n    if (op === '$pullAll' || op === '$addToSet') {\n      atomics[op] || (atomics[op] = []);\n      atomics[op] = atomics[op].concat(val);\n    } else if (op === '$pullDocs') {\n      const pullOp = atomics['$pull'] || (atomics['$pull'] = {});\n\n      if (val[0] instanceof ArraySubdocument) {\n        selector = pullOp['$or'] || (pullOp['$or'] = []);\n        Array.prototype.push.apply(selector, val.map(function (v) {\n          return v.toObject({\n            transform: false,\n            virtuals: false\n          });\n        }));\n      } else {\n        selector = pullOp['_id'] || (pullOp['_id'] = {\n          $in: []\n        });\n        selector['$in'] = selector['$in'].concat(val);\n      }\n    } else if (op === '$push') {\n      atomics.$push = atomics.$push || {\n        $each: []\n      };\n\n      if (val != null && utils.hasUserDefinedProperty(val, '$each')) {\n        atomics.$push = val;\n      } else {\n        atomics.$push.$each = atomics.$push.$each.concat(val);\n      }\n    } else {\n      atomics[op] = val;\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds values to the array if not already present.\n   *\n   * #### Example:\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *     const added = doc.array.addToSet(4,5);\n   *     console.log(doc.array) // [2,3,4,5]\n   *     console.log(added)     // [5]\n   *\n   * @param {any} [args...]\n   * @return {Array} the values that were added\n   * @memberOf MongooseArray\n   * @api public\n   * @method addToSet\n   */\n  addToSet() {\n    _checkManualPopulation(this, arguments);\n\n    let values = [].map.call(arguments, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    const added = [];\n    let type = '';\n\n    if (values[0] instanceof ArraySubdocument) {\n      type = 'doc';\n    } else if (values[0] instanceof Date) {\n      type = 'date';\n    }\n\n    const rawValues = utils.isMongooseArray(values) ? values.__array : this;\n    const rawArray = utils.isMongooseArray(this) ? this.__array : this;\n    rawValues.forEach(function (v) {\n      let found;\n      const val = +v;\n\n      switch (type) {\n        case 'doc':\n          found = this.some(function (doc) {\n            return doc.equals(v);\n          });\n          break;\n\n        case 'date':\n          found = this.some(function (d) {\n            return +d === val;\n          });\n          break;\n\n        default:\n          found = ~this.indexOf(v);\n      }\n\n      if (!found) {\n        this._markModified();\n\n        rawArray.push(v);\n\n        this._registerAtomic('$addToSet', v);\n\n        [].push.call(added, v);\n      }\n    }, this);\n    return added;\n  },\n\n  /**\n   * Returns the number of pending atomic operations to send to the db for this array.\n   *\n   * @api private\n   * @return {Number}\n   * @method hasAtomics\n   * @memberOf MongooseArray\n   */\n  hasAtomics() {\n    if (!utils.isPOJO(this[arrayAtomicsSymbol])) {\n      return 0;\n    }\n\n    return Object.keys(this[arrayAtomicsSymbol]).length;\n  },\n\n  /**\n   * Return whether or not the `obj` is included in the array.\n   *\n   * @param {Object} obj the item to check\n   * @param {Number} fromIndex\n   * @return {Boolean}\n   * @api public\n   * @method includes\n   * @memberOf MongooseArray\n   */\n  includes(obj, fromIndex) {\n    const ret = this.indexOf(obj, fromIndex);\n    return ret !== -1;\n  },\n\n  /**\n   * Return the index of `obj` or `-1` if not found.\n   *\n   * @param {Object} obj the item to look for\n   * @param {Number} fromIndex\n   * @return {Number}\n   * @api public\n   * @method indexOf\n   * @memberOf MongooseArray\n   */\n  indexOf(obj, fromIndex) {\n    if (isBsonType(obj, 'ObjectID')) {\n      obj = obj.toString();\n    }\n\n    fromIndex = fromIndex == null ? 0 : fromIndex;\n    const len = this.length;\n\n    for (let i = fromIndex; i < len; ++i) {\n      if (obj == this[i]) {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @api public\n   * @method inspect\n   * @memberOf MongooseArray\n   */\n  inspect() {\n    return JSON.stringify(this);\n  },\n\n  /**\n   * Pushes items to the array non-atomically.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @param {any} [args...]\n   * @api public\n   * @method nonAtomicPush\n   * @memberOf MongooseArray\n   */\n  nonAtomicPush() {\n    const values = [].map.call(arguments, this._mapCast, this);\n\n    this._markModified();\n\n    const ret = [].push.apply(this, values);\n\n    this._registerAtomic('$set', this);\n\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwriting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @see MongooseArray#$pop #types_array_MongooseArray-%24pop\n   * @api public\n   * @method pop\n   * @memberOf MongooseArray\n   */\n  pop() {\n    this._markModified();\n\n    const ret = [].pop.call(this);\n\n    this._registerAtomic('$set', this);\n\n    return ret;\n  },\n\n  /**\n   * Pulls items from the array atomically. Equality is determined by casting\n   * the provided value to an embedded document and comparing using\n   * [the `Document.equals()` function.](/docs/api.html#document_Document-equals)\n   *\n   * #### Examples:\n   *\n   *     doc.array.pull(ObjectId)\n   *     doc.array.pull({ _id: 'someId' })\n   *     doc.array.pull(36)\n   *     doc.array.pull('tag 1', 'tag 2')\n   *\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\n   *\n   * Or we may passing the _id directly and let mongoose take care of it.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull(4815162342); // works\n   *\n   * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.\n   *\n   * @param {any} [args...]\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @method pull\n   * @memberOf MongooseArray\n   */\n  pull() {\n    const values = [].map.call(arguments, this._cast, this);\n    const cur = this[arrayParentSymbol].get(this[arrayPathSymbol]);\n    let i = cur.length;\n    let mem;\n\n    this._markModified();\n\n    while (i--) {\n      mem = cur[i];\n\n      if (mem instanceof Document) {\n        const some = values.some(function (v) {\n          return mem.equals(v);\n        });\n\n        if (some) {\n          [].splice.call(cur, i, 1);\n        }\n      } else if (~cur.indexOf.call(values, mem)) {\n        [].splice.call(cur, i, 1);\n      }\n    }\n\n    if (values[0] instanceof ArraySubdocument) {\n      this._registerAtomic('$pullDocs', values.map(function (v) {\n        return v.$__getValue('_id') || v;\n      }));\n    } else {\n      this._registerAtomic('$pullAll', values);\n    } // Might have modified child paths and then pulled, like\n    // `doc.children[1].name = 'test';` followed by\n    // `doc.children.remove(doc.children[0]);`. In this case we fall back\n    // to a `$set` on the whole array. See #3511\n\n\n    if (cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]) > 0) {\n      this._registerAtomic('$set', this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * #### Example:\n   *\n   *     const schema = Schema({ nums: [Number] });\n   *     const Model = mongoose.model('Test', schema);\n   *\n   *     const doc = await Model.create({ nums: [3, 4] });\n   *     doc.nums.push(5); // Add 5 to the end of the array\n   *     await doc.save();\n   *\n   *     // You can also pass an object with `$each` as the\n   *     // first parameter to use MongoDB's `$position`\n   *     doc.nums.push({\n   *       $each: [1, 2],\n   *       $position: 0\n   *     });\n   *     doc.nums; // [1, 2, 3, 4, 5]\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseArray\n   */\n  push() {\n    let values = arguments;\n    let atomic = values;\n    const isOverwrite = values[0] != null && utils.hasUserDefinedProperty(values[0], '$each');\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n\n    if (isOverwrite) {\n      atomic = values[0];\n      values = values[0].$each;\n    }\n\n    if (this[arraySchemaSymbol] == null) {\n      return _basePush.apply(this, values);\n    }\n\n    _checkManualPopulation(this, values);\n\n    const parent = this[arrayParentSymbol];\n    values = [].map.call(values, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, parent, undefined, undefined, {\n      skipDocumentArrayCast: true\n    });\n    let ret;\n    const atomics = this[arrayAtomicsSymbol];\n\n    this._markModified();\n\n    if (isOverwrite) {\n      atomic.$each = values;\n\n      if ((atomics.$push && atomics.$push.$each && atomics.$push.$each.length || 0) !== 0 && atomics.$push.$position != atomic.$position) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' + 'with different `$position`');\n      }\n\n      if (atomic.$position != null) {\n        [].splice.apply(arr, [atomic.$position, 0].concat(values));\n        ret = this.length;\n      } else {\n        ret = [].push.apply(arr, values);\n      }\n    } else {\n      if ((atomics.$push && atomics.$push.$each && atomics.$push.$each.length || 0) !== 0 && atomics.$push.$position != null) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' + 'with different `$position`');\n      }\n\n      atomic = values;\n      ret = [].push.apply(arr, values);\n    }\n\n    this._registerAtomic('$push', atomic);\n\n    return ret;\n  },\n\n  /**\n   * Alias of [pull](#mongoosearray_MongooseArray-pull)\n   *\n   * @see MongooseArray#pull #types_array_MongooseArray-pull\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method remove\n   */\n  remove() {\n    return this.pull.apply(this, arguments);\n  },\n\n  /**\n   * Sets the casted `val` at index `i` and marks the array modified.\n   *\n   * #### Example:\n   *\n   *     // given documents based on the following\n   *     const Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\n   *\n   *     const doc = new Doc({ array: [2,3,4] })\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *\n   *     doc.array.set(1,\"5\");\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\n   *     doc.save() // the change is saved\n   *\n   *     // VS not using array#set\n   *     doc.array[1] = \"5\";\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\n   *     doc.save() // change is not saved\n   *\n   * @return {Array} this\n   * @api public\n   * @method set\n   * @memberOf MongooseArray\n   */\n  set(i, val, skipModified) {\n    const arr = this.__array;\n\n    if (skipModified) {\n      arr[i] = val;\n      return this;\n    }\n\n    const value = methods._cast.call(this, val, i);\n\n    methods._markModified.call(this, i);\n\n    arr[i] = value;\n    return this;\n  },\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * #### Example:\n   *\n   *     doc.array = [2,3];\n   *     const res = doc.array.shift();\n   *     console.log(res) // 2\n   *     console.log(doc.array) // [3]\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method shift\n   * @memberOf MongooseArray\n   */\n  shift() {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n\n    this._markModified();\n\n    const ret = [].shift.call(arr);\n\n    this._registerAtomic('$set', this);\n\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method sort\n   * @memberOf MongooseArray\n   * @see https://masteringjs.io/tutorials/fundamentals/array-sort\n   */\n  sort() {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    const ret = [].sort.apply(arr, arguments);\n\n    this._registerAtomic('$set', this);\n\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method splice\n   * @memberOf MongooseArray\n   * @see https://masteringjs.io/tutorials/fundamentals/array-splice\n   */\n  splice() {\n    let ret;\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n\n    _checkManualPopulation(this, Array.prototype.slice.call(arguments, 2));\n\n    if (arguments.length) {\n      let vals;\n\n      if (this[arraySchemaSymbol] == null) {\n        vals = arguments;\n      } else {\n        vals = [];\n\n        for (let i = 0; i < arguments.length; ++i) {\n          vals[i] = i < 2 ? arguments[i] : this._cast(arguments[i], arguments[0] + (i - 2));\n        }\n      }\n\n      ret = [].splice.apply(arr, vals);\n\n      this._registerAtomic('$set', this);\n    }\n\n    return ret;\n  },\n\n  /*!\n   * ignore\n   */\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  },\n\n  /**\n   * Returns a native js Array.\n   *\n   * @param {Object} options\n   * @return {Array}\n   * @api public\n   * @method toObject\n   * @memberOf MongooseArray\n   */\n  toObject(options) {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n\n    if (options && options.depopulate) {\n      options = utils.clone(options);\n      options._isNested = true; // Ensure return value is a vanilla array, because in Node.js 6+ `map()`\n      // is smart enough to use the inherited array's constructor.\n\n      return [].concat(arr).map(function (doc) {\n        return doc instanceof Document ? doc.toObject(options) : doc;\n      });\n    }\n\n    return [].concat(arr);\n  },\n\n  $toObject() {\n    return this.constructor.prototype.toObject.apply(this, arguments);\n  },\n\n  /**\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwriting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method unshift\n   * @memberOf MongooseArray\n   */\n  unshift() {\n    _checkManualPopulation(this, arguments);\n\n    let values;\n\n    if (this[arraySchemaSymbol] == null) {\n      values = arguments;\n    } else {\n      values = [].map.call(arguments, this._cast, this);\n      values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    }\n\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n\n    this._markModified();\n\n    [].unshift.apply(arr, values);\n\n    this._registerAtomic('$set', this);\n\n    return this.length;\n  }\n\n};\n/*!\n * ignore\n */\n\nfunction _isAllSubdocs(docs, ref) {\n  if (!ref) {\n    return false;\n  }\n\n  for (const arg of docs) {\n    if (arg == null) {\n      return false;\n    }\n\n    const model = arg.constructor;\n\n    if (!(arg instanceof Document) || model.modelName !== ref && model.baseModelName !== ref) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/*!\n * ignore\n */\n\n\nfunction _checkManualPopulation(arr, docs) {\n  const ref = arr == null ? null : arr[arraySchemaSymbol] && arr[arraySchemaSymbol].caster && arr[arraySchemaSymbol].caster.options && arr[arraySchemaSymbol].caster.options.ref || null;\n\n  if (arr.length === 0 && docs.length !== 0) {\n    if (_isAllSubdocs(docs, ref)) {\n      arr[arrayParentSymbol].$populated(arr[arrayPathSymbol], [], {\n        [populateModelSymbol]: docs[0].constructor\n      });\n    }\n  }\n}\n\nconst returnVanillaArrayMethods = ['filter', 'flat', 'flatMap', 'map', 'slice'];\n\nfor (const method of returnVanillaArrayMethods) {\n  if (Array.prototype[method] == null) {\n    continue;\n  }\n\n  methods[method] = function () {\n    const _arr = utils.isMongooseArray(this) ? this.__array : this;\n\n    const arr = [].concat(_arr);\n    return arr[method].apply(arr, arguments);\n  };\n}\n\nmodule.exports = methods;","map":{"version":3,"names":["Document","require","ArraySubdocument","MongooseError","cleanModifiedSubpaths","internalToObjectOptions","utils","isBsonType","arrayAtomicsSymbol","arrayParentSymbol","arrayPathSymbol","arraySchemaSymbol","populateModelSymbol","slicedSymbol","Symbol","_basePush","Array","prototype","push","methods","$__getAtomics","ret","keys","Object","i","length","opts","assign","_isNested","toObject","op","val","isMongooseObject","isArray","call","$each","valueOf","$atomics","$parent","$path","$shift","_registerAtomic","_markModified","_shifted","shift","$pop","_popped","pop","$schema","_cast","value","populated","Model","parent","$populated","undefined","options","Buffer","isBuffer","isObject","_id","isDisc","schema","discriminatorMapping","key","caster","applySetters","_mapCast","index","elem","dirtyPath","arguments","endsWith","markModified","$set","atomics","_this","once","selector","concat","pullOp","apply","map","v","transform","virtuals","$in","$push","hasUserDefinedProperty","addToSet","_checkManualPopulation","values","added","type","Date","rawValues","isMongooseArray","__array","rawArray","forEach","found","some","doc","equals","d","indexOf","hasAtomics","isPOJO","includes","obj","fromIndex","toString","len","inspect","JSON","stringify","nonAtomicPush","pull","cur","get","mem","splice","$__getValue","atomic","isOverwrite","arr","skipDocumentArrayCast","$position","remove","set","skipModified","sort","slice","vals","toBSON","depopulate","clone","$toObject","constructor","unshift","_isAllSubdocs","docs","ref","arg","model","modelName","baseModelName","returnVanillaArrayMethods","method","_arr","module","exports"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/types/array/methods/index.js"],"sourcesContent":["'use strict';\n\nconst Document = require('../../../document');\nconst ArraySubdocument = require('../../ArraySubdocument');\nconst MongooseError = require('../../../error/mongooseError');\nconst cleanModifiedSubpaths = require('../../../helpers/document/cleanModifiedSubpaths');\nconst internalToObjectOptions = require('../../../options').internalToObjectOptions;\nconst utils = require('../../../utils');\nconst isBsonType = require('../../../helpers/isBsonType');\n\nconst arrayAtomicsSymbol = require('../../../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../../../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../../../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../../../helpers/symbols').arraySchemaSymbol;\nconst populateModelSymbol = require('../../../helpers/symbols').populateModelSymbol;\nconst slicedSymbol = Symbol('mongoose#Array#sliced');\n\nconst _basePush = Array.prototype.push;\n\n/*!\n * ignore\n */\n\nconst methods = {\n  /**\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\n   *\n   * If no atomics exist, we return all array values after conversion.\n   *\n   * @return {Array}\n   * @method $__getAtomics\n   * @memberOf MongooseArray\n   * @instance\n   * @api private\n   */\n\n  $__getAtomics() {\n    const ret = [];\n    const keys = Object.keys(this[arrayAtomicsSymbol] || {});\n    let i = keys.length;\n\n    const opts = Object.assign({}, internalToObjectOptions, { _isNested: true });\n\n    if (i === 0) {\n      ret[0] = ['$set', this.toObject(opts)];\n      return ret;\n    }\n\n    while (i--) {\n      const op = keys[i];\n      let val = this[arrayAtomicsSymbol][op];\n\n      // the atomic values which are arrays are not MongooseArrays. we\n      // need to convert their elements as if they were MongooseArrays\n      // to handle populated arrays versus DocumentArrays properly.\n      if (utils.isMongooseObject(val)) {\n        val = val.toObject(opts);\n      } else if (Array.isArray(val)) {\n        val = this.toObject.call(val, opts);\n      } else if (val != null && Array.isArray(val.$each)) {\n        val.$each = this.toObject.call(val.$each, opts);\n      } else if (val != null && typeof val.valueOf === 'function') {\n        val = val.valueOf();\n      }\n\n      if (op === '$addToSet') {\n        val = { $each: val };\n      }\n\n      ret.push([op, val]);\n    }\n\n    return ret;\n  },\n\n  /*!\n   * ignore\n   */\n\n  $atomics() {\n    return this[arrayAtomicsSymbol];\n  },\n\n  /*!\n   * ignore\n   */\n\n  $parent() {\n    return this[arrayParentSymbol];\n  },\n\n  /*!\n   * ignore\n   */\n\n  $path() {\n    return this[arrayPathSymbol];\n  },\n\n  /**\n   * Atomically shifts the array at most one time per document `save()`.\n   *\n   * #### Note:\n   *\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const shifted = doc.array.$shift();\n   *      console.log(shifted); // 1\n   *      console.log(doc.array); // [2,3]\n   *\n   *      // no affect\n   *      shifted = doc.array.$shift();\n   *      console.log(doc.array); // [2,3]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $shift works again\n   *        shifted = doc.array.$shift();\n   *        console.log(shifted ); // 2\n   *        console.log(doc.array); // [3]\n   *      })\n   *\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method $shift\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   */\n\n  $shift() {\n    this._registerAtomic('$pop', -1);\n    this._markModified();\n\n    // only allow shifting once\n    if (this._shifted) {\n      return;\n    }\n    this._shifted = true;\n\n    return [].shift.call(this);\n  },\n\n  /**\n   * Pops the array atomically at most one time per document `save()`.\n   *\n   * #### NOTE:\n   *\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      const popped = doc.array.$pop();\n   *      console.log(popped); // 3\n   *      console.log(doc.array); // [1,2]\n   *\n   *      // no affect\n   *      popped = doc.array.$pop();\n   *      console.log(doc.array); // [1,2]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $pop works again\n   *        popped = doc.array.$pop();\n   *        console.log(popped); // 2\n   *        console.log(doc.array); // [1]\n   *      })\n   *\n   * @api public\n   * @method $pop\n   * @memberOf MongooseArray\n   * @instance\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   * @method $pop\n   * @memberOf MongooseArray\n   */\n\n  $pop() {\n    this._registerAtomic('$pop', 1);\n    this._markModified();\n\n    // only allow popping once\n    if (this._popped) {\n      return;\n    }\n    this._popped = true;\n\n    return [].pop.call(this);\n  },\n\n  /*!\n   * ignore\n   */\n\n  $schema() {\n    return this[arraySchemaSymbol];\n  },\n\n  /**\n   * Casts a member based on this arrays schema.\n   *\n   * @param {any} value\n   * @return value the casted value\n   * @method _cast\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _cast(value) {\n    let populated = false;\n    let Model;\n\n    const parent = this[arrayParentSymbol];\n    if (parent) {\n      populated = parent.$populated(this[arrayPathSymbol], true);\n    }\n\n    if (populated && value !== null && value !== undefined) {\n      // cast to the populated Models schema\n      Model = populated.options[populateModelSymbol];\n\n      // only objects are permitted so we can safely assume that\n      // non-objects are to be interpreted as _id\n      if (Buffer.isBuffer(value) ||\n          isBsonType(value, 'ObjectID') || !utils.isObject(value)) {\n        value = { _id: value };\n      }\n\n      // gh-2399\n      // we should cast model only when it's not a discriminator\n      const isDisc = value.schema && value.schema.discriminatorMapping &&\n          value.schema.discriminatorMapping.key !== undefined;\n      if (!isDisc) {\n        value = new Model(value);\n      }\n      return this[arraySchemaSymbol].caster.applySetters(value, parent, true);\n    }\n\n    return this[arraySchemaSymbol].caster.applySetters(value, parent, false);\n  },\n\n  /**\n   * Internal helper for .map()\n   *\n   * @api private\n   * @return {Number}\n   * @method _mapCast\n   * @memberOf MongooseArray\n   */\n\n  _mapCast(val, index) {\n    return this._cast(val, this.length + index);\n  },\n\n  /**\n   * Marks this array as modified.\n   *\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\n   *\n   * @param {ArraySubdocument} subdoc the embedded doc that invoked this method on the Array\n   * @param {String} embeddedPath the path which changed in the subdoc\n   * @method _markModified\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _markModified(elem) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n\n      if (arguments.length) {\n        dirtyPath = dirtyPath + '.' + elem;\n      }\n\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n\n      parent.markModified(dirtyPath, arguments.length !== 0 ? elem : parent);\n    }\n\n    return this;\n  },\n\n  /**\n   * Register an atomic operation with the parent.\n   *\n   * @param {Array} op operation\n   * @param {any} val\n   * @method _registerAtomic\n   * @api private\n   * @memberOf MongooseArray\n   */\n\n  _registerAtomic(op, val) {\n    if (this[slicedSymbol]) {\n      return;\n    }\n    if (op === '$set') {\n      // $set takes precedence over all other ops.\n      // mark entire array modified.\n      this[arrayAtomicsSymbol] = { $set: val };\n      cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]);\n      this._markModified();\n      return this;\n    }\n\n    const atomics = this[arrayAtomicsSymbol];\n\n    // reset pop/shift after save\n    if (op === '$pop' && !('$pop' in atomics)) {\n      const _this = this;\n      this[arrayParentSymbol].once('save', function() {\n        _this._popped = _this._shifted = null;\n      });\n    }\n\n    // check for impossible $atomic combos (Mongo denies more than one\n    // $atomic op on a single path\n    if (atomics.$set || Object.keys(atomics).length && !(op in atomics)) {\n      // a different op was previously registered.\n      // save the entire thing.\n      this[arrayAtomicsSymbol] = { $set: this };\n      return this;\n    }\n\n    let selector;\n\n    if (op === '$pullAll' || op === '$addToSet') {\n      atomics[op] || (atomics[op] = []);\n      atomics[op] = atomics[op].concat(val);\n    } else if (op === '$pullDocs') {\n      const pullOp = atomics['$pull'] || (atomics['$pull'] = {});\n      if (val[0] instanceof ArraySubdocument) {\n        selector = pullOp['$or'] || (pullOp['$or'] = []);\n        Array.prototype.push.apply(selector, val.map(function(v) {\n          return v.toObject({ transform: false, virtuals: false });\n        }));\n      } else {\n        selector = pullOp['_id'] || (pullOp['_id'] = { $in: [] });\n        selector['$in'] = selector['$in'].concat(val);\n      }\n    } else if (op === '$push') {\n      atomics.$push = atomics.$push || { $each: [] };\n      if (val != null && utils.hasUserDefinedProperty(val, '$each')) {\n        atomics.$push = val;\n      } else {\n        atomics.$push.$each = atomics.$push.$each.concat(val);\n      }\n    } else {\n      atomics[op] = val;\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds values to the array if not already present.\n   *\n   * #### Example:\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *     const added = doc.array.addToSet(4,5);\n   *     console.log(doc.array) // [2,3,4,5]\n   *     console.log(added)     // [5]\n   *\n   * @param {any} [args...]\n   * @return {Array} the values that were added\n   * @memberOf MongooseArray\n   * @api public\n   * @method addToSet\n   */\n\n  addToSet() {\n    _checkManualPopulation(this, arguments);\n\n    let values = [].map.call(arguments, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    const added = [];\n    let type = '';\n    if (values[0] instanceof ArraySubdocument) {\n      type = 'doc';\n    } else if (values[0] instanceof Date) {\n      type = 'date';\n    }\n\n    const rawValues = utils.isMongooseArray(values) ? values.__array : this;\n    const rawArray = utils.isMongooseArray(this) ? this.__array : this;\n\n    rawValues.forEach(function(v) {\n      let found;\n      const val = +v;\n      switch (type) {\n        case 'doc':\n          found = this.some(function(doc) {\n            return doc.equals(v);\n          });\n          break;\n        case 'date':\n          found = this.some(function(d) {\n            return +d === val;\n          });\n          break;\n        default:\n          found = ~this.indexOf(v);\n      }\n\n      if (!found) {\n        this._markModified();\n        rawArray.push(v);\n        this._registerAtomic('$addToSet', v);\n        [].push.call(added, v);\n      }\n    }, this);\n\n    return added;\n  },\n\n  /**\n   * Returns the number of pending atomic operations to send to the db for this array.\n   *\n   * @api private\n   * @return {Number}\n   * @method hasAtomics\n   * @memberOf MongooseArray\n   */\n\n  hasAtomics() {\n    if (!utils.isPOJO(this[arrayAtomicsSymbol])) {\n      return 0;\n    }\n\n    return Object.keys(this[arrayAtomicsSymbol]).length;\n  },\n\n  /**\n   * Return whether or not the `obj` is included in the array.\n   *\n   * @param {Object} obj the item to check\n   * @param {Number} fromIndex\n   * @return {Boolean}\n   * @api public\n   * @method includes\n   * @memberOf MongooseArray\n   */\n\n  includes(obj, fromIndex) {\n    const ret = this.indexOf(obj, fromIndex);\n    return ret !== -1;\n  },\n\n  /**\n   * Return the index of `obj` or `-1` if not found.\n   *\n   * @param {Object} obj the item to look for\n   * @param {Number} fromIndex\n   * @return {Number}\n   * @api public\n   * @method indexOf\n   * @memberOf MongooseArray\n   */\n\n  indexOf(obj, fromIndex) {\n    if (isBsonType(obj, 'ObjectID')) {\n      obj = obj.toString();\n    }\n\n    fromIndex = fromIndex == null ? 0 : fromIndex;\n    const len = this.length;\n    for (let i = fromIndex; i < len; ++i) {\n      if (obj == this[i]) {\n        return i;\n      }\n    }\n    return -1;\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @api public\n   * @method inspect\n   * @memberOf MongooseArray\n   */\n\n  inspect() {\n    return JSON.stringify(this);\n  },\n\n  /**\n   * Pushes items to the array non-atomically.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @param {any} [args...]\n   * @api public\n   * @method nonAtomicPush\n   * @memberOf MongooseArray\n   */\n\n  nonAtomicPush() {\n    const values = [].map.call(arguments, this._mapCast, this);\n    this._markModified();\n    const ret = [].push.apply(this, values);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwriting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @see MongooseArray#$pop #types_array_MongooseArray-%24pop\n   * @api public\n   * @method pop\n   * @memberOf MongooseArray\n   */\n\n  pop() {\n    this._markModified();\n    const ret = [].pop.call(this);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n\n  /**\n   * Pulls items from the array atomically. Equality is determined by casting\n   * the provided value to an embedded document and comparing using\n   * [the `Document.equals()` function.](/docs/api.html#document_Document-equals)\n   *\n   * #### Examples:\n   *\n   *     doc.array.pull(ObjectId)\n   *     doc.array.pull({ _id: 'someId' })\n   *     doc.array.pull(36)\n   *     doc.array.pull('tag 1', 'tag 2')\n   *\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\n   *\n   * Or we may passing the _id directly and let mongoose take care of it.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull(4815162342); // works\n   *\n   * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.\n   *\n   * @param {any} [args...]\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @method pull\n   * @memberOf MongooseArray\n   */\n\n  pull() {\n    const values = [].map.call(arguments, this._cast, this);\n    const cur = this[arrayParentSymbol].get(this[arrayPathSymbol]);\n    let i = cur.length;\n    let mem;\n    this._markModified();\n\n    while (i--) {\n      mem = cur[i];\n      if (mem instanceof Document) {\n        const some = values.some(function(v) {\n          return mem.equals(v);\n        });\n        if (some) {\n          [].splice.call(cur, i, 1);\n        }\n      } else if (~cur.indexOf.call(values, mem)) {\n        [].splice.call(cur, i, 1);\n      }\n    }\n\n    if (values[0] instanceof ArraySubdocument) {\n      this._registerAtomic('$pullDocs', values.map(function(v) {\n        return v.$__getValue('_id') || v;\n      }));\n    } else {\n      this._registerAtomic('$pullAll', values);\n    }\n\n\n    // Might have modified child paths and then pulled, like\n    // `doc.children[1].name = 'test';` followed by\n    // `doc.children.remove(doc.children[0]);`. In this case we fall back\n    // to a `$set` on the whole array. See #3511\n    if (cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]) > 0) {\n      this._registerAtomic('$set', this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * #### Example:\n   *\n   *     const schema = Schema({ nums: [Number] });\n   *     const Model = mongoose.model('Test', schema);\n   *\n   *     const doc = await Model.create({ nums: [3, 4] });\n   *     doc.nums.push(5); // Add 5 to the end of the array\n   *     await doc.save();\n   *\n   *     // You can also pass an object with `$each` as the\n   *     // first parameter to use MongoDB's `$position`\n   *     doc.nums.push({\n   *       $each: [1, 2],\n   *       $position: 0\n   *     });\n   *     doc.nums; // [1, 2, 3, 4, 5]\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseArray\n   */\n\n  push() {\n    let values = arguments;\n    let atomic = values;\n    const isOverwrite = values[0] != null &&\n      utils.hasUserDefinedProperty(values[0], '$each');\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    if (isOverwrite) {\n      atomic = values[0];\n      values = values[0].$each;\n    }\n\n    if (this[arraySchemaSymbol] == null) {\n      return _basePush.apply(this, values);\n    }\n\n    _checkManualPopulation(this, values);\n\n    const parent = this[arrayParentSymbol];\n    values = [].map.call(values, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, parent, undefined,\n      undefined, { skipDocumentArrayCast: true });\n    let ret;\n    const atomics = this[arrayAtomicsSymbol];\n    this._markModified();\n    if (isOverwrite) {\n      atomic.$each = values;\n\n      if ((atomics.$push && atomics.$push.$each && atomics.$push.$each.length || 0) !== 0 &&\n          atomics.$push.$position != atomic.$position) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' +\n          'with different `$position`');\n      }\n\n      if (atomic.$position != null) {\n        [].splice.apply(arr, [atomic.$position, 0].concat(values));\n        ret = this.length;\n      } else {\n        ret = [].push.apply(arr, values);\n      }\n    } else {\n      if ((atomics.$push && atomics.$push.$each && atomics.$push.$each.length || 0) !== 0 &&\n          atomics.$push.$position != null) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' +\n          'with different `$position`');\n      }\n      atomic = values;\n      ret = [].push.apply(arr, values);\n    }\n\n    this._registerAtomic('$push', atomic);\n    return ret;\n  },\n\n  /**\n   * Alias of [pull](#mongoosearray_MongooseArray-pull)\n   *\n   * @see MongooseArray#pull #types_array_MongooseArray-pull\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @memberOf MongooseArray\n   * @instance\n   * @method remove\n   */\n\n  remove() {\n    return this.pull.apply(this, arguments);\n  },\n\n  /**\n   * Sets the casted `val` at index `i` and marks the array modified.\n   *\n   * #### Example:\n   *\n   *     // given documents based on the following\n   *     const Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\n   *\n   *     const doc = new Doc({ array: [2,3,4] })\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *\n   *     doc.array.set(1,\"5\");\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\n   *     doc.save() // the change is saved\n   *\n   *     // VS not using array#set\n   *     doc.array[1] = \"5\";\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\n   *     doc.save() // change is not saved\n   *\n   * @return {Array} this\n   * @api public\n   * @method set\n   * @memberOf MongooseArray\n   */\n\n  set(i, val, skipModified) {\n    const arr = this.__array;\n    if (skipModified) {\n      arr[i] = val;\n      return this;\n    }\n    const value = methods._cast.call(this, val, i);\n    methods._markModified.call(this, i);\n    arr[i] = value;\n    return this;\n  },\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * #### Example:\n   *\n   *     doc.array = [2,3];\n   *     const res = doc.array.shift();\n   *     console.log(res) // 2\n   *     console.log(doc.array) // [3]\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method shift\n   * @memberOf MongooseArray\n   */\n\n  shift() {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    this._markModified();\n    const ret = [].shift.call(arr);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method sort\n   * @memberOf MongooseArray\n   * @see https://masteringjs.io/tutorials/fundamentals/array-sort\n   */\n\n  sort() {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    const ret = [].sort.apply(arr, arguments);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method splice\n   * @memberOf MongooseArray\n   * @see https://masteringjs.io/tutorials/fundamentals/array-splice\n   */\n\n  splice() {\n    let ret;\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n\n    _checkManualPopulation(this, Array.prototype.slice.call(arguments, 2));\n\n    if (arguments.length) {\n      let vals;\n      if (this[arraySchemaSymbol] == null) {\n        vals = arguments;\n      } else {\n        vals = [];\n        for (let i = 0; i < arguments.length; ++i) {\n          vals[i] = i < 2 ?\n            arguments[i] :\n            this._cast(arguments[i], arguments[0] + (i - 2));\n        }\n      }\n\n      ret = [].splice.apply(arr, vals);\n      this._registerAtomic('$set', this);\n    }\n\n    return ret;\n  },\n\n  /*!\n   * ignore\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  },\n\n  /**\n   * Returns a native js Array.\n   *\n   * @param {Object} options\n   * @return {Array}\n   * @api public\n   * @method toObject\n   * @memberOf MongooseArray\n   */\n\n  toObject(options) {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    if (options && options.depopulate) {\n      options = utils.clone(options);\n      options._isNested = true;\n      // Ensure return value is a vanilla array, because in Node.js 6+ `map()`\n      // is smart enough to use the inherited array's constructor.\n      return [].concat(arr).map(function(doc) {\n        return doc instanceof Document\n          ? doc.toObject(options)\n          : doc;\n      });\n    }\n\n    return [].concat(arr);\n  },\n\n  $toObject() {\n    return this.constructor.prototype.toObject.apply(this, arguments);\n  },\n  /**\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * #### Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwriting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method unshift\n   * @memberOf MongooseArray\n   */\n\n  unshift() {\n    _checkManualPopulation(this, arguments);\n\n    let values;\n    if (this[arraySchemaSymbol] == null) {\n      values = arguments;\n    } else {\n      values = [].map.call(arguments, this._cast, this);\n      values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    }\n\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    this._markModified();\n    [].unshift.apply(arr, values);\n    this._registerAtomic('$set', this);\n    return this.length;\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _isAllSubdocs(docs, ref) {\n  if (!ref) {\n    return false;\n  }\n\n  for (const arg of docs) {\n    if (arg == null) {\n      return false;\n    }\n    const model = arg.constructor;\n    if (!(arg instanceof Document) ||\n      (model.modelName !== ref && model.baseModelName !== ref)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/*!\n * ignore\n */\n\nfunction _checkManualPopulation(arr, docs) {\n  const ref = arr == null ?\n    null :\n    arr[arraySchemaSymbol] && arr[arraySchemaSymbol].caster && arr[arraySchemaSymbol].caster.options && arr[arraySchemaSymbol].caster.options.ref || null;\n  if (arr.length === 0 &&\n      docs.length !== 0) {\n    if (_isAllSubdocs(docs, ref)) {\n      arr[arrayParentSymbol].$populated(arr[arrayPathSymbol], [], {\n        [populateModelSymbol]: docs[0].constructor\n      });\n    }\n  }\n}\n\nconst returnVanillaArrayMethods = [\n  'filter',\n  'flat',\n  'flatMap',\n  'map',\n  'slice'\n];\nfor (const method of returnVanillaArrayMethods) {\n  if (Array.prototype[method] == null) {\n    continue;\n  }\n\n  methods[method] = function() {\n    const _arr = utils.isMongooseArray(this) ? this.__array : this;\n    const arr = [].concat(_arr);\n\n    return arr[method].apply(arr, arguments);\n  };\n}\n\nmodule.exports = methods;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}