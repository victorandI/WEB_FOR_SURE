{"ast":null,"code":"'use strict';\n/*!\n * ignore\n */\n\nconst get = require('../get');\n\nmodule.exports = applyTimestampsToUpdate;\n/*!\n * ignore\n */\n\nfunction applyTimestampsToUpdate(now, createdAt, updatedAt, currentUpdate, options) {\n  const updates = currentUpdate;\n  let _updates = updates;\n  const overwrite = get(options, 'overwrite', false);\n  const timestamps = get(options, 'timestamps', true); // Support skipping timestamps at the query level, see gh-6980\n\n  if (!timestamps || updates == null) {\n    return currentUpdate;\n  }\n\n  const skipCreatedAt = timestamps != null && timestamps.createdAt === false;\n  const skipUpdatedAt = timestamps != null && timestamps.updatedAt === false;\n\n  if (overwrite) {\n    if (currentUpdate && currentUpdate.$set) {\n      currentUpdate = currentUpdate.$set;\n      updates.$set = {};\n      _updates = updates.$set;\n    }\n\n    if (!skipUpdatedAt && updatedAt && !currentUpdate[updatedAt]) {\n      _updates[updatedAt] = now;\n    }\n\n    if (!skipCreatedAt && createdAt && !currentUpdate[createdAt]) {\n      _updates[createdAt] = now;\n    }\n\n    return updates;\n  }\n\n  currentUpdate = currentUpdate || {};\n\n  if (Array.isArray(updates)) {\n    // Update with aggregation pipeline\n    updates.push({\n      $set: {\n        [updatedAt]: now\n      }\n    });\n    return updates;\n  }\n\n  updates.$set = updates.$set || {};\n\n  if (!skipUpdatedAt && updatedAt && (!currentUpdate.$currentDate || !currentUpdate.$currentDate[updatedAt])) {\n    let timestampSet = false;\n\n    if (updatedAt.indexOf('.') !== -1) {\n      const pieces = updatedAt.split('.');\n\n      for (let i = 1; i < pieces.length; ++i) {\n        const remnant = pieces.slice(-i).join('.');\n        const start = pieces.slice(0, -i).join('.');\n\n        if (currentUpdate[start] != null) {\n          currentUpdate[start][remnant] = now;\n          timestampSet = true;\n          break;\n        } else if (currentUpdate.$set && currentUpdate.$set[start]) {\n          currentUpdate.$set[start][remnant] = now;\n          timestampSet = true;\n          break;\n        }\n      }\n    }\n\n    if (!timestampSet) {\n      updates.$set[updatedAt] = now;\n    }\n\n    if (updates.hasOwnProperty(updatedAt)) {\n      delete updates[updatedAt];\n    }\n  }\n\n  if (!skipCreatedAt && createdAt) {\n    if (currentUpdate[createdAt]) {\n      delete currentUpdate[createdAt];\n    }\n\n    if (currentUpdate.$set && currentUpdate.$set[createdAt]) {\n      delete currentUpdate.$set[createdAt];\n    }\n\n    let timestampSet = false;\n\n    if (createdAt.indexOf('.') !== -1) {\n      const pieces = createdAt.split('.');\n\n      for (let i = 1; i < pieces.length; ++i) {\n        const remnant = pieces.slice(-i).join('.');\n        const start = pieces.slice(0, -i).join('.');\n\n        if (currentUpdate[start] != null) {\n          currentUpdate[start][remnant] = now;\n          timestampSet = true;\n          break;\n        } else if (currentUpdate.$set && currentUpdate.$set[start]) {\n          currentUpdate.$set[start][remnant] = now;\n          timestampSet = true;\n          break;\n        }\n      }\n    }\n\n    if (!timestampSet) {\n      updates.$setOnInsert = updates.$setOnInsert || {};\n      updates.$setOnInsert[createdAt] = now;\n    }\n  }\n\n  if (Object.keys(updates.$set).length === 0) {\n    delete updates.$set;\n  }\n\n  return updates;\n}","map":{"version":3,"names":["get","require","module","exports","applyTimestampsToUpdate","now","createdAt","updatedAt","currentUpdate","options","updates","_updates","overwrite","timestamps","skipCreatedAt","skipUpdatedAt","$set","Array","isArray","push","$currentDate","timestampSet","indexOf","pieces","split","i","length","remnant","slice","join","start","hasOwnProperty","$setOnInsert","Object","keys"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/helpers/update/applyTimestampsToUpdate.js"],"sourcesContent":["'use strict';\n\n/*!\n * ignore\n */\n\nconst get = require('../get');\n\nmodule.exports = applyTimestampsToUpdate;\n\n/*!\n * ignore\n */\n\nfunction applyTimestampsToUpdate(now, createdAt, updatedAt, currentUpdate, options) {\n  const updates = currentUpdate;\n  let _updates = updates;\n  const overwrite = get(options, 'overwrite', false);\n  const timestamps = get(options, 'timestamps', true);\n\n  // Support skipping timestamps at the query level, see gh-6980\n  if (!timestamps || updates == null) {\n    return currentUpdate;\n  }\n\n  const skipCreatedAt = timestamps != null && timestamps.createdAt === false;\n  const skipUpdatedAt = timestamps != null && timestamps.updatedAt === false;\n\n  if (overwrite) {\n    if (currentUpdate && currentUpdate.$set) {\n      currentUpdate = currentUpdate.$set;\n      updates.$set = {};\n      _updates = updates.$set;\n    }\n    if (!skipUpdatedAt && updatedAt && !currentUpdate[updatedAt]) {\n      _updates[updatedAt] = now;\n    }\n    if (!skipCreatedAt && createdAt && !currentUpdate[createdAt]) {\n      _updates[createdAt] = now;\n    }\n    return updates;\n  }\n  currentUpdate = currentUpdate || {};\n\n  if (Array.isArray(updates)) {\n    // Update with aggregation pipeline\n    updates.push({ $set: { [updatedAt]: now } });\n\n    return updates;\n  }\n\n  updates.$set = updates.$set || {};\n  if (!skipUpdatedAt && updatedAt &&\n      (!currentUpdate.$currentDate || !currentUpdate.$currentDate[updatedAt])) {\n    let timestampSet = false;\n    if (updatedAt.indexOf('.') !== -1) {\n      const pieces = updatedAt.split('.');\n      for (let i = 1; i < pieces.length; ++i) {\n        const remnant = pieces.slice(-i).join('.');\n        const start = pieces.slice(0, -i).join('.');\n        if (currentUpdate[start] != null) {\n          currentUpdate[start][remnant] = now;\n          timestampSet = true;\n          break;\n        } else if (currentUpdate.$set && currentUpdate.$set[start]) {\n          currentUpdate.$set[start][remnant] = now;\n          timestampSet = true;\n          break;\n        }\n      }\n    }\n\n    if (!timestampSet) {\n      updates.$set[updatedAt] = now;\n    }\n\n    if (updates.hasOwnProperty(updatedAt)) {\n      delete updates[updatedAt];\n    }\n  }\n\n  if (!skipCreatedAt && createdAt) {\n    if (currentUpdate[createdAt]) {\n      delete currentUpdate[createdAt];\n    }\n    if (currentUpdate.$set && currentUpdate.$set[createdAt]) {\n      delete currentUpdate.$set[createdAt];\n    }\n    let timestampSet = false;\n    if (createdAt.indexOf('.') !== -1) {\n      const pieces = createdAt.split('.');\n      for (let i = 1; i < pieces.length; ++i) {\n        const remnant = pieces.slice(-i).join('.');\n        const start = pieces.slice(0, -i).join('.');\n        if (currentUpdate[start] != null) {\n          currentUpdate[start][remnant] = now;\n          timestampSet = true;\n          break;\n        } else if (currentUpdate.$set && currentUpdate.$set[start]) {\n          currentUpdate.$set[start][remnant] = now;\n          timestampSet = true;\n          break;\n        }\n      }\n    }\n\n    if (!timestampSet) {\n      updates.$setOnInsert = updates.$setOnInsert || {};\n      updates.$setOnInsert[createdAt] = now;\n    }\n  }\n\n  if (Object.keys(updates.$set).length === 0) {\n    delete updates.$set;\n  }\n  return updates;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}