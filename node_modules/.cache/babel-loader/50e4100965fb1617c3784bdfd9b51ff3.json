{"ast":null,"code":"/*!\n * Module requirements.\n */\n'use strict';\n\nconst castArraysOfNumbers = require('./helpers').castArraysOfNumbers;\n\nconst castToNumber = require('./helpers').castToNumber;\n/*!\n * ignore\n */\n\n\nexports.cast$geoIntersects = cast$geoIntersects;\nexports.cast$near = cast$near;\nexports.cast$within = cast$within;\n\nfunction cast$near(val) {\n  const SchemaArray = require('../array');\n\n  if (Array.isArray(val)) {\n    castArraysOfNumbers(val, this);\n    return val;\n  }\n\n  _castMinMaxDistance(this, val);\n\n  if (val && val.$geometry) {\n    return cast$geometry(val, this);\n  }\n\n  if (!Array.isArray(val)) {\n    throw new TypeError('$near must be either an array or an object ' + 'with a $geometry property');\n  }\n\n  return SchemaArray.prototype.castForQuery.call(this, val);\n}\n\nfunction cast$geometry(val, self) {\n  switch (val.$geometry.type) {\n    case 'Polygon':\n    case 'LineString':\n    case 'Point':\n      castArraysOfNumbers(val.$geometry.coordinates, self);\n      break;\n\n    default:\n      // ignore unknowns\n      break;\n  }\n\n  _castMinMaxDistance(self, val);\n\n  return val;\n}\n\nfunction cast$within(val) {\n  _castMinMaxDistance(this, val);\n\n  if (val.$box || val.$polygon) {\n    const type = val.$box ? '$box' : '$polygon';\n    val[type].forEach(arr => {\n      if (!Array.isArray(arr)) {\n        const msg = 'Invalid $within $box argument. ' + 'Expected an array, received ' + arr;\n        throw new TypeError(msg);\n      }\n\n      arr.forEach((v, i) => {\n        arr[i] = castToNumber.call(this, v);\n      });\n    });\n  } else if (val.$center || val.$centerSphere) {\n    const type = val.$center ? '$center' : '$centerSphere';\n    val[type].forEach((item, i) => {\n      if (Array.isArray(item)) {\n        item.forEach((v, j) => {\n          item[j] = castToNumber.call(this, v);\n        });\n      } else {\n        val[type][i] = castToNumber.call(this, item);\n      }\n    });\n  } else if (val.$geometry) {\n    cast$geometry(val, this);\n  }\n\n  return val;\n}\n\nfunction cast$geoIntersects(val) {\n  const geo = val.$geometry;\n\n  if (!geo) {\n    return;\n  }\n\n  cast$geometry(val, this);\n  return val;\n}\n\nfunction _castMinMaxDistance(self, val) {\n  if (val.$maxDistance) {\n    val.$maxDistance = castToNumber.call(self, val.$maxDistance);\n  }\n\n  if (val.$minDistance) {\n    val.$minDistance = castToNumber.call(self, val.$minDistance);\n  }\n}","map":{"version":3,"names":["castArraysOfNumbers","require","castToNumber","exports","cast$geoIntersects","cast$near","cast$within","val","SchemaArray","Array","isArray","_castMinMaxDistance","$geometry","cast$geometry","TypeError","prototype","castForQuery","call","self","type","coordinates","$box","$polygon","forEach","arr","msg","v","i","$center","$centerSphere","item","j","geo","$maxDistance","$minDistance"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/schema/operators/geospatial.js"],"sourcesContent":["/*!\n * Module requirements.\n */\n\n'use strict';\n\nconst castArraysOfNumbers = require('./helpers').castArraysOfNumbers;\nconst castToNumber = require('./helpers').castToNumber;\n\n/*!\n * ignore\n */\n\nexports.cast$geoIntersects = cast$geoIntersects;\nexports.cast$near = cast$near;\nexports.cast$within = cast$within;\n\nfunction cast$near(val) {\n  const SchemaArray = require('../array');\n\n  if (Array.isArray(val)) {\n    castArraysOfNumbers(val, this);\n    return val;\n  }\n\n  _castMinMaxDistance(this, val);\n\n  if (val && val.$geometry) {\n    return cast$geometry(val, this);\n  }\n\n  if (!Array.isArray(val)) {\n    throw new TypeError('$near must be either an array or an object ' +\n      'with a $geometry property');\n  }\n\n  return SchemaArray.prototype.castForQuery.call(this, val);\n}\n\nfunction cast$geometry(val, self) {\n  switch (val.$geometry.type) {\n    case 'Polygon':\n    case 'LineString':\n    case 'Point':\n      castArraysOfNumbers(val.$geometry.coordinates, self);\n      break;\n    default:\n      // ignore unknowns\n      break;\n  }\n\n  _castMinMaxDistance(self, val);\n\n  return val;\n}\n\nfunction cast$within(val) {\n  _castMinMaxDistance(this, val);\n\n  if (val.$box || val.$polygon) {\n    const type = val.$box ? '$box' : '$polygon';\n    val[type].forEach(arr => {\n      if (!Array.isArray(arr)) {\n        const msg = 'Invalid $within $box argument. '\n            + 'Expected an array, received ' + arr;\n        throw new TypeError(msg);\n      }\n      arr.forEach((v, i) => {\n        arr[i] = castToNumber.call(this, v);\n      });\n    });\n  } else if (val.$center || val.$centerSphere) {\n    const type = val.$center ? '$center' : '$centerSphere';\n    val[type].forEach((item, i) => {\n      if (Array.isArray(item)) {\n        item.forEach((v, j) => {\n          item[j] = castToNumber.call(this, v);\n        });\n      } else {\n        val[type][i] = castToNumber.call(this, item);\n      }\n    });\n  } else if (val.$geometry) {\n    cast$geometry(val, this);\n  }\n\n  return val;\n}\n\nfunction cast$geoIntersects(val) {\n  const geo = val.$geometry;\n  if (!geo) {\n    return;\n  }\n\n  cast$geometry(val, this);\n  return val;\n}\n\nfunction _castMinMaxDistance(self, val) {\n  if (val.$maxDistance) {\n    val.$maxDistance = castToNumber.call(self, val.$maxDistance);\n  }\n  if (val.$minDistance) {\n    val.$minDistance = castToNumber.call(self, val.$minDistance);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,mBAAjD;;AACA,MAAME,YAAY,GAAGD,OAAO,CAAC,WAAD,CAAP,CAAqBC,YAA1C;AAEA;AACA;AACA;;;AAEAC,OAAO,CAACC,kBAAR,GAA6BA,kBAA7B;AACAD,OAAO,CAACE,SAAR,GAAoBA,SAApB;AACAF,OAAO,CAACG,WAAR,GAAsBA,WAAtB;;AAEA,SAASD,SAAT,CAAmBE,GAAnB,EAAwB;EACtB,MAAMC,WAAW,GAAGP,OAAO,CAAC,UAAD,CAA3B;;EAEA,IAAIQ,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAJ,EAAwB;IACtBP,mBAAmB,CAACO,GAAD,EAAM,IAAN,CAAnB;IACA,OAAOA,GAAP;EACD;;EAEDI,mBAAmB,CAAC,IAAD,EAAOJ,GAAP,CAAnB;;EAEA,IAAIA,GAAG,IAAIA,GAAG,CAACK,SAAf,EAA0B;IACxB,OAAOC,aAAa,CAACN,GAAD,EAAM,IAAN,CAApB;EACD;;EAED,IAAI,CAACE,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAL,EAAyB;IACvB,MAAM,IAAIO,SAAJ,CAAc,gDAClB,2BADI,CAAN;EAED;;EAED,OAAON,WAAW,CAACO,SAAZ,CAAsBC,YAAtB,CAAmCC,IAAnC,CAAwC,IAAxC,EAA8CV,GAA9C,CAAP;AACD;;AAED,SAASM,aAAT,CAAuBN,GAAvB,EAA4BW,IAA5B,EAAkC;EAChC,QAAQX,GAAG,CAACK,SAAJ,CAAcO,IAAtB;IACE,KAAK,SAAL;IACA,KAAK,YAAL;IACA,KAAK,OAAL;MACEnB,mBAAmB,CAACO,GAAG,CAACK,SAAJ,CAAcQ,WAAf,EAA4BF,IAA5B,CAAnB;MACA;;IACF;MACE;MACA;EARJ;;EAWAP,mBAAmB,CAACO,IAAD,EAAOX,GAAP,CAAnB;;EAEA,OAAOA,GAAP;AACD;;AAED,SAASD,WAAT,CAAqBC,GAArB,EAA0B;EACxBI,mBAAmB,CAAC,IAAD,EAAOJ,GAAP,CAAnB;;EAEA,IAAIA,GAAG,CAACc,IAAJ,IAAYd,GAAG,CAACe,QAApB,EAA8B;IAC5B,MAAMH,IAAI,GAAGZ,GAAG,CAACc,IAAJ,GAAW,MAAX,GAAoB,UAAjC;IACAd,GAAG,CAACY,IAAD,CAAH,CAAUI,OAAV,CAAkBC,GAAG,IAAI;MACvB,IAAI,CAACf,KAAK,CAACC,OAAN,CAAcc,GAAd,CAAL,EAAyB;QACvB,MAAMC,GAAG,GAAG,oCACN,8BADM,GAC2BD,GADvC;QAEA,MAAM,IAAIV,SAAJ,CAAcW,GAAd,CAAN;MACD;;MACDD,GAAG,CAACD,OAAJ,CAAY,CAACG,CAAD,EAAIC,CAAJ,KAAU;QACpBH,GAAG,CAACG,CAAD,CAAH,GAASzB,YAAY,CAACe,IAAb,CAAkB,IAAlB,EAAwBS,CAAxB,CAAT;MACD,CAFD;IAGD,CATD;EAUD,CAZD,MAYO,IAAInB,GAAG,CAACqB,OAAJ,IAAerB,GAAG,CAACsB,aAAvB,EAAsC;IAC3C,MAAMV,IAAI,GAAGZ,GAAG,CAACqB,OAAJ,GAAc,SAAd,GAA0B,eAAvC;IACArB,GAAG,CAACY,IAAD,CAAH,CAAUI,OAAV,CAAkB,CAACO,IAAD,EAAOH,CAAP,KAAa;MAC7B,IAAIlB,KAAK,CAACC,OAAN,CAAcoB,IAAd,CAAJ,EAAyB;QACvBA,IAAI,CAACP,OAAL,CAAa,CAACG,CAAD,EAAIK,CAAJ,KAAU;UACrBD,IAAI,CAACC,CAAD,CAAJ,GAAU7B,YAAY,CAACe,IAAb,CAAkB,IAAlB,EAAwBS,CAAxB,CAAV;QACD,CAFD;MAGD,CAJD,MAIO;QACLnB,GAAG,CAACY,IAAD,CAAH,CAAUQ,CAAV,IAAezB,YAAY,CAACe,IAAb,CAAkB,IAAlB,EAAwBa,IAAxB,CAAf;MACD;IACF,CARD;EASD,CAXM,MAWA,IAAIvB,GAAG,CAACK,SAAR,EAAmB;IACxBC,aAAa,CAACN,GAAD,EAAM,IAAN,CAAb;EACD;;EAED,OAAOA,GAAP;AACD;;AAED,SAASH,kBAAT,CAA4BG,GAA5B,EAAiC;EAC/B,MAAMyB,GAAG,GAAGzB,GAAG,CAACK,SAAhB;;EACA,IAAI,CAACoB,GAAL,EAAU;IACR;EACD;;EAEDnB,aAAa,CAACN,GAAD,EAAM,IAAN,CAAb;EACA,OAAOA,GAAP;AACD;;AAED,SAASI,mBAAT,CAA6BO,IAA7B,EAAmCX,GAAnC,EAAwC;EACtC,IAAIA,GAAG,CAAC0B,YAAR,EAAsB;IACpB1B,GAAG,CAAC0B,YAAJ,GAAmB/B,YAAY,CAACe,IAAb,CAAkBC,IAAlB,EAAwBX,GAAG,CAAC0B,YAA5B,CAAnB;EACD;;EACD,IAAI1B,GAAG,CAAC2B,YAAR,EAAsB;IACpB3B,GAAG,CAAC2B,YAAJ,GAAmBhC,YAAY,CAACe,IAAb,CAAkBC,IAAlB,EAAwBX,GAAG,CAAC2B,YAA5B,CAAnB;EACD;AACF"},"metadata":{},"sourceType":"script"}