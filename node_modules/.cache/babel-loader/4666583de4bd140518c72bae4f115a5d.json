{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStreamCursor = exports.ChangeStream = void 0;\n\nconst Denque = require(\"denque\");\n\nconst collection_1 = require(\"./collection\");\n\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\n\nconst db_1 = require(\"./db\");\n\nconst error_1 = require(\"./error\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst mongo_types_1 = require(\"./mongo_types\");\n\nconst aggregate_1 = require(\"./operations/aggregate\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst utils_1 = require(\"./utils\");\n/** @internal */\n\n\nconst kResumeQueue = Symbol('resumeQueue');\n/** @internal */\n\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\n\nconst kClosed = Symbol('closed');\n/** @internal */\n\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nconst CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference', 'comment', ...CHANGE_STREAM_OPTIONS];\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst NO_CURSOR_ERROR = 'ChangeStream has no cursor';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\n\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(parent) {\n    let pipeline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    this.pipeline = pipeline;\n    this.options = options;\n\n    if (parent instanceof collection_1.Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n\n    this[kResumeQueue] = new Denque(); // Create contained Change Stream cursor\n\n    this.cursor = createChangeStreamCursor(this, options);\n    this[kClosed] = false;\n    this[kMode] = false; // Listen for any `change` listeners being added to ChangeStream\n\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        streamEvents(this, this.cursor);\n      }\n    });\n    this.on('removeListener', eventName => {\n      var _a;\n\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        (_a = this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n      }\n    });\n  }\n  /** @internal */\n\n\n  get cursorStream() {\n    return this[kCursorStream];\n  }\n  /** The cached resume token that is used to resume after the most recently returned change. */\n\n\n  get resumeToken() {\n    var _a;\n\n    return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n  }\n\n  hasNext(callback) {\n    setIsIterator(this);\n    return (0, utils_1.maybePromise)(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        cursor.hasNext(cb);\n      });\n    });\n  }\n\n  next(callback) {\n    setIsIterator(this);\n    return (0, utils_1.maybePromise)(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        cursor.next((error, change) => {\n          if (error) {\n            this[kResumeQueue].push(() => this.next(cb));\n            processError(this, error, cb);\n            return;\n          }\n\n          processNewChange(this, change, cb);\n        });\n      });\n    });\n  }\n  /** Is the cursor closed */\n\n\n  get closed() {\n    var _a, _b;\n\n    return this[kClosed] || ((_b = (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.closed) !== null && _b !== void 0 ? _b : false);\n  }\n  /** Close the Change Stream */\n\n\n  close(callback) {\n    this[kClosed] = true;\n    return (0, utils_1.maybePromise)(callback, cb => {\n      if (!this.cursor) {\n        return cb();\n      }\n\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        endStream(this);\n        this.cursor = undefined;\n        return cb(err);\n      });\n    });\n  }\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   * @throws MongoDriverError if this.cursor is undefined\n   */\n\n\n  stream(options) {\n    this.streamOptions = options;\n    if (!this.cursor) throw new error_1.MongoChangeStreamError(NO_CURSOR_ERROR);\n    return this.cursor.stream(options);\n  }\n\n  tryNext(callback) {\n    setIsIterator(this);\n    return (0, utils_1.maybePromise)(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        return cursor.tryNext(cb);\n      });\n    });\n  }\n\n}\n\nexports.ChangeStream = ChangeStream;\n/** @event */\n\nChangeStream.RESPONSE = 'response';\n/** @event */\n\nChangeStream.MORE = 'more';\n/** @event */\n\nChangeStream.INIT = 'init';\n/** @event */\n\nChangeStream.CLOSE = 'close';\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\n\nChangeStream.CHANGE = 'change';\n/** @event */\n\nChangeStream.END = 'end';\n/** @event */\n\nChangeStream.ERROR = 'error';\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\n\nChangeStream.RESUME_TOKEN_CHANGED = 'resumeTokenChanged';\n/** @internal */\n\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n  constructor(topology, namespace) {\n    let pipeline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(topology, namespace, options);\n    this.pipeline = pipeline;\n    this.options = options;\n    this._resumeToken = null;\n    this.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      this.resumeToken = options.resumeAfter;\n    }\n  }\n\n  set resumeToken(token) {\n    this._resumeToken = token;\n    this.emit(ChangeStream.RESUME_TOKEN_CHANGED, token);\n  }\n\n  get resumeToken() {\n    return this._resumeToken;\n  }\n\n  get resumeOptions() {\n    const result = applyKnownOptions(this.options, CURSOR_OPTIONS);\n\n    if (this.resumeToken || this.startAtOperationTime) {\n      for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime']) {\n        Reflect.deleteProperty(result, key);\n      }\n\n      if (this.resumeToken) {\n        const resumeKey = this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\n        result[resumeKey] = this.resumeToken;\n      } else if (this.startAtOperationTime && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n        result.startAtOperationTime = this.startAtOperationTime;\n      }\n    }\n\n    return result;\n  }\n\n  cacheResumeToken(resumeToken) {\n    if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n      this.resumeToken = this.postBatchResumeToken;\n    } else {\n      this.resumeToken = resumeToken;\n    }\n\n    this.hasReceived = true;\n  }\n\n  _processBatch(batchName, response) {\n    const cursor = (response === null || response === void 0 ? void 0 : response.cursor) || {};\n\n    if (cursor.postBatchResumeToken) {\n      this.postBatchResumeToken = cursor.postBatchResumeToken;\n\n      if (cursor[batchName].length === 0) {\n        this.resumeToken = cursor.postBatchResumeToken;\n      }\n    }\n  }\n\n  clone() {\n    return new ChangeStreamCursor(this.topology, this.namespace, this.pipeline, { ...this.cursorOptions\n    });\n  }\n\n  _initialize(session, callback) {\n    const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, { ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n    (0, execute_operation_1.executeOperation)(session, aggregateOperation, (err, response) => {\n      if (err || response == null) {\n        return callback(err);\n      }\n\n      const server = aggregateOperation.server;\n\n      if (this.startAtOperationTime == null && this.resumeAfter == null && this.startAfter == null && (0, utils_1.maxWireVersion)(server) >= 7) {\n        this.startAtOperationTime = response.operationTime;\n      }\n\n      this._processBatch('firstBatch', response);\n\n      this.emit(ChangeStream.INIT, response);\n      this.emit(ChangeStream.RESPONSE); // TODO: NODE-2882\n\n      callback(undefined, {\n        server,\n        session,\n        response\n      });\n    });\n  }\n\n  _getMore(batchSize, callback) {\n    super._getMore(batchSize, (err, response) => {\n      if (err) {\n        return callback(err);\n      }\n\n      this._processBatch('nextBatch', response);\n\n      this.emit(ChangeStream.MORE, response);\n      this.emit(ChangeStream.RESPONSE);\n      callback(err, response);\n    });\n  }\n\n}\n\nexports.ChangeStreamCursor = ChangeStreamCursor;\nconst CHANGE_STREAM_EVENTS = [ChangeStream.RESUME_TOKEN_CHANGED, ChangeStream.END, ChangeStream.CLOSE];\n\nfunction setIsEmitter(changeStream) {\n  if (changeStream[kMode] === 'iterator') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n  }\n\n  changeStream[kMode] = 'emitter';\n}\n\nfunction setIsIterator(changeStream) {\n  if (changeStream[kMode] === 'emitter') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n  }\n\n  changeStream[kMode] = 'iterator';\n}\n/**\n * Create a new change stream cursor based on self's configuration\n * @internal\n */\n\n\nfunction createChangeStreamCursor(changeStream, options) {\n  const changeStreamStageOptions = applyKnownOptions(options, CHANGE_STREAM_OPTIONS);\n\n  if (changeStream.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n    changeStreamStageOptions.allChangesForCluster = true;\n  }\n\n  const pipeline = [{\n    $changeStream: changeStreamStageOptions\n  }].concat(changeStream.pipeline);\n  const cursorOptions = applyKnownOptions(options, CURSOR_OPTIONS);\n  const changeStreamCursor = new ChangeStreamCursor((0, utils_1.getTopology)(changeStream.parent), changeStream.namespace, pipeline, cursorOptions);\n\n  for (const event of CHANGE_STREAM_EVENTS) {\n    changeStreamCursor.on(event, e => changeStream.emit(event, e));\n  }\n\n  if (changeStream.listenerCount(ChangeStream.CHANGE) > 0) {\n    streamEvents(changeStream, changeStreamCursor);\n  }\n\n  return changeStreamCursor;\n}\n\nfunction applyKnownOptions(source, options) {\n  const result = {};\n\n  for (const option of options) {\n    if (option in source) {\n      result[option] = source[option];\n    }\n  }\n\n  return result;\n} // This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\n\n\nconst SELECTION_TIMEOUT = 30000;\n\nfunction waitForTopologyConnected(topology, options, callback) {\n  setTimeout(() => {\n    if (options && options.start == null) {\n      options.start = (0, utils_1.now)();\n    }\n\n    const start = options.start || (0, utils_1.now)();\n    const timeout = options.timeout || SELECTION_TIMEOUT;\n\n    if (topology.isConnected()) {\n      return callback();\n    }\n\n    if ((0, utils_1.calculateDurationInMs)(start) > timeout) {\n      // TODO(NODE-3497): Replace with MongoNetworkTimeoutError\n      return callback(new error_1.MongoRuntimeError('Timed out waiting for connection'));\n    }\n\n    waitForTopologyConnected(topology, options, callback);\n  }, 500); // this is an arbitrary wait time to allow SDAM to transition\n}\n\nfunction closeWithError(changeStream, error, callback) {\n  if (!callback) {\n    changeStream.emit(ChangeStream.ERROR, error);\n  }\n\n  changeStream.close(() => callback && callback(error));\n}\n\nfunction streamEvents(changeStream, cursor) {\n  setIsEmitter(changeStream);\n  const stream = changeStream[kCursorStream] || cursor.stream();\n  changeStream[kCursorStream] = stream;\n  stream.on('data', change => processNewChange(changeStream, change));\n  stream.on('error', error => processError(changeStream, error));\n}\n\nfunction endStream(changeStream) {\n  const cursorStream = changeStream[kCursorStream];\n\n  if (cursorStream) {\n    ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n    cursorStream.destroy();\n  }\n\n  changeStream[kCursorStream] = undefined;\n}\n\nfunction processNewChange(changeStream, change, callback) {\n  var _a;\n\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // a null change means the cursor has been notified, implicitly closing the change stream\n\n\n  if (change == null) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    return closeWithError(changeStream, new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR), callback);\n  }\n\n  if (change && !change._id) {\n    return closeWithError(changeStream, new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR), callback);\n  } // cache the resume token\n\n\n  (_a = changeStream.cursor) === null || _a === void 0 ? void 0 : _a.cacheResumeToken(change._id); // wipe the startAtOperationTime if there was one so that there won't be a conflict\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n\n  changeStream.options.startAtOperationTime = undefined; // Return the change\n\n  if (!callback) return changeStream.emit(ChangeStream.CHANGE, change);\n  return callback(undefined, change);\n}\n\nfunction processError(changeStream, error, callback) {\n  const cursor = changeStream.cursor; // If the change stream has been closed explicitly, do not process error.\n\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // if the resume succeeds, continue with the new cursor\n\n\n  function resumeWithCursor(newCursor) {\n    changeStream.cursor = newCursor;\n    processResumeQueue(changeStream);\n  } // otherwise, raise an error and close the change stream\n\n\n  function unresumableError(err) {\n    if (!callback) {\n      changeStream.emit(ChangeStream.ERROR, err);\n    }\n\n    changeStream.close(() => processResumeQueue(changeStream, err));\n  }\n\n  if (cursor && (0, error_1.isResumableError)(error, (0, utils_1.maxWireVersion)(cursor.server))) {\n    changeStream.cursor = undefined; // stop listening to all events from old cursor\n\n    endStream(changeStream); // close internal cursor, ignore errors\n\n    cursor.close();\n    const topology = (0, utils_1.getTopology)(changeStream.parent);\n    waitForTopologyConnected(topology, {\n      readPreference: cursor.readPreference\n    }, err => {\n      // if the topology can't reconnect, close the stream\n      if (err) return unresumableError(err); // create a new cursor, preserving the old cursor's options\n\n      const newCursor = createChangeStreamCursor(changeStream, cursor.resumeOptions); // attempt to continue in emitter mode\n\n      if (!callback) return resumeWithCursor(newCursor); // attempt to continue in iterator mode\n\n      newCursor.hasNext(err => {\n        // if there's an error immediately after resuming, close the stream\n        if (err) return unresumableError(err);\n        resumeWithCursor(newCursor);\n      });\n    });\n    return;\n  } // if initial error wasn't resumable, raise an error and close the change stream\n\n\n  return closeWithError(changeStream, error, callback);\n}\n/**\n * Safely provides a cursor across resume attempts\n *\n * @param changeStream - the parent ChangeStream\n */\n\n\nfunction getCursor(changeStream, callback) {\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // if a cursor exists and it is open, return it\n\n\n  if (changeStream.cursor) {\n    callback(undefined, changeStream.cursor);\n    return;\n  } // no cursor, queue callback until topology reconnects\n\n\n  changeStream[kResumeQueue].push(callback);\n}\n/**\n * Drain the resume queue when a new has become available\n *\n * @param changeStream - the parent ChangeStream\n * @param err - error getting a new cursor\n */\n\n\nfunction processResumeQueue(changeStream, err) {\n  while (changeStream[kResumeQueue].length) {\n    const request = changeStream[kResumeQueue].pop();\n    if (!request) break; // Should never occur but TS can't use the length check in the while condition\n\n    if (!err) {\n      if (changeStream[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        request(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n        return;\n      }\n\n      if (!changeStream.cursor) {\n        request(new error_1.MongoChangeStreamError(NO_CURSOR_ERROR));\n        return;\n      }\n    }\n\n    request(err, changeStream.cursor);\n  }\n}","map":{"version":3,"mappings":"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","names":["kResumeQueue","Symbol","kCursorStream","kClosed","kMode","CHANGE_STREAM_OPTIONS","CURSOR_OPTIONS","CHANGE_DOMAIN_TYPES","COLLECTION","DATABASE","CLUSTER","NO_RESUME_TOKEN_ERROR","NO_CURSOR_ERROR","CHANGESTREAM_CLOSED_ERROR","ChangeStream","mongo_types_1","constructor","parent","pipeline","options","collection_1","type","db_1","mongo_client_1","error_1","namespace","s","readPreference","Denque","cursor","createChangeStreamCursor","on","eventName","listenerCount","streamEvents","_a","removeAllListeners","cursorStream","resumeToken","hasNext","callback","setIsIterator","cb","getCursor","err","next","error","change","push","processError","processNewChange","closed","_b","close","endStream","undefined","stream","streamOptions","tryNext","exports","ChangeStreamCursor","abstract_cursor_1","topology","_resumeToken","startAtOperationTime","startAfter","resumeAfter","token","emit","RESUME_TOKEN_CHANGED","resumeOptions","result","applyKnownOptions","key","Reflect","deleteProperty","resumeKey","hasReceived","server","cacheResumeToken","bufferedCount","postBatchResumeToken","_processBatch","batchName","response","length","clone","cursorOptions","_initialize","session","aggregateOperation","aggregate_1","operationTime","INIT","RESPONSE","_getMore","batchSize","MORE","CHANGE_STREAM_EVENTS","END","CLOSE","setIsEmitter","changeStream","changeStreamStageOptions","allChangesForCluster","$changeStream","concat","changeStreamCursor","event","e","CHANGE","source","option","SELECTION_TIMEOUT","waitForTopologyConnected","setTimeout","start","timeout","isConnected","closeWithError","ERROR","forEach","destroy","_id","resumeWithCursor","newCursor","processResumeQueue","unresumableError","request","pop"],"sources":["B:\\web_project_react\\web_car_react\\node_modules\\mongodb\\src\\change_stream.ts"],"sourcesContent":["import Denque = require('denque');\nimport type { Readable } from 'stream';\n\nimport type { Document, Timestamp } from './bson';\nimport { Collection } from './collection';\nimport {\n  AbstractCursor,\n  AbstractCursorEvents,\n  AbstractCursorOptions,\n  CursorStreamOptions\n} from './cursor/abstract_cursor';\nimport { Db } from './db';\nimport {\n  AnyError,\n  isResumableError,\n  MongoAPIError,\n  MongoChangeStreamError,\n  MongoError,\n  MongoRuntimeError\n} from './error';\nimport { MongoClient } from './mongo_client';\nimport { InferIdType, Nullable, TypedEventEmitter } from './mongo_types';\nimport { AggregateOperation, AggregateOptions } from './operations/aggregate';\nimport type { CollationOptions, OperationParent } from './operations/command';\nimport { executeOperation, ExecutionResult } from './operations/execute_operation';\nimport type { ReadPreference } from './read_preference';\nimport type { Topology } from './sdam/topology';\nimport type { ClientSession } from './sessions';\nimport {\n  calculateDurationInMs,\n  Callback,\n  getTopology,\n  maxWireVersion,\n  maybePromise,\n  MongoDBNamespace,\n  now\n} from './utils';\n\n/** @internal */\nconst kResumeQueue = Symbol('resumeQueue');\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\n\nconst CHANGE_STREAM_OPTIONS = [\n  'resumeAfter',\n  'startAfter',\n  'startAtOperationTime',\n  'fullDocument'\n] as const;\n\nconst CURSOR_OPTIONS = [\n  'batchSize',\n  'maxAwaitTimeMS',\n  'collation',\n  'readPreference',\n  'comment',\n  ...CHANGE_STREAM_OPTIONS\n] as const;\n\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\n\nconst NO_RESUME_TOKEN_ERROR =\n  'A change stream document has been received that lacks a resume token (_id).';\nconst NO_CURSOR_ERROR = 'ChangeStream has no cursor';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n\n/** @public */\nexport interface ResumeOptions {\n  startAtOperationTime?: Timestamp;\n  batchSize?: number;\n  maxAwaitTimeMS?: number;\n  collation?: CollationOptions;\n  readPreference?: ReadPreference;\n  resumeAfter?: ResumeToken;\n  startAfter?: ResumeToken;\n}\n\n/**\n * Represents the logical starting point for a new or resuming {@link https://docs.mongodb.com/manual/changeStreams/#std-label-change-stream-resume| Change Stream} on the server.\n * @public\n */\nexport type ResumeToken = unknown;\n\n/**\n * Represents a specific point in time on a server. Can be retrieved by using {@link Db#command}\n * @public\n * @remarks\n * See {@link https://docs.mongodb.com/manual/reference/method/db.runCommand/#response| Run Command Response}\n */\nexport type OperationTime = Timestamp;\n\n/** @public */\nexport interface PipeOptions {\n  end?: boolean;\n}\n\n/**\n * Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\n * @public\n */\nexport interface ChangeStreamOptions extends AggregateOptions {\n  /** Allowed values: 'updateLookup'. When set to 'updateLookup', the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred. */\n  fullDocument?: string;\n  /** The maximum amount of time for the server to wait on new documents to satisfy a change stream query. */\n  maxAwaitTimeMS?: number;\n  /** Allows you to start a changeStream after a specified event. See {@link https://docs.mongodb.com/manual/changeStreams/#resumeafter-for-change-streams|ChangeStream documentation}. */\n  resumeAfter?: ResumeToken;\n  /** Similar to resumeAfter, but will allow you to start after an invalidated event. See {@link https://docs.mongodb.com/manual/changeStreams/#startafter-for-change-streams|ChangeStream documentation}. */\n  startAfter?: ResumeToken;\n  /** Will start the changeStream after the specified operationTime. */\n  startAtOperationTime?: OperationTime;\n  /** The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}. */\n  batchSize?: number;\n}\n\n/** @public */\nexport interface ChangeStreamDocument<TSchema extends Document = Document> {\n  /**\n   * The id functions as an opaque token for use when resuming an interrupted\n   * change stream.\n   */\n  _id: InferIdType<TSchema>;\n\n  /**\n   * Describes the type of operation represented in this change notification.\n   */\n  operationType:\n    | 'insert'\n    | 'update'\n    | 'replace'\n    | 'delete'\n    | 'invalidate'\n    | 'drop'\n    | 'dropDatabase'\n    | 'rename';\n\n  /**\n   * Contains two fields: “db” and “coll” containing the database and\n   * collection name in which the change happened.\n   */\n  ns: { db: string; coll: string };\n\n  /**\n   * Only present for ops of type ‘insert’, ‘update’, ‘replace’, and\n   * ‘delete’.\n   *\n   * For unsharded collections this contains a single field, _id, with the\n   * value of the _id of the document updated.  For sharded collections,\n   * this will contain all the components of the shard key in order,\n   * followed by the _id if the _id isn’t part of the shard key.\n   */\n  documentKey?: { _id: InferIdType<TSchema> };\n\n  /**\n   * Only present for ops of type ‘update’.\n   *\n   * Contains a description of updated and removed fields in this\n   * operation.\n   */\n  updateDescription?: UpdateDescription<TSchema>;\n\n  /**\n   * Always present for operations of type ‘insert’ and ‘replace’. Also\n   * present for operations of type ‘update’ if the user has specified ‘updateLookup’\n   * in the ‘fullDocument’ arguments to the ‘$changeStream’ stage.\n   *\n   * For operations of type ‘insert’ and ‘replace’, this key will contain the\n   * document being inserted, or the new version of the document that is replacing\n   * the existing document, respectively.\n   *\n   * For operations of type ‘update’, this key will contain a copy of the full\n   * version of the document from some point after the update occurred. If the\n   * document was deleted since the updated happened, it will be null.\n   */\n  fullDocument?: TSchema;\n}\n\n/** @public */\nexport interface UpdateDescription<TSchema extends Document = Document> {\n  /**\n   * A document containing key:value pairs of names of the fields that were\n   * changed, and the new value for those fields.\n   */\n  updatedFields: Partial<TSchema>;\n\n  /**\n   * An array of field names that were removed from the document.\n   */\n  removedFields: string[];\n}\n\n/** @public */\nexport type ChangeStreamEvents<TSchema extends Document = Document> = {\n  resumeTokenChanged(token: ResumeToken): void;\n  init(response: TSchema): void;\n  more(response?: TSchema | undefined): void;\n  response(): void;\n  end(): void;\n  error(error: Error): void;\n  change(change: ChangeStreamDocument<TSchema>): void;\n} & AbstractCursorEvents;\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nexport class ChangeStream<TSchema extends Document = Document> extends TypedEventEmitter<\n  ChangeStreamEvents<TSchema>\n> {\n  pipeline: Document[];\n  options: ChangeStreamOptions;\n  parent: MongoClient | Db | Collection;\n  namespace: MongoDBNamespace;\n  type: symbol;\n  /** @internal */\n  cursor?: ChangeStreamCursor<TSchema>;\n  streamOptions?: CursorStreamOptions;\n  /** @internal */\n  [kResumeQueue]: Denque<Callback<ChangeStreamCursor<TSchema>>>;\n  /** @internal */\n  [kCursorStream]?: Readable;\n  /** @internal */\n  [kClosed]: boolean;\n  /** @internal */\n  [kMode]: false | 'iterator' | 'emitter';\n\n  /** @event */\n  static readonly RESPONSE = 'response' as const;\n  /** @event */\n  static readonly MORE = 'more' as const;\n  /** @event */\n  static readonly INIT = 'init' as const;\n  /** @event */\n  static readonly CLOSE = 'close' as const;\n  /**\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\n   * then be passed as soon as it is available.\n   * @event\n   */\n  static readonly CHANGE = 'change' as const;\n  /** @event */\n  static readonly END = 'end' as const;\n  /** @event */\n  static readonly ERROR = 'error' as const;\n  /**\n   * Emitted each time the change stream stores a new resume token.\n   * @event\n   */\n  static readonly RESUME_TOKEN_CHANGED = 'resumeTokenChanged' as const;\n\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(\n    parent: OperationParent,\n    pipeline: Document[] = [],\n    options: ChangeStreamOptions = {}\n  ) {\n    super();\n\n    this.pipeline = pipeline;\n    this.options = options;\n\n    if (parent instanceof Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new MongoChangeStreamError(\n        'Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient'\n      );\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n\n    this[kResumeQueue] = new Denque();\n\n    // Create contained Change Stream cursor\n    this.cursor = createChangeStreamCursor(this, options);\n\n    this[kClosed] = false;\n    this[kMode] = false;\n\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        streamEvents(this, this.cursor);\n      }\n    });\n\n    this.on('removeListener', eventName => {\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        this[kCursorStream]?.removeAllListeners('data');\n      }\n    });\n  }\n\n  /** @internal */\n  get cursorStream(): Readable | undefined {\n    return this[kCursorStream];\n  }\n\n  /** The cached resume token that is used to resume after the most recently returned change. */\n  get resumeToken(): ResumeToken {\n    return this.cursor?.resumeToken;\n  }\n\n  /** Check if there is any document still available in the Change Stream */\n  hasNext(): Promise<boolean>;\n  hasNext(callback: Callback<boolean>): void;\n  hasNext(callback?: Callback): Promise<boolean> | void {\n    setIsIterator(this);\n    return maybePromise(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n        cursor.hasNext(cb);\n      });\n    });\n  }\n\n  /** Get the next available document from the Change Stream. */\n  next(): Promise<ChangeStreamDocument<TSchema>>;\n  next(callback: Callback<ChangeStreamDocument<TSchema>>): void;\n  next(\n    callback?: Callback<ChangeStreamDocument<TSchema>>\n  ): Promise<ChangeStreamDocument<TSchema>> | void {\n    setIsIterator(this);\n    return maybePromise(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n        cursor.next((error, change) => {\n          if (error) {\n            this[kResumeQueue].push(() => this.next(cb));\n            processError(this, error, cb);\n            return;\n          }\n          processNewChange<TSchema>(this, change, cb);\n        });\n      });\n    });\n  }\n\n  /** Is the cursor closed */\n  get closed(): boolean {\n    return this[kClosed] || (this.cursor?.closed ?? false);\n  }\n\n  /** Close the Change Stream */\n  close(callback?: Callback): Promise<void> | void {\n    this[kClosed] = true;\n\n    return maybePromise(callback, cb => {\n      if (!this.cursor) {\n        return cb();\n      }\n\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        endStream(this);\n        this.cursor = undefined;\n        return cb(err);\n      });\n    });\n  }\n\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   * @throws MongoDriverError if this.cursor is undefined\n   */\n  stream(options?: CursorStreamOptions): Readable {\n    this.streamOptions = options;\n    if (!this.cursor) throw new MongoChangeStreamError(NO_CURSOR_ERROR);\n    return this.cursor.stream(options);\n  }\n\n  /**\n   * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n   */\n  tryNext(): Promise<Document | null>;\n  tryNext(callback: Callback<Document | null>): void;\n  tryNext(callback?: Callback<Document | null>): Promise<Document | null> | void {\n    setIsIterator(this);\n    return maybePromise(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n        return cursor.tryNext(cb);\n      });\n    });\n  }\n}\n\n/** @internal */\nexport interface ChangeStreamCursorOptions extends AbstractCursorOptions {\n  startAtOperationTime?: OperationTime;\n  resumeAfter?: ResumeToken;\n  startAfter?: ResumeToken;\n}\n\n/** @internal */\nexport class ChangeStreamCursor<TSchema extends Document = Document> extends AbstractCursor<\n  ChangeStreamDocument<TSchema>,\n  ChangeStreamEvents\n> {\n  _resumeToken: ResumeToken;\n  startAtOperationTime?: OperationTime;\n  hasReceived?: boolean;\n  resumeAfter: ResumeToken;\n  startAfter: ResumeToken;\n  options: ChangeStreamCursorOptions;\n\n  postBatchResumeToken?: ResumeToken;\n  pipeline: Document[];\n\n  constructor(\n    topology: Topology,\n    namespace: MongoDBNamespace,\n    pipeline: Document[] = [],\n    options: ChangeStreamCursorOptions = {}\n  ) {\n    super(topology, namespace, options);\n\n    this.pipeline = pipeline;\n    this.options = options;\n    this._resumeToken = null;\n    this.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      this.resumeToken = options.resumeAfter;\n    }\n  }\n\n  set resumeToken(token: ResumeToken) {\n    this._resumeToken = token;\n    this.emit(ChangeStream.RESUME_TOKEN_CHANGED, token);\n  }\n\n  get resumeToken(): ResumeToken {\n    return this._resumeToken;\n  }\n\n  get resumeOptions(): ResumeOptions {\n    const result: ResumeOptions = applyKnownOptions(this.options, CURSOR_OPTIONS);\n\n    if (this.resumeToken || this.startAtOperationTime) {\n      for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime']) {\n        Reflect.deleteProperty(result, key);\n      }\n\n      if (this.resumeToken) {\n        const resumeKey =\n          this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\n\n        result[resumeKey] = this.resumeToken;\n      } else if (this.startAtOperationTime && maxWireVersion(this.server) >= 7) {\n        result.startAtOperationTime = this.startAtOperationTime;\n      }\n    }\n\n    return result;\n  }\n\n  cacheResumeToken(resumeToken: ResumeToken): void {\n    if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n      this.resumeToken = this.postBatchResumeToken;\n    } else {\n      this.resumeToken = resumeToken;\n    }\n    this.hasReceived = true;\n  }\n\n  _processBatch(batchName: string, response?: Document): void {\n    const cursor = response?.cursor || {};\n    if (cursor.postBatchResumeToken) {\n      this.postBatchResumeToken = cursor.postBatchResumeToken;\n\n      if (cursor[batchName].length === 0) {\n        this.resumeToken = cursor.postBatchResumeToken;\n      }\n    }\n  }\n\n  clone(): AbstractCursor<ChangeStreamDocument<TSchema>> {\n    return new ChangeStreamCursor(this.topology, this.namespace, this.pipeline, {\n      ...this.cursorOptions\n    });\n  }\n\n  _initialize(session: ClientSession, callback: Callback<ExecutionResult>): void {\n    const aggregateOperation = new AggregateOperation(this.namespace, this.pipeline, {\n      ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n\n    executeOperation(session, aggregateOperation, (err, response) => {\n      if (err || response == null) {\n        return callback(err);\n      }\n\n      const server = aggregateOperation.server;\n      if (\n        this.startAtOperationTime == null &&\n        this.resumeAfter == null &&\n        this.startAfter == null &&\n        maxWireVersion(server) >= 7\n      ) {\n        this.startAtOperationTime = response.operationTime;\n      }\n\n      this._processBatch('firstBatch', response);\n\n      this.emit(ChangeStream.INIT, response);\n      this.emit(ChangeStream.RESPONSE);\n\n      // TODO: NODE-2882\n      callback(undefined, { server, session, response });\n    });\n  }\n\n  override _getMore(batchSize: number, callback: Callback): void {\n    super._getMore(batchSize, (err, response) => {\n      if (err) {\n        return callback(err);\n      }\n\n      this._processBatch('nextBatch', response);\n\n      this.emit(ChangeStream.MORE, response);\n      this.emit(ChangeStream.RESPONSE);\n      callback(err, response);\n    });\n  }\n}\n\nconst CHANGE_STREAM_EVENTS = [\n  ChangeStream.RESUME_TOKEN_CHANGED,\n  ChangeStream.END,\n  ChangeStream.CLOSE\n];\n\nfunction setIsEmitter<TSchema extends Document>(changeStream: ChangeStream<TSchema>): void {\n  if (changeStream[kMode] === 'iterator') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new MongoAPIError(\n      'ChangeStream cannot be used as an EventEmitter after being used as an iterator'\n    );\n  }\n  changeStream[kMode] = 'emitter';\n}\n\nfunction setIsIterator<TSchema extends Document>(changeStream: ChangeStream<TSchema>): void {\n  if (changeStream[kMode] === 'emitter') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new MongoAPIError(\n      'ChangeStream cannot be used as an iterator after being used as an EventEmitter'\n    );\n  }\n  changeStream[kMode] = 'iterator';\n}\n\n/**\n * Create a new change stream cursor based on self's configuration\n * @internal\n */\nfunction createChangeStreamCursor<TSchema extends Document>(\n  changeStream: ChangeStream<TSchema>,\n  options: ChangeStreamOptions | ResumeOptions\n): ChangeStreamCursor<TSchema> {\n  const changeStreamStageOptions = applyKnownOptions(options, CHANGE_STREAM_OPTIONS);\n  if (changeStream.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n    changeStreamStageOptions.allChangesForCluster = true;\n  }\n  const pipeline = [{ $changeStream: changeStreamStageOptions } as Document].concat(\n    changeStream.pipeline\n  );\n\n  const cursorOptions: ChangeStreamCursorOptions = applyKnownOptions(options, CURSOR_OPTIONS);\n\n  const changeStreamCursor = new ChangeStreamCursor<TSchema>(\n    getTopology(changeStream.parent),\n    changeStream.namespace,\n    pipeline,\n    cursorOptions\n  );\n\n  for (const event of CHANGE_STREAM_EVENTS) {\n    changeStreamCursor.on(event, e => changeStream.emit(event, e));\n  }\n\n  if (changeStream.listenerCount(ChangeStream.CHANGE) > 0) {\n    streamEvents(changeStream, changeStreamCursor);\n  }\n\n  return changeStreamCursor;\n}\n\nfunction applyKnownOptions(source: Document, options: ReadonlyArray<string>) {\n  const result: Document = {};\n\n  for (const option of options) {\n    if (option in source) {\n      result[option] = source[option];\n    }\n  }\n\n  return result;\n}\ninterface TopologyWaitOptions {\n  start?: number;\n  timeout?: number;\n  readPreference?: ReadPreference;\n}\n// This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\nconst SELECTION_TIMEOUT = 30000;\nfunction waitForTopologyConnected(\n  topology: Topology,\n  options: TopologyWaitOptions,\n  callback: Callback\n) {\n  setTimeout(() => {\n    if (options && options.start == null) {\n      options.start = now();\n    }\n\n    const start = options.start || now();\n    const timeout = options.timeout || SELECTION_TIMEOUT;\n    if (topology.isConnected()) {\n      return callback();\n    }\n\n    if (calculateDurationInMs(start) > timeout) {\n      // TODO(NODE-3497): Replace with MongoNetworkTimeoutError\n      return callback(new MongoRuntimeError('Timed out waiting for connection'));\n    }\n\n    waitForTopologyConnected(topology, options, callback);\n  }, 500); // this is an arbitrary wait time to allow SDAM to transition\n}\n\nfunction closeWithError<TSchema extends Document>(\n  changeStream: ChangeStream<TSchema>,\n  error: AnyError,\n  callback?: Callback\n): void {\n  if (!callback) {\n    changeStream.emit(ChangeStream.ERROR, error);\n  }\n\n  changeStream.close(() => callback && callback(error));\n}\n\nfunction streamEvents<TSchema extends Document>(\n  changeStream: ChangeStream<TSchema>,\n  cursor: ChangeStreamCursor<TSchema>\n): void {\n  setIsEmitter(changeStream);\n  const stream = changeStream[kCursorStream] || cursor.stream();\n  changeStream[kCursorStream] = stream;\n  stream.on('data', change => processNewChange(changeStream, change));\n  stream.on('error', error => processError(changeStream, error));\n}\n\nfunction endStream<TSchema extends Document>(changeStream: ChangeStream<TSchema>): void {\n  const cursorStream = changeStream[kCursorStream];\n  if (cursorStream) {\n    ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n    cursorStream.destroy();\n  }\n\n  changeStream[kCursorStream] = undefined;\n}\n\nfunction processNewChange<TSchema extends Document>(\n  changeStream: ChangeStream<TSchema>,\n  change: Nullable<ChangeStreamDocument<TSchema>>,\n  callback?: Callback<ChangeStreamDocument<TSchema>>\n) {\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  }\n\n  // a null change means the cursor has been notified, implicitly closing the change stream\n  if (change == null) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    return closeWithError(changeStream, new MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR), callback);\n  }\n\n  if (change && !change._id) {\n    return closeWithError(\n      changeStream,\n      new MongoChangeStreamError(NO_RESUME_TOKEN_ERROR),\n      callback\n    );\n  }\n\n  // cache the resume token\n  changeStream.cursor?.cacheResumeToken(change._id);\n\n  // wipe the startAtOperationTime if there was one so that there won't be a conflict\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n  changeStream.options.startAtOperationTime = undefined;\n\n  // Return the change\n  if (!callback) return changeStream.emit(ChangeStream.CHANGE, change);\n  return callback(undefined, change);\n}\n\nfunction processError<TSchema extends Document>(\n  changeStream: ChangeStream<TSchema>,\n  error: AnyError,\n  callback?: Callback\n) {\n  const cursor = changeStream.cursor;\n\n  // If the change stream has been closed explicitly, do not process error.\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  }\n\n  // if the resume succeeds, continue with the new cursor\n  function resumeWithCursor(newCursor: ChangeStreamCursor<TSchema>) {\n    changeStream.cursor = newCursor;\n    processResumeQueue(changeStream);\n  }\n\n  // otherwise, raise an error and close the change stream\n  function unresumableError(err: AnyError) {\n    if (!callback) {\n      changeStream.emit(ChangeStream.ERROR, err);\n    }\n\n    changeStream.close(() => processResumeQueue(changeStream, err));\n  }\n\n  if (cursor && isResumableError(error as MongoError, maxWireVersion(cursor.server))) {\n    changeStream.cursor = undefined;\n\n    // stop listening to all events from old cursor\n    endStream(changeStream);\n\n    // close internal cursor, ignore errors\n    cursor.close();\n\n    const topology = getTopology(changeStream.parent);\n    waitForTopologyConnected(topology, { readPreference: cursor.readPreference }, err => {\n      // if the topology can't reconnect, close the stream\n      if (err) return unresumableError(err);\n\n      // create a new cursor, preserving the old cursor's options\n      const newCursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\n\n      // attempt to continue in emitter mode\n      if (!callback) return resumeWithCursor(newCursor);\n\n      // attempt to continue in iterator mode\n      newCursor.hasNext(err => {\n        // if there's an error immediately after resuming, close the stream\n        if (err) return unresumableError(err);\n        resumeWithCursor(newCursor);\n      });\n    });\n    return;\n  }\n\n  // if initial error wasn't resumable, raise an error and close the change stream\n  return closeWithError(changeStream, error, callback);\n}\n\n/**\n * Safely provides a cursor across resume attempts\n *\n * @param changeStream - the parent ChangeStream\n */\nfunction getCursor<T extends Document>(\n  changeStream: ChangeStream<T>,\n  callback: Callback<ChangeStreamCursor<T>>\n) {\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  }\n\n  // if a cursor exists and it is open, return it\n  if (changeStream.cursor) {\n    callback(undefined, changeStream.cursor);\n    return;\n  }\n\n  // no cursor, queue callback until topology reconnects\n  changeStream[kResumeQueue].push(callback);\n}\n\n/**\n * Drain the resume queue when a new has become available\n *\n * @param changeStream - the parent ChangeStream\n * @param err - error getting a new cursor\n */\nfunction processResumeQueue<TSchema extends Document>(\n  changeStream: ChangeStream<TSchema>,\n  err?: Error\n) {\n  while (changeStream[kResumeQueue].length) {\n    const request = changeStream[kResumeQueue].pop();\n    if (!request) break; // Should never occur but TS can't use the length check in the while condition\n\n    if (!err) {\n      if (changeStream[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        request(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n        return;\n      }\n      if (!changeStream.cursor) {\n        request(new MongoChangeStreamError(NO_CURSOR_ERROR));\n        return;\n      }\n    }\n    request(err, changeStream.cursor);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}