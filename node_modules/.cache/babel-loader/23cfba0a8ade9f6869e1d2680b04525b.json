{"ast":null,"code":"'use strict';\n\nmodule.exports = function checkEmbeddedDiscriminatorKeyProjection(userProjection, path, schema, selected, addedPaths) {\n  const userProjectedInPath = Object.keys(userProjection).reduce((cur, key) => cur || key.startsWith(path + '.'), false);\n\n  const _discriminatorKey = path + '.' + schema.options.discriminatorKey;\n\n  if (!userProjectedInPath && addedPaths.length === 1 && addedPaths[0] === _discriminatorKey) {\n    selected.splice(selected.indexOf(_discriminatorKey), 1);\n  }\n};","map":{"version":3,"names":["module","exports","checkEmbeddedDiscriminatorKeyProjection","userProjection","path","schema","selected","addedPaths","userProjectedInPath","Object","keys","reduce","cur","key","startsWith","_discriminatorKey","options","discriminatorKey","length","splice","indexOf"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/helpers/discriminator/checkEmbeddedDiscriminatorKeyProjection.js"],"sourcesContent":["'use strict';\n\nmodule.exports = function checkEmbeddedDiscriminatorKeyProjection(userProjection, path, schema, selected, addedPaths) {\n  const userProjectedInPath = Object.keys(userProjection).\n    reduce((cur, key) => cur || key.startsWith(path + '.'), false);\n  const _discriminatorKey = path + '.' + schema.options.discriminatorKey;\n  if (!userProjectedInPath &&\n      addedPaths.length === 1 &&\n      addedPaths[0] === _discriminatorKey) {\n    selected.splice(selected.indexOf(_discriminatorKey), 1);\n  }\n};"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,uCAAT,CAAiDC,cAAjD,EAAiEC,IAAjE,EAAuEC,MAAvE,EAA+EC,QAA/E,EAAyFC,UAAzF,EAAqG;EACpH,MAAMC,mBAAmB,GAAGC,MAAM,CAACC,IAAP,CAAYP,cAAZ,EAC1BQ,MAD0B,CACnB,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,IAAIC,GAAG,CAACC,UAAJ,CAAeV,IAAI,GAAG,GAAtB,CADF,EAC8B,KAD9B,CAA5B;;EAEA,MAAMW,iBAAiB,GAAGX,IAAI,GAAG,GAAP,GAAaC,MAAM,CAACW,OAAP,CAAeC,gBAAtD;;EACA,IAAI,CAACT,mBAAD,IACAD,UAAU,CAACW,MAAX,KAAsB,CADtB,IAEAX,UAAU,CAAC,CAAD,CAAV,KAAkBQ,iBAFtB,EAEyC;IACvCT,QAAQ,CAACa,MAAT,CAAgBb,QAAQ,CAACc,OAAT,CAAiBL,iBAAjB,CAAhB,EAAqD,CAArD;EACD;AACF,CATD"},"metadata":{},"sourceType":"script"}