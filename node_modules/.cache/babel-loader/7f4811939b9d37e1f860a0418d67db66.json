{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('./error/cast');\n\nconst DocumentNotFoundError = require('./error/notFound');\n\nconst Kareem = require('kareem');\n\nconst MongooseError = require('./error/mongooseError');\n\nconst ObjectParameterError = require('./error/objectParameter');\n\nconst QueryCursor = require('./cursor/QueryCursor');\n\nconst ReadPreference = require('./driver').get().ReadPreference;\n\nconst ValidationError = require('./error/validation');\n\nconst {\n  applyGlobalMaxTimeMS,\n  applyGlobalDiskUse\n} = require('./helpers/query/applyGlobalOption');\n\nconst applyWriteConcern = require('./helpers/schema/applyWriteConcern');\n\nconst cast = require('./cast');\n\nconst castArrayFilters = require('./helpers/update/castArrayFilters');\n\nconst castNumber = require('./cast/number');\n\nconst castUpdate = require('./helpers/query/castUpdate');\n\nconst completeMany = require('./helpers/query/completeMany');\n\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\n\nconst getDiscriminatorByValue = require('./helpers/discriminator/getDiscriminatorByValue');\n\nconst hasDollarKeys = require('./helpers/query/hasDollarKeys');\n\nconst helpers = require('./queryhelpers');\n\nconst immediate = require('./helpers/immediate');\n\nconst isExclusive = require('./helpers/projection/isExclusive');\n\nconst isInclusive = require('./helpers/projection/isInclusive');\n\nconst isSubpath = require('./helpers/projection/isSubpath');\n\nconst mquery = require('mquery');\n\nconst parseProjection = require('./helpers/projection/parseProjection');\n\nconst removeUnusedArrayFilters = require('./helpers/update/removeUnusedArrayFilters');\n\nconst sanitizeFilter = require('./helpers/query/sanitizeFilter');\n\nconst sanitizeProjection = require('./helpers/query/sanitizeProjection');\n\nconst selectPopulatedFields = require('./helpers/query/selectPopulatedFields');\n\nconst setDefaultsOnInsert = require('./helpers/setDefaultsOnInsert');\n\nconst updateValidators = require('./helpers/updateValidators');\n\nconst util = require('util');\n\nconst utils = require('./utils');\n\nconst validOps = require('./helpers/query/validOps');\n\nconst wrapThunk = require('./helpers/query/wrapThunk');\n\nconst queryOptionMethods = new Set(['allowDiskUse', 'batchSize', 'collation', 'comment', 'explain', 'hint', 'j', 'lean', 'limit', 'maxScan', 'maxTimeMS', 'maxscan', 'populate', 'projection', 'read', 'select', 'skip', 'slice', 'sort', 'tailable', 'w', 'writeConcern', 'wtimeout']);\n/**\n * Query constructor used for building queries. You do not need\n * to instantiate a `Query` directly. Instead use Model functions like\n * [`Model.find()`](/docs/api.html#find_find).\n *\n * #### Example:\n *\n *     const query = MyModel.find(); // `query` is an instance of `Query`\n *     query.setOptions({ lean : true });\n *     query.collection(MyModel.collection);\n *     query.where('age').gte(21).exec(callback);\n *\n *     // You can instantiate a query directly. There is no need to do\n *     // this unless you're an advanced user with a very good reason to.\n *     const query = new mongoose.Query();\n *\n * @param {Object} [options]\n * @param {Object} [model]\n * @param {Object} [conditions]\n * @param {Object} [collection] Mongoose collection\n * @api public\n */\n\nfunction Query(conditions, options, model, collection) {\n  // this stuff is for dealing with custom queries created by #toConstructor\n  if (!this._mongooseOptions) {\n    this._mongooseOptions = {};\n  }\n\n  options = options || {};\n  this._transforms = [];\n  this._hooks = new Kareem();\n  this._executionStack = null; // this is the case where we have a CustomQuery, we need to check if we got\n  // options passed in, and if we did, merge them in\n\n  const keys = Object.keys(options);\n\n  for (const key of keys) {\n    this._mongooseOptions[key] = options[key];\n  }\n\n  if (collection) {\n    this.mongooseCollection = collection;\n  }\n\n  if (model) {\n    this.model = model;\n    this.schema = model.schema;\n  } // this is needed because map reduce returns a model that can be queried, but\n  // all of the queries on said model should be lean\n\n\n  if (this.model && this.model._mapreduce) {\n    this.lean();\n  } // inherit mquery\n\n\n  mquery.call(this, null, options);\n\n  if (collection) {\n    this.collection(collection);\n  }\n\n  if (conditions) {\n    this.find(conditions);\n  }\n\n  this.options = this.options || {}; // For gh-6880. mquery still needs to support `fields` by default for old\n  // versions of MongoDB\n\n  this.$useProjection = true;\n  const collation = this && this.schema && this.schema.options && this.schema.options.collation || null;\n\n  if (collation != null) {\n    this.options.collation = collation;\n  }\n}\n/*!\n * inherit mquery\n */\n\n\nQuery.prototype = new mquery();\nQuery.prototype.constructor = Query;\nQuery.base = mquery.prototype;\n/**\n * Flag to opt out of using `$geoWithin`.\n *\n * ```javascript\n * mongoose.Query.use$geoWithin = false;\n * ```\n *\n * MongoDB 2.4 deprecated the use of `$within`, replacing it with `$geoWithin`. Mongoose uses `$geoWithin` by default (which is 100% backward compatible with `$within`). If you are running an older version of MongoDB, set this flag to `false` so your `within()` queries continue to work.\n *\n * @see https://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @default true\n * @property use$geoWithin\n * @memberOf Query\n * @receiver Query\n * @api public\n */\n\nQuery.use$geoWithin = mquery.use$geoWithin;\n/**\n * Converts this query to a customized, reusable query constructor with all arguments and options retained.\n *\n * #### Example\n *\n *     // Create a query for adventure movies and read from the primary\n *     // node in the replica-set unless it is down, in which case we'll\n *     // read from a secondary node.\n *     const query = Movie.find({ tags: 'adventure' }).read('primaryPreferred');\n *\n *     // create a custom Query constructor based off these settings\n *     const Adventure = query.toConstructor();\n *\n *     // Adventure is now a subclass of mongoose.Query and works the same way but with the\n *     // default query parameters and options set.\n *     Adventure().exec(callback)\n *\n *     // further narrow down our query results while still using the previous settings\n *     Adventure().where({ name: /^Life/ }).exec(callback);\n *\n *     // since Adventure is a stand-alone constructor we can also add our own\n *     // helper methods and getters without impacting global queries\n *     Adventure.prototype.startsWith = function (prefix) {\n *       this.where({ name: new RegExp('^' + prefix) })\n *       return this;\n *     }\n *     Object.defineProperty(Adventure.prototype, 'highlyRated', {\n *       get: function () {\n *         this.where({ rating: { $gt: 4.5 }});\n *         return this;\n *       }\n *     })\n *     Adventure().highlyRated.startsWith('Life').exec(callback)\n *\n * @return {Query} subclass-of-Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  const model = this.model;\n  const coll = this.mongooseCollection;\n\n  const CustomQuery = function (criteria, options) {\n    if (!(this instanceof CustomQuery)) {\n      return new CustomQuery(criteria, options);\n    }\n\n    this._mongooseOptions = utils.clone(p._mongooseOptions);\n    Query.call(this, criteria, options || null, model, coll);\n  };\n\n  util.inherits(CustomQuery, model.Query); // set inherited defaults\n\n  const p = CustomQuery.prototype;\n  p.options = {}; // Need to handle `sort()` separately because entries-style `sort()` syntax\n  // `sort([['prop1', 1]])` confuses mquery into losing the outer nested array.\n  // See gh-8159\n\n  const options = Object.assign({}, this.options);\n\n  if (options.sort != null) {\n    p.sort(options.sort);\n    delete options.sort;\n  }\n\n  p.setOptions(options);\n  p.op = this.op;\n\n  p._validateOp();\n\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._update = utils.clone(this._update, {\n    flattenDecimals: false\n  });\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._mongooseOptions = this._mongooseOptions;\n  return CustomQuery;\n};\n/**\n * Make a copy of this query so you can re-execute it.\n *\n * #### Example:\n *     const q = Book.findOne({ title: 'Casino Royale' });\n *     await q.exec();\n *     await q.exec(); // Throws an error because you can't execute a query twice\n *\n *     await q.clone().exec(); // Works\n *\n * @method clone\n * @return {Query} copy\n * @memberOf Query\n * @instance\n * @api public\n */\n\n\nQuery.prototype.clone = function clone() {\n  const model = this.model;\n  const collection = this.mongooseCollection;\n  const q = new this.constructor({}, {}, model, collection); // Need to handle `sort()` separately because entries-style `sort()` syntax\n  // `sort([['prop1', 1]])` confuses mquery into losing the outer nested array.\n  // See gh-8159\n\n  const options = Object.assign({}, this.options);\n\n  if (options.sort != null) {\n    q.sort(options.sort);\n    delete options.sort;\n  }\n\n  q.setOptions(options);\n  q.op = this.op;\n\n  q._validateOp();\n\n  q._conditions = utils.clone(this._conditions);\n  q._fields = utils.clone(this._fields);\n  q._update = utils.clone(this._update, {\n    flattenDecimals: false\n  });\n  q._path = this._path;\n  q._distinct = this._distinct;\n  q._collection = this._collection;\n  q._mongooseOptions = this._mongooseOptions;\n  return q;\n};\n/**\n * Specifies a javascript function or expression to pass to MongoDBs query system.\n *\n * #### Example\n *\n *     query.$where('this.comments.length === 10 || this.name.length === 5')\n *\n *     // or\n *\n *     query.$where(function () {\n *       return this.comments.length === 10 || this.name.length === 5;\n *     })\n *\n * #### Note:\n *\n * Only use `$where` when you have a condition that cannot be met using other MongoDB operators like `$lt`.\n * **Be sure to read about all of [its caveats](https://docs.mongodb.org/manual/reference/operator/where/) before using.**\n *\n * @see $where https://docs.mongodb.org/manual/reference/operator/where/\n * @method $where\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @instance\n * @method $where\n * @api public\n */\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * #### Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @method where\n * @memberOf Query\n * @instance\n * @param {String|Object} [path]\n * @param {any} [val]\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a `$slice` projection for an array.\n *\n * #### Example\n *\n *     query.slice('comments', 5);\n *     query.slice('comments', -5);\n *     query.slice('comments', [10, 5]);\n *     query.where('comments').slice(5);\n *     query.where('comments').slice([-10, 5]);\n *\n * @method slice\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb https://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @see $slice https://docs.mongodb.org/manual/reference/projection/slice/#prj._S_slice\n * @api public\n */\n\n\nQuery.prototype.slice = function () {\n  if (arguments.length === 0) {\n    return this;\n  }\n\n  this._validate('slice');\n\n  let path;\n  let val;\n\n  if (arguments.length === 1) {\n    const arg = arguments[0];\n\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const keys = Object.keys(arg);\n      const numKeys = keys.length;\n\n      for (let i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n\n      return this;\n    }\n\n    this._ensurePath('slice');\n\n    path = this._path;\n    val = arguments[0];\n  } else if (arguments.length === 2) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n\n      path = this._path;\n      val = [arguments[0], arguments[1]];\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (arguments.length === 3) {\n    path = arguments[0];\n    val = [arguments[1], arguments[2]];\n  }\n\n  const p = {};\n  p[path] = {\n    $slice: val\n  };\n  this.select(p);\n  return this;\n};\n/*!\n * ignore\n */\n\n\nconst validOpsSet = new Set(validOps);\n\nQuery.prototype._validateOp = function () {\n  if (this.op != null && !validOpsSet.has(this.op)) {\n    this.error(new Error('Query has invalid `op`: \"' + this.op + '\"'));\n  }\n};\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * #### Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @method equals\n * @memberOf Query\n * @instance\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * #### Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }]);\n *\n * @see $or https://docs.mongodb.org/manual/reference/operator/or/\n * @method or\n * @memberOf Query\n * @instance\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * #### Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }]);\n *\n * @see $nor https://docs.mongodb.org/manual/reference/operator/nor/\n * @method nor\n * @memberOf Query\n * @instance\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * #### Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @method and\n * @memberOf Query\n * @instance\n * @see $and https://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a `$gt` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * #### Example\n *\n *     Thing.find().where('age').gt(21);\n *\n *     // or\n *     Thing.find().gt('age', 21);\n *\n * @method gt\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $gt https://docs.mongodb.org/manual/reference/operator/gt/\n * @api public\n */\n\n/**\n * Specifies a `$gte` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $gte https://docs.mongodb.org/manual/reference/operator/gte/\n * @api public\n */\n\n/**\n * Specifies a `$lt` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $lt https://docs.mongodb.org/manual/reference/operator/lt/\n * @api public\n */\n\n/**\n * Specifies a `$lte` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @see $lte https://docs.mongodb.org/manual/reference/operator/lte/\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$ne` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $ne https://docs.mongodb.org/manual/reference/operator/ne/\n * @method ne\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {any} val\n * @api public\n */\n\n/**\n * Specifies an `$in` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $in https://docs.mongodb.org/manual/reference/operator/in/\n * @method in\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies an `$nin` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $nin https://docs.mongodb.org/manual/reference/operator/nin/\n * @method nin\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies an `$all` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * #### Example:\n *\n *     MyModel.find().where('pets').all(['dog', 'cat', 'ferret']);\n *     // Equivalent:\n *     MyModel.find().all('pets', ['dog', 'cat', 'ferret']);\n *\n * @see $all https://docs.mongodb.org/manual/reference/operator/all/\n * @method all\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies a `$size` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * #### Example\n *\n *     const docs = await MyModel.where('tags').size(0).exec();\n *     assert(Array.isArray(docs));\n *     console.log('documents with 0 tags', docs);\n *\n * @see $size https://docs.mongodb.org/manual/reference/operator/size/\n * @method size\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$regex` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $regex https://docs.mongodb.org/manual/reference/operator/regex/\n * @method regex\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */\n\n/**\n * Specifies a `maxDistance` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $maxDistance https://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @method maxDistance\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$mod` condition, filters documents for documents whose\n * `path` property is a number that is equal to `remainder` modulo `divisor`.\n *\n * #### Example\n *\n *     // All find products whose inventory is odd\n *     Product.find().mod('inventory', [2, 1]);\n *     Product.find().where('inventory').mod([2, 1]);\n *     // This syntax is a little strange, but supported.\n *     Product.find().where('inventory').mod(2, 1);\n *\n * @method mod\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val must be of length 2, first element is `divisor`, 2nd element is `remainder`.\n * @return {Query} this\n * @see $mod https://docs.mongodb.org/manual/reference/operator/mod/\n * @api public\n */\n\n\nQuery.prototype.mod = function () {\n  let val;\n  let path;\n\n  if (arguments.length === 1) {\n    this._ensurePath('mod');\n\n    val = arguments[0];\n    path = this._path;\n  } else if (arguments.length === 2 && !Array.isArray(arguments[1])) {\n    this._ensurePath('mod');\n\n    val = [arguments[0], arguments[1]];\n    path = this._path;\n  } else if (arguments.length === 3) {\n    val = [arguments[1], arguments[2]];\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n};\n/**\n * Specifies an `$exists` condition\n *\n * #### Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @method exists\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Boolean} val\n * @return {Query} this\n * @see $exists https://docs.mongodb.org/manual/reference/operator/exists/\n * @api public\n */\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * #### Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @method elemMatch\n * @memberOf Query\n * @instance\n * @param {String|Object|Function} path\n * @param {Object|Function} filter\n * @return {Query} this\n * @see $elemMatch https://docs.mongodb.org/manual/reference/operator/elemMatch/\n * @api public\n */\n\n/**\n * Defines a `$within` or `$geoWithin` argument for geo-spatial queries.\n *\n * #### Example\n *\n *     query.where(path).within().box()\n *     query.where(path).within().circle()\n *     query.where(path).within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * **MUST** be used after `where()`.\n *\n * #### Note:\n *\n * As of Mongoose 3.7, `$geoWithin` is always used for queries. To change this behavior, see [Query.use$geoWithin](#query_Query-use%2524geoWithin).\n *\n * #### Note:\n *\n * In Mongoose 3.7, `within` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method within\n * @see $polygon https://docs.mongodb.org/manual/reference/operator/polygon/\n * @see $box https://docs.mongodb.org/manual/reference/operator/box/\n * @see $geometry https://docs.mongodb.org/manual/reference/operator/geometry/\n * @see $center https://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere https://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @memberOf Query\n * @instance\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies the maximum number of documents the query will return.\n *\n * #### Example\n *\n *     query.limit(20);\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @api public\n */\n\n\nQuery.prototype.limit = function limit(v) {\n  this._validate('limit');\n\n  if (typeof v === 'string') {\n    try {\n      v = castNumber(v);\n    } catch (err) {\n      throw new CastError('Number', v, 'limit');\n    }\n  }\n\n  this.options.limit = v;\n  return this;\n};\n/**\n * Specifies the number of documents to skip.\n *\n * #### Example\n *\n *     query.skip(100).limit(20);\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see cursor.skip https://docs.mongodb.org/manual/reference/method/cursor.skip/\n * @api public\n */\n\n\nQuery.prototype.skip = function skip(v) {\n  this._validate('skip');\n\n  if (typeof v === 'string') {\n    try {\n      v = castNumber(v);\n    } catch (err) {\n      throw new CastError('Number', v, 'skip');\n    }\n  }\n\n  this.options.skip = v;\n  return this;\n};\n/**\n * Specifies the maxScan option.\n *\n * #### Example\n *\n *     query.maxScan(100);\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see maxScan https://docs.mongodb.org/manual/reference/operator/maxScan/\n * @api public\n */\n\n/**\n * Specifies the batchSize option.\n *\n * #### Example\n *\n *     query.batchSize(100)\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see batchSize https://docs.mongodb.org/manual/reference/method/cursor.batchSize/\n * @api public\n */\n\n/**\n * Specifies the `comment` option.\n *\n * #### Example\n *\n *     query.comment('login query')\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @instance\n * @param {String} val\n * @see comment https://docs.mongodb.org/manual/reference/operator/comment/\n * @api public\n */\n\n/**\n * Specifies this query as a `snapshot` query.\n *\n * #### Example\n *\n *     query.snapshot(); // true\n *     query.snapshot(true);\n *     query.snapshot(false);\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @method snapshot\n * @memberOf Query\n * @instance\n * @see snapshot https://docs.mongodb.org/manual/reference/operator/snapshot/\n * @return {Query} this\n * @api public\n */\n\n/**\n * Sets query hints.\n *\n * #### Example\n *\n *     query.hint({ indexA: 1, indexB: -1 });\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @method hint\n * @memberOf Query\n * @instance\n * @param {Object} val a hint object\n * @return {Query} this\n * @see $hint https://docs.mongodb.org/manual/reference/operator/hint/\n * @api public\n */\n\n/**\n * Get/set the current projection (AKA fields). Pass `null` to remove the\n * current projection.\n *\n * Unlike `projection()`, the `select()` function modifies the current\n * projection in place. This function overwrites the existing projection.\n *\n * #### Example:\n *\n *     const q = Model.find();\n *     q.projection(); // null\n *\n *     q.select('a b');\n *     q.projection(); // { a: 1, b: 1 }\n *\n *     q.projection({ c: 1 });\n *     q.projection(); // { c: 1 }\n *\n *     q.projection(null);\n *     q.projection(); // null\n *\n *\n * @method projection\n * @memberOf Query\n * @instance\n * @param {Object|null} arg\n * @return {Object} the current projection\n * @api public\n */\n\n\nQuery.prototype.projection = function (arg) {\n  if (arguments.length === 0) {\n    return this._fields;\n  }\n\n  this._fields = {};\n  this._userProvidedFields = {};\n  this.select(arg);\n  return this._fields;\n};\n/**\n * Specifies which document fields to include or exclude (also known as the query \"projection\")\n *\n * When using string syntax, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included. Lastly, if a path is prefixed with `+`, it forces inclusion of the path, which is useful for paths excluded at the [schema level](/docs/api.html#schematype_SchemaType-select).\n *\n * A projection _must_ be either inclusive or exclusive. In other words, you must\n * either list the fields to include (which excludes all others), or list the fields\n * to exclude (which implies all other fields are included). The [`_id` field is the only exception because MongoDB includes it by default](https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/#suppress-id-field).\n *\n * #### Example\n *\n *     // include a and b, exclude other fields\n *     query.select('a b');\n *     // Equivalent syntaxes:\n *     query.select(['a', 'b']);\n *     query.select({ a: 1, b: 1 });\n *\n *     // exclude c and d, include other fields\n *     query.select('-c -d');\n *\n *     // Use `+` to override schema-level `select: false` without making the\n *     // projection inclusive.\n *     const schema = new Schema({\n *       foo: { type: String, select: false },\n *       bar: String\n *     });\n *     // ...\n *     query.select('+foo'); // Override foo's `select: false` without excluding `bar`\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({ a: 1, b: 1 });\n *     query.select({ c: 0, d: 0 });\n *\n *     Additional calls to select can override the previous selection:\n *     query.select({ a: 1, b: 1 }).select({ b: 0 }); // selection is now { a: 1 }\n *     query.select({ a: 0, b: 0 }).select({ b: 1 }); // selection is now { a: 0 }\n *\n *\n * @method select\n * @memberOf Query\n * @instance\n * @param {Object|String|Array<String>} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\n\nQuery.prototype.select = function select() {\n  let arg = arguments[0];\n  if (!arg) return this;\n\n  if (arguments.length !== 1) {\n    throw new Error('Invalid select: select only takes 1 argument');\n  }\n\n  this._validate('select');\n\n  const fields = this._fields || (this._fields = {});\n  const userProvidedFields = this._userProvidedFields || (this._userProvidedFields = {});\n  let sanitizeProjection = undefined;\n\n  if (this.model != null && utils.hasUserDefinedProperty(this.model.db.options, 'sanitizeProjection')) {\n    sanitizeProjection = this.model.db.options.sanitizeProjection;\n  } else if (this.model != null && utils.hasUserDefinedProperty(this.model.base.options, 'sanitizeProjection')) {\n    sanitizeProjection = this.model.base.options.sanitizeProjection;\n  } else {\n    sanitizeProjection = this._mongooseOptions.sanitizeProjection;\n  }\n\n  function sanitizeValue(value) {\n    return typeof value === 'string' && sanitizeProjection ? value = 1 : value;\n  }\n\n  arg = parseProjection(arg);\n\n  if (utils.isObject(arg)) {\n    if (this.selectedInclusively()) {\n      Object.entries(arg).forEach(_ref => {\n        let [key, value] = _ref;\n\n        if (value) {\n          // Add the field to the projection\n          fields[key] = userProvidedFields[key] = sanitizeValue(value);\n        } else {\n          // Remove the field from the projection\n          Object.keys(userProvidedFields).forEach(field => {\n            if (isSubpath(key, field)) {\n              delete fields[field];\n              delete userProvidedFields[field];\n            }\n          });\n        }\n      });\n    } else if (this.selectedExclusively()) {\n      Object.entries(arg).forEach(_ref2 => {\n        let [key, value] = _ref2;\n\n        if (!value) {\n          // Add the field to the projection\n          fields[key] = userProvidedFields[key] = sanitizeValue(value);\n        } else {\n          // Remove the field from the projection\n          Object.keys(userProvidedFields).forEach(field => {\n            if (isSubpath(key, field)) {\n              delete fields[field];\n              delete userProvidedFields[field];\n            }\n          });\n        }\n      });\n    } else {\n      const keys = Object.keys(arg);\n\n      for (let i = 0; i < keys.length; ++i) {\n        const value = arg[keys[i]];\n        fields[keys[i]] = sanitizeValue(value);\n        userProvidedFields[keys[i]] = sanitizeValue(value);\n      }\n    }\n\n    return this;\n  }\n\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n};\n/**\n * Determines the MongoDB nodes from which to read.\n *\n * #### Preferences:\n *\n * ```\n * primary - (default) Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n * secondary            Read from secondary if available, otherwise error.\n * primaryPreferred     Read from primary if available, otherwise a secondary.\n * secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n * nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n * ```\n *\n * Aliases\n *\n * ```\n * p   primary\n * pp  primaryPreferred\n * s   secondary\n * sp  secondaryPreferred\n * n   nearest\n * ```\n *\n * #### Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // read from secondaries with matching tags\n *     new Query().read('s', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }])\n *\n * Read more about how to use read preferences [here](https://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](https://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @method read\n * @memberOf Query\n * @instance\n * @param {String} pref one of the listed preference options or aliases\n * @param {Array} [tags] optional tags for this query\n * @see mongodb https://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver https://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.read = function read(pref, tags) {\n  // first cast into a ReadPreference object to support tags\n  const read = new ReadPreference(pref, tags);\n  this.options.readPreference = read;\n  return this;\n};\n/*!\n * ignore\n */\n\n\nQuery.prototype.toString = function toString() {\n  if (this.op === 'count' || this.op === 'countDocuments' || this.op === 'find' || this.op === 'findOne' || this.op === 'deleteMany' || this.op === 'deleteOne' || this.op === 'findOneAndDelete' || this.op === 'findOneAndRemove' || this.op === 'remove') {\n    return `${this.model.modelName}.${this.op}(${util.inspect(this._conditions)})`;\n  }\n\n  if (this.op === 'distinct') {\n    return `${this.model.modelName}.distinct('${this._distinct}', ${util.inspect(this._conditions)})`;\n  }\n\n  if (this.op === 'findOneAndReplace' || this.op === 'findOneAndUpdate' || this.op === 'replaceOne' || this.op === 'update' || this.op === 'updateMany' || this.op === 'updateOne') {\n    return `${this.model.modelName}.${this.op}(${util.inspect(this._conditions)}, ${util.inspect(this._update)})`;\n  } // 'estimatedDocumentCount' or any others\n\n\n  return `${this.model.modelName}.${this.op}()`;\n};\n/**\n * Sets the [MongoDB session](https://docs.mongodb.com/manual/reference/server-sessions/)\n * associated with this query. Sessions are how you mark a query as part of a\n * [transaction](/docs/transactions.html).\n *\n * Calling `session(null)` removes the session from this query.\n *\n * #### Example:\n *\n *     const s = await mongoose.startSession();\n *     await mongoose.model('Person').findOne({ name: 'Axl Rose' }).session(s);\n *\n * @method session\n * @memberOf Query\n * @instance\n * @param {ClientSession} [session] from `await conn.startSession()`\n * @see Connection.prototype.startSession() /docs/api.html#connection_Connection-startSession\n * @see mongoose.startSession() /docs/api.html#mongoose_Mongoose-startSession\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.session = function session(v) {\n  if (v == null) {\n    delete this.options.session;\n  }\n\n  this.options.session = v;\n  return this;\n};\n/**\n * Sets the 3 write concern parameters for this query:\n *\n * - `w`: Sets the specified number of `mongod` servers, or tag set of `mongod` servers, that must acknowledge this write before this write is considered successful.\n * - `j`: Boolean, set to `true` to request acknowledgement that this operation has been persisted to MongoDB's on-disk journal.\n * - `wtimeout`: If [`w > 1`](/docs/api.html#query_Query-w), the maximum amount of time to wait for this write to propagate through the replica set before this operation fails. The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern` option](/docs/guide.html#writeConcern)\n *\n * #### Example:\n *\n *     // The 'majority' option means the `deleteOne()` promise won't resolve\n *     // until the `deleteOne()` has propagated to the majority of the replica set\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       writeConcern({ w: 'majority' });\n *\n * @method writeConcern\n * @memberOf Query\n * @instance\n * @param {Object} writeConcern the write concern value to set\n * @see mongodb https://mongodb.github.io/node-mongodb-native/3.1/api/global.html#WriteConcern\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.writeConcern = function writeConcern(val) {\n  if (val == null) {\n    delete this.options.writeConcern;\n    return this;\n  }\n\n  this.options.writeConcern = val;\n  return this;\n};\n/**\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\n * that must acknowledge this write before this write is considered successful.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.w` option](/docs/guide.html#writeConcern)\n *\n * #### Example:\n *\n *     // The 'majority' option means the `deleteOne()` promise won't resolve\n *     // until the `deleteOne()` has propagated to the majority of the replica set\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       w('majority');\n *\n * @method w\n * @memberOf Query\n * @instance\n * @param {String|number} val 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.w = function w(val) {\n  if (val == null) {\n    delete this.options.w;\n  }\n\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.w = val;\n  } else {\n    this.options.w = val;\n  }\n\n  return this;\n};\n/**\n * Requests acknowledgement that this operation has been persisted to MongoDB's\n * on-disk journal.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.j` option](/docs/guide.html#writeConcern)\n *\n * #### Example:\n *\n *     await mongoose.model('Person').deleteOne({ name: 'Ned Stark' }).j(true);\n *\n * @method j\n * @memberOf Query\n * @instance\n * @param {boolean} val\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.j = function j(val) {\n  if (val == null) {\n    delete this.options.j;\n  }\n\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.j = val;\n  } else {\n    this.options.j = val;\n  }\n\n  return this;\n};\n/**\n * If [`w > 1`](/docs/api.html#query_Query-w), the maximum amount of time to\n * wait for this write to propagate through the replica set before this\n * operation fails. The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.wtimeout` option](/docs/guide.html#writeConcern)\n *\n * #### Example:\n *\n *     // The `deleteOne()` promise won't resolve until this `deleteOne()` has\n *     // propagated to at least `w = 2` members of the replica set. If it takes\n *     // longer than 1 second, this `deleteOne()` will fail.\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       w(2).\n *       wtimeout(1000);\n *\n * @method wtimeout\n * @memberOf Query\n * @instance\n * @param {number} ms number of milliseconds to wait\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.wtimeout = function wtimeout(ms) {\n  if (ms == null) {\n    delete this.options.wtimeout;\n  }\n\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.wtimeout = ms;\n  } else {\n    this.options.wtimeout = ms;\n  }\n\n  return this;\n};\n/**\n * Sets the readConcern option for the query.\n *\n * #### Example:\n *\n *     new Query().readConcern('local')\n *     new Query().readConcern('l')  // same as local\n *\n *     new Query().readConcern('available')\n *     new Query().readConcern('a')  // same as available\n *\n *     new Query().readConcern('majority')\n *     new Query().readConcern('m')  // same as majority\n *\n *     new Query().readConcern('linearizable')\n *     new Query().readConcern('lz') // same as linearizable\n *\n *     new Query().readConcern('snapshot')\n *     new Query().readConcern('s')  // same as snapshot\n *\n *\n * #### Read Concern Level:\n *\n * ```\n * local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n * available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n * majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\n * linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\n * snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\n * ```\n *\n * Aliases\n *\n * ```\n * l   local\n * a   available\n * m   majority\n * lz  linearizable\n * s   snapshot\n * ```\n *\n * Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).\n *\n * @memberOf Query\n * @method readConcern\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\n * @return {Query} this\n * @api public\n */\n\n/**\n * Gets query options.\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.limit(10);\n *     query.setOptions({ maxTimeMS: 1000 });\n *     query.getOptions(); // { limit: 10, maxTimeMS: 1000 }\n *\n * @return {Object} the options\n * @api public\n */\n\n\nQuery.prototype.getOptions = function () {\n  return this.options;\n};\n/**\n * Sets query options. Some options only make sense for certain operations.\n *\n * #### Options:\n *\n * The following options are only for `find()`:\n *\n * - [tailable](https://www.mongodb.org/display/DOCS/Tailable+Cursors)\n * - [sort](https://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D)\n * - [limit](https://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D)\n * - [skip](https://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D)\n * - [allowDiskUse](https://docs.mongodb.com/manual/reference/method/cursor.allowDiskUse/)\n * - [batchSize](https://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D)\n * - [readPreference](https://docs.mongodb.org/manual/applications/replication/#read-preference)\n * - [hint](https://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint)\n * - [comment](https://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment)\n * - [snapshot](https://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D)\n * - [maxscan](https://docs.mongodb.org/v3.2/reference/operator/meta/maxScan/#metaOp._S_maxScan)\n *\n * The following options are only for write operations: `update()`, `updateOne()`, `updateMany()`, `replaceOne()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:\n *\n * - [upsert](https://docs.mongodb.com/manual/reference/method/db.collection.update/)\n * - [writeConcern](https://docs.mongodb.com/manual/reference/method/db.collection.update/)\n * - [timestamps](https://mongoosejs.com/docs/guide.html#timestamps): If `timestamps` is set in the schema, set this option to `false` to skip timestamps for that particular update. Has no effect if `timestamps` is not enabled in the schema options.\n * - overwriteDiscriminatorKey: allow setting the discriminator key in the update. Will use the correct discriminator schema if the update changes the discriminator key.\n *\n * The following options are only for `find()`, `findOne()`, `findById()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:\n *\n * - [lean](./api.html#query_Query-lean)\n * - [populate](/docs/populate.html)\n * - [projection](/docs/api/query.html#query_Query-projection)\n * - sanitizeProjection\n *\n * The following options are only for all operations **except** `update()`, `updateOne()`, `updateMany()`, `remove()`, `deleteOne()`, and `deleteMany()`:\n *\n * - [maxTimeMS](https://docs.mongodb.com/manual/reference/operator/meta/maxTimeMS/)\n *\n * The following options are for `findOneAndUpdate()` and `findOneAndRemove()`\n *\n * - rawResult\n *\n * The following options are for all operations:\n *\n * - [strict](/docs/guide.html#strict)\n * - [collation](https://docs.mongodb.com/manual/reference/collation/)\n * - [session](https://docs.mongodb.com/manual/reference/server-sessions/)\n * - [explain](https://docs.mongodb.com/manual/reference/method/cursor.explain/)\n *\n * @param {Object} options\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.setOptions = function (options, overwrite) {\n  // overwrite is only for internal use\n  if (overwrite) {\n    // ensure that _mongooseOptions & options are two different objects\n    this._mongooseOptions = options && utils.clone(options) || {};\n    this.options = options || {};\n\n    if ('populate' in options) {\n      this.populate(this._mongooseOptions);\n    }\n\n    return this;\n  }\n\n  if (options == null) {\n    return this;\n  }\n\n  if (typeof options !== 'object') {\n    throw new Error('Options must be an object, got \"' + options + '\"');\n  }\n\n  if (Array.isArray(options.populate)) {\n    const populate = options.populate;\n    delete options.populate;\n    const _numPopulate = populate.length;\n\n    for (let i = 0; i < _numPopulate; ++i) {\n      this.populate(populate[i]);\n    }\n  }\n\n  if ('setDefaultsOnInsert' in options) {\n    this._mongooseOptions.setDefaultsOnInsert = options.setDefaultsOnInsert;\n    delete options.setDefaultsOnInsert;\n  }\n\n  if ('overwriteDiscriminatorKey' in options) {\n    this._mongooseOptions.overwriteDiscriminatorKey = options.overwriteDiscriminatorKey;\n    delete options.overwriteDiscriminatorKey;\n  }\n\n  if ('sanitizeProjection' in options) {\n    if (options.sanitizeProjection && !this._mongooseOptions.sanitizeProjection) {\n      sanitizeProjection(this._fields);\n    }\n\n    this._mongooseOptions.sanitizeProjection = options.sanitizeProjection;\n    delete options.sanitizeProjection;\n  }\n\n  if ('sanitizeFilter' in options) {\n    this._mongooseOptions.sanitizeFilter = options.sanitizeFilter;\n    delete options.sanitizeFilter;\n  }\n\n  if ('defaults' in options) {\n    this._mongooseOptions.defaults = options.defaults; // deleting options.defaults will cause 7287 to fail\n  }\n\n  if (typeof options.limit === 'string') {\n    try {\n      options.limit = castNumber(options.limit);\n    } catch (err) {\n      throw new CastError('Number', options.limit, 'limit');\n    }\n  }\n\n  if (typeof options.skip === 'string') {\n    try {\n      options.skip = castNumber(options.skip);\n    } catch (err) {\n      throw new CastError('Number', options.skip, 'skip');\n    }\n  } // set arbitrary options\n\n\n  for (const key of Object.keys(options)) {\n    if (queryOptionMethods.has(key)) {\n      const args = Array.isArray(options[key]) ? options[key] : [options[key]];\n      this[key].apply(this, args);\n    } else {\n      this.options[key] = options[key];\n    }\n  }\n\n  return this;\n};\n/**\n * Sets the [`explain` option](https://docs.mongodb.com/manual/reference/method/cursor.explain/),\n * which makes this query return detailed execution stats instead of the actual\n * query result. This method is useful for determining what index your queries\n * use.\n *\n * Calling `query.explain(v)` is equivalent to `query.setOptions({ explain: v })`\n *\n * #### Example:\n *\n *     const query = new Query();\n *     const res = await query.find({ a: 1 }).explain('queryPlanner');\n *     console.log(res);\n *\n * @param {String} [verbose] The verbosity mode. Either 'queryPlanner', 'executionStats', or 'allPlansExecution'. The default is 'queryPlanner'\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.explain = function (verbose) {\n  if (arguments.length === 0) {\n    this.options.explain = true;\n  } else if (verbose === false) {\n    delete this.options.explain;\n  } else {\n    this.options.explain = verbose;\n  }\n\n  return this;\n};\n/**\n * Sets the [`allowDiskUse` option](https://docs.mongodb.com/manual/reference/method/cursor.allowDiskUse/),\n * which allows the MongoDB server to use more than 100 MB for this query's `sort()`. This option can\n * let you work around `QueryExceededMemoryLimitNoDiskUseAllowed` errors from the MongoDB server.\n *\n * Note that this option requires MongoDB server >= 4.4. Setting this option is a no-op for MongoDB 4.2\n * and earlier.\n *\n * Calling `query.allowDiskUse(v)` is equivalent to `query.setOptions({ allowDiskUse: v })`\n *\n * #### Example:\n *\n *     await query.find().sort({ name: 1 }).allowDiskUse(true);\n *     // Equivalent:\n *     await query.find().sort({ name: 1 }).allowDiskUse();\n *\n * @param {Boolean} [v] Enable/disable `allowDiskUse`. If called with 0 arguments, sets `allowDiskUse: true`\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.allowDiskUse = function (v) {\n  if (arguments.length === 0) {\n    this.options.allowDiskUse = true;\n  } else if (v === false) {\n    delete this.options.allowDiskUse;\n  } else {\n    this.options.allowDiskUse = v;\n  }\n\n  return this;\n};\n/**\n * Sets the [maxTimeMS](https://docs.mongodb.com/manual/reference/method/cursor.maxTimeMS/)\n * option. This will tell the MongoDB server to abort if the query or write op\n * has been running for more than `ms` milliseconds.\n *\n * Calling `query.maxTimeMS(v)` is equivalent to `query.setOptions({ maxTimeMS: v })`\n *\n * #### Example:\n *\n *     const query = new Query();\n *     // Throws an error 'operation exceeded time limit' as long as there's\n *     // >= 1 doc in the queried collection\n *     const res = await query.find({ $where: 'sleep(1000) || true' }).maxTimeMS(100);\n *\n * @param {Number} [ms] The number of milliseconds\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.maxTimeMS = function (ms) {\n  this.options.maxTimeMS = ms;\n  return this;\n};\n/**\n * Returns the current query filter (also known as conditions) as a [POJO](https://masteringjs.io/tutorials/fundamentals/pojo).\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 }).where('b').gt(2);\n *     query.getFilter(); // { a: 1, b: { $gt: 2 } }\n *\n * @return {Object} current query filter\n * @api public\n */\n\n\nQuery.prototype.getFilter = function () {\n  return this._conditions;\n};\n/**\n * Returns the current query filter. Equivalent to `getFilter()`.\n *\n * You should use `getFilter()` instead of `getQuery()` where possible. `getQuery()`\n * will likely be deprecated in a future release.\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 }).where('b').gt(2);\n *     query.getQuery(); // { a: 1, b: { $gt: 2 } }\n *\n * @return {Object} current query filter\n * @api public\n */\n\n\nQuery.prototype.getQuery = function () {\n  return this._conditions;\n};\n/**\n * Sets the query conditions to the provided JSON object.\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 })\n *     query.setQuery({ a: 2 });\n *     query.getQuery(); // { a: 2 }\n *\n * @param {Object} new query conditions\n * @return {undefined}\n * @api public\n */\n\n\nQuery.prototype.setQuery = function (val) {\n  this._conditions = val;\n};\n/**\n * Returns the current update operations as a JSON object.\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.update({}, { $set: { a: 5 } });\n *     query.getUpdate(); // { $set: { a: 5 } }\n *\n * @return {Object} current update operations\n * @api public\n */\n\n\nQuery.prototype.getUpdate = function () {\n  return this._update;\n};\n/**\n * Sets the current update operation to new value.\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.update({}, { $set: { a: 5 } });\n *     query.setUpdate({ $set: { b: 6 } });\n *     query.getUpdate(); // { $set: { b: 6 } }\n *\n * @param {Object} new update operation\n * @return {undefined}\n * @api public\n */\n\n\nQuery.prototype.setUpdate = function (val) {\n  this._update = val;\n};\n/**\n * Returns fields selection for this query.\n *\n * @method _fieldsForExec\n * @return {Object}\n * @api private\n * @receiver Query\n */\n\n\nQuery.prototype._fieldsForExec = function () {\n  return utils.clone(this._fields);\n};\n/**\n * Return an update document with corrected `$set` operations.\n *\n * @method _updateForExec\n * @api private\n * @receiver Query\n */\n\n\nQuery.prototype._updateForExec = function () {\n  const update = utils.clone(this._update, {\n    transform: false,\n    depopulate: true\n  });\n  const ops = Object.keys(update);\n  let i = ops.length;\n  const ret = {};\n\n  while (i--) {\n    const op = ops[i];\n\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n\n      ret.$set[op] = update[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n\n  return ret;\n};\n/**\n * Makes sure _path is set.\n *\n * @method _ensurePath\n * @param {String} method\n * @api private\n * @receiver Query\n */\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @method canMerge\n * @memberOf Query\n * @instance\n * @param {Object} conds\n * @return {Boolean}\n * @api private\n */\n\n/**\n * Returns default options for this query.\n *\n * @param {Model} model\n * @api private\n */\n\n\nQuery.prototype._optionsForExec = function (model) {\n  const options = utils.clone(this.options);\n  delete options.populate;\n  model = model || this.model;\n\n  if (!model) {\n    return options;\n  } // Apply schema-level `writeConcern` option\n\n\n  applyWriteConcern(model.schema, options);\n  const readPreference = model && model.schema && model.schema.options && model.schema.options.read;\n\n  if (!('readPreference' in options) && readPreference) {\n    options.readPreference = readPreference;\n  }\n\n  if (options.upsert !== void 0) {\n    options.upsert = !!options.upsert;\n  }\n\n  if (options.writeConcern) {\n    if (options.j) {\n      options.writeConcern.j = options.j;\n      delete options.j;\n    }\n\n    if (options.w) {\n      options.writeConcern.w = options.w;\n      delete options.w;\n    }\n\n    if (options.wtimeout) {\n      options.writeConcern.wtimeout = options.wtimeout;\n      delete options.wtimeout;\n    }\n  }\n\n  return options;\n};\n/**\n * Sets the lean option.\n *\n * Documents returned from queries with the `lean` option enabled are plain\n * javascript objects, not [Mongoose Documents](/api/document.html). They have no\n * `save` method, getters/setters, virtuals, or other Mongoose features.\n *\n * #### Example:\n *\n *     new Query().lean() // true\n *     new Query().lean(true)\n *     new Query().lean(false)\n *\n *     const docs = await Model.find().lean();\n *     docs[0] instanceof mongoose.Document; // false\n *\n * [Lean is great for high-performance, read-only cases](/docs/tutorials/lean.html),\n * especially when combined\n * with [cursors](/docs/queries.html#streaming).\n *\n * If you need virtuals, getters/setters, or defaults with `lean()`, you need\n * to use a plugin. See:\n *\n * - [mongoose-lean-virtuals](https://plugins.mongoosejs.io/plugins/lean-virtuals)\n * - [mongoose-lean-getters](https://plugins.mongoosejs.io/plugins/lean-getters)\n * - [mongoose-lean-defaults](https://www.npmjs.com/package/mongoose-lean-defaults)\n *\n * @param {Boolean|Object} bool defaults to true\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.lean = function (v) {\n  this._mongooseOptions.lean = arguments.length ? v : true;\n  return this;\n};\n/**\n * Adds a `$set` to this query's update without changing the operation.\n * This is useful for query middleware so you can add an update regardless\n * of whether you use `updateOne()`, `updateMany()`, `findOneAndUpdate()`, etc.\n *\n * #### Example:\n *\n *     // Updates `{ $set: { updatedAt: new Date() } }`\n *     new Query().updateOne({}, {}).set('updatedAt', new Date());\n *     new Query().updateMany({}, {}).set({ updatedAt: new Date() });\n *\n * @param {String|Object} path path or object of key/value pairs to set\n * @param {Any} [val] the value to set\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.set = function (path, val) {\n  if (typeof path === 'object') {\n    const keys = Object.keys(path);\n\n    for (const key of keys) {\n      this.set(key, path[key]);\n    }\n\n    return this;\n  }\n\n  this._update = this._update || {};\n  this._update.$set = this._update.$set || {};\n  this._update.$set[path] = val;\n  return this;\n};\n/**\n * For update operations, returns the value of a path in the update's `$set`.\n * Useful for writing getters/setters that can work with both update operations\n * and `save()`.\n *\n * #### Example:\n *\n *     const query = Model.updateOne({}, { $set: { name: 'Jean-Luc Picard' } });\n *     query.get('name'); // 'Jean-Luc Picard'\n *\n * @param {String|Object} path path or object of key/value pairs to get\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.get = function get(path) {\n  const update = this._update;\n\n  if (update == null) {\n    return void 0;\n  }\n\n  const $set = update.$set;\n\n  if ($set == null) {\n    return update[path];\n  }\n\n  if (utils.hasUserDefinedProperty(update, path)) {\n    return update[path];\n  }\n\n  if (utils.hasUserDefinedProperty($set, path)) {\n    return $set[path];\n  }\n\n  return void 0;\n};\n/**\n * Gets/sets the error flag on this query. If this flag is not null or\n * undefined, the `exec()` promise will reject without executing.\n *\n * #### Example:\n *\n *     Query().error(); // Get current error value\n *     Query().error(null); // Unset the current error\n *     Query().error(new Error('test')); // `exec()` will resolve with test\n *     Schema.pre('find', function() {\n *       if (!this.getQuery().userId) {\n *         this.error(new Error('Not allowed to query without setting userId'));\n *       }\n *     });\n *\n * Note that query casting runs **after** hooks, so cast errors will override\n * custom errors.\n *\n * #### Example:\n *     const TestSchema = new Schema({ num: Number });\n *     const TestModel = db.model('Test', TestSchema);\n *     TestModel.find({ num: 'not a number' }).error(new Error('woops')).exec(function(error) {\n *       // `error` will be a cast error because `num` failed to cast\n *     });\n *\n * @param {Error|null} err if set, `exec()` will fail fast before sending the query to MongoDB\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.error = function error(err) {\n  if (arguments.length === 0) {\n    return this._error;\n  }\n\n  this._error = err;\n  return this;\n};\n/*!\n * ignore\n */\n\n\nQuery.prototype._unsetCastError = function _unsetCastError() {\n  if (this._error != null && !(this._error instanceof CastError)) {\n    return;\n  }\n\n  return this.error(null);\n};\n/**\n * Getter/setter around the current mongoose-specific options for this query\n * Below are the current Mongoose-specific options.\n *\n * - `populate`: an array representing what paths will be populated. Should have one entry for each call to [`Query.prototype.populate()`](/docs/api.html#query_Query-populate)\n * - `lean`: if truthy, Mongoose will not [hydrate](/docs/api.html#model_Model.hydrate) any documents that are returned from this query. See [`Query.prototype.lean()`](/docs/api.html#query_Query-lean) for more information.\n * - `strict`: controls how Mongoose handles keys that aren't in the schema for updates. This option is `true` by default, which means Mongoose will silently strip any paths in the update that aren't in the schema. See the [`strict` mode docs](/docs/guide.html#strict) for more information.\n * - `strictQuery`: controls how Mongoose handles keys that aren't in the schema for the query `filter`. This option is `false` by default for backwards compatibility, which means Mongoose will allow `Model.find({ foo: 'bar' })` even if `foo` is not in the schema. See the [`strictQuery` docs](/docs/guide.html#strictQuery) for more information.\n * - `nearSphere`: use `$nearSphere` instead of `near()`. See the [`Query.prototype.nearSphere()` docs](/docs/api.html#query_Query-nearSphere)\n *\n * Mongoose maintains a separate object for internal options because\n * Mongoose sends `Query.prototype.options` to the MongoDB server, and the\n * above options are not relevant for the MongoDB server.\n *\n * @param {Object} options if specified, overwrites the current options\n * @return {Object} the options\n * @api public\n */\n\n\nQuery.prototype.mongooseOptions = function (v) {\n  if (arguments.length > 0) {\n    this._mongooseOptions = v;\n  }\n\n  return this._mongooseOptions;\n};\n/*!\n * ignore\n */\n\n\nQuery.prototype._castConditions = function () {\n  let sanitizeFilterOpt = undefined;\n\n  if (this.model != null && utils.hasUserDefinedProperty(this.model.db.options, 'sanitizeFilter')) {\n    sanitizeFilterOpt = this.model.db.options.sanitizeFilter;\n  } else if (this.model != null && utils.hasUserDefinedProperty(this.model.base.options, 'sanitizeFilter')) {\n    sanitizeFilterOpt = this.model.base.options.sanitizeFilter;\n  } else {\n    sanitizeFilterOpt = this._mongooseOptions.sanitizeFilter;\n  }\n\n  if (sanitizeFilterOpt) {\n    sanitizeFilter(this._conditions);\n  }\n\n  try {\n    this.cast(this.model);\n\n    this._unsetCastError();\n  } catch (err) {\n    this.error(err);\n  }\n};\n/*!\n * ignore\n */\n\n\nfunction _castArrayFilters(query) {\n  try {\n    castArrayFilters(query);\n  } catch (err) {\n    query.error(err);\n  }\n}\n/**\n * Thunk around find()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\n\n\nQuery.prototype._find = wrapThunk(function (callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n\n  this._applyPaths();\n\n  this._fields = this._castFields(this._fields);\n\n  const fields = this._fieldsForExec();\n\n  const mongooseOptions = this._mongooseOptions;\n\n  const _this = this;\n\n  const userProvidedFields = _this._userProvidedFields || {};\n  applyGlobalMaxTimeMS(this.options, this.model);\n  applyGlobalDiskUse(this.options, this.model); // Separate options to pass down to `completeMany()` in case we need to\n  // set a session on the document\n\n  const completeManyOptions = Object.assign({}, {\n    session: this && this.options && this.options.session || null\n  });\n\n  const cb = (err, docs) => {\n    if (err) {\n      return callback(err);\n    }\n\n    if (docs.length === 0) {\n      return callback(null, docs);\n    }\n\n    if (this.options.explain) {\n      return callback(null, docs);\n    }\n\n    if (!mongooseOptions.populate) {\n      const versionKey = _this.schema.options.versionKey;\n\n      if (mongooseOptions.lean && mongooseOptions.lean.versionKey === false && versionKey) {\n        docs.forEach(doc => {\n          if (versionKey in doc) {\n            delete doc[versionKey];\n          }\n        });\n      }\n\n      return mongooseOptions.lean ? callback(null, docs) : completeMany(_this.model, docs, fields, userProvidedFields, completeManyOptions, callback);\n    }\n\n    const pop = helpers.preparePopulationOptionsMQ(_this, mongooseOptions);\n\n    if (mongooseOptions.lean) {\n      return _this.model.populate(docs, pop, callback);\n    }\n\n    completeMany(_this.model, docs, fields, userProvidedFields, completeManyOptions, (err, docs) => {\n      if (err != null) {\n        return callback(err);\n      }\n\n      _this.model.populate(docs, pop, callback);\n    });\n  };\n\n  const options = this._optionsForExec();\n\n  options.projection = this._fieldsForExec();\n  const filter = this._conditions;\n\n  this._collection.collection.find(filter, options, (err, cursor) => {\n    if (err != null) {\n      return cb(err);\n    }\n\n    if (options.explain) {\n      return cursor.explain(cb);\n    }\n\n    try {\n      return cursor.toArray(cb);\n    } catch (err) {\n      return cb(err);\n    }\n  });\n});\n/**\n * Find all documents that match `selector`. The result will be an array of documents.\n *\n * If there are too many documents in the result to fit in memory, use\n * [`Query.prototype.cursor()`](api.html#query_Query-cursor)\n *\n * #### Example\n *\n *     // Using async/await\n *     const arr = await Movie.find({ year: { $gte: 1980, $lte: 1989 } });\n *\n *     // Using callbacks\n *     Movie.find({ year: { $gte: 1980, $lte: 1989 } }, function(err, arr) {});\n *\n * @param {Object|ObjectId} [filter] mongodb selector. If not specified, returns all documents.\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function (conditions, callback) {\n  this.op = 'find';\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'find'));\n  } // if we don't have a callback, then just return the query object\n\n\n  if (!callback) {\n    return Query.base.find.call(this);\n  }\n\n  this.exec(callback);\n  return this;\n};\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\n\nQuery.prototype.merge = function (source) {\n  if (!source) {\n    return this;\n  }\n\n  const opts = {\n    overwrite: true\n  };\n\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions, opts);\n    }\n\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields, opts);\n    }\n\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options, opts);\n    }\n\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n\n    utils.merge(this._mongooseOptions, source._mongooseOptions);\n    return this;\n  } // plain object\n\n\n  utils.merge(this._conditions, source, opts);\n  return this;\n};\n/**\n * Adds a collation to this op (MongoDB 3.4 and up)\n *\n * @param {Object} value\n * @return {Query} this\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\n * @api public\n */\n\n\nQuery.prototype.collation = function (value) {\n  if (this.options == null) {\n    this.options = {};\n  }\n\n  this.options.collation = value;\n  return this;\n};\n/**\n * Hydrate a single doc from `findOne()`, `findOneAndUpdate()`, etc.\n *\n * @api private\n */\n\n\nQuery.prototype._completeOne = function (doc, res, callback) {\n  if (!doc && !this.options.rawResult) {\n    return callback(null, null);\n  }\n\n  const model = this.model;\n  const projection = utils.clone(this._fields);\n  const userProvidedFields = this._userProvidedFields || {}; // `populate`, `lean`\n\n  const mongooseOptions = this._mongooseOptions; // `rawResult`\n\n  const options = this.options;\n\n  if (options.explain) {\n    return callback(null, doc);\n  }\n\n  if (!mongooseOptions.populate) {\n    const versionKey = this.schema.options.versionKey;\n\n    if (mongooseOptions.lean && mongooseOptions.lean.versionKey === false && versionKey) {\n      if (versionKey in doc) {\n        delete doc[versionKey];\n      }\n    }\n\n    return mongooseOptions.lean ? _completeOneLean(doc, res, options, callback) : completeOne(model, doc, res, options, projection, userProvidedFields, null, callback);\n  }\n\n  const pop = helpers.preparePopulationOptionsMQ(this, this._mongooseOptions);\n\n  if (mongooseOptions.lean) {\n    return model.populate(doc, pop, (err, doc) => {\n      if (err != null) {\n        return callback(err);\n      }\n\n      _completeOneLean(doc, res, options, callback);\n    });\n  }\n\n  completeOne(model, doc, res, options, projection, userProvidedFields, [], (err, doc) => {\n    if (err != null) {\n      return callback(err);\n    }\n\n    model.populate(doc, pop, callback);\n  });\n};\n/**\n * Thunk around findOne()\n *\n * @param {Function} [callback]\n * @see findOne https://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @api private\n */\n\n\nQuery.prototype._findOne = wrapThunk(function (callback) {\n  this._castConditions();\n\n  if (this.error()) {\n    callback(this.error());\n    return null;\n  }\n\n  this._applyPaths();\n\n  this._fields = this._castFields(this._fields);\n  applyGlobalMaxTimeMS(this.options, this.model);\n  applyGlobalDiskUse(this.options, this.model); // don't pass in the conditions because we already merged them in\n\n  Query.base.findOne.call(this, {}, (err, doc) => {\n    if (err) {\n      callback(err);\n      return null;\n    }\n\n    this._completeOne(doc, null, _wrapThunkCallback(this, callback));\n  });\n});\n/**\n * Declares the query a findOne operation. When executed, the first found document is passed to the callback.\n *\n * Passing a `callback` executes the query. The result of the query is a single document.\n *\n * * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\n * mongoose will send an empty `findOne` command to MongoDB, which will return\n * an arbitrary document. If you're querying by `_id`, use `Model.findById()`\n * instead.\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * #### Example\n *\n *     const query  = Kitten.where({ color: 'white' });\n *     query.findOne(function (err, kitten) {\n *       if (err) return handleError(err);\n *       if (kitten) {\n *         // doc may be null if no document matched\n *       }\n *     });\n *\n * @param {Object} [filter] mongodb selector\n * @param {Object} [projection] optional fields to return\n * @param {Object} [options] see [`setOptions()`](https://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see findOne https://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @see Query.select #query_Query-select\n * @api public\n */\n\nQuery.prototype.findOne = function (conditions, projection, options, callback) {\n  this.op = 'findOne';\n\n  this._validateOp();\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = null;\n    projection = null;\n    options = null;\n  } else if (typeof projection === 'function') {\n    callback = projection;\n    options = null;\n    projection = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  } // make sure we don't send in the whole Document to merge()\n\n\n  conditions = utils.toObject(conditions);\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (projection) {\n    this.select(projection);\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'findOne'));\n  }\n\n  if (!callback) {\n    // already merged in the conditions, don't need to send them in.\n    return Query.base.findOne.call(this);\n  }\n\n  this.exec(callback);\n  return this;\n};\n/**\n * Thunk around count()\n *\n * @param {Function} [callback]\n * @see count https://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api private\n */\n\n\nQuery.prototype._count = wrapThunk(function (callback) {\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    this.error(err);\n  }\n\n  if (this.error()) {\n    return callback(this.error());\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n  applyGlobalDiskUse(this.options, this.model);\n  const conds = this._conditions;\n\n  const options = this._optionsForExec();\n\n  this._collection.count(conds, options, utils.tick(callback));\n});\n/**\n * Thunk around countDocuments()\n *\n * @param {Function} [callback]\n * @see countDocuments https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n * @api private\n */\n\nQuery.prototype._countDocuments = wrapThunk(function (callback) {\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    this.error(err);\n  }\n\n  if (this.error()) {\n    return callback(this.error());\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n  applyGlobalDiskUse(this.options, this.model);\n  const conds = this._conditions;\n\n  const options = this._optionsForExec();\n\n  this._collection.collection.countDocuments(conds, options, utils.tick(callback));\n});\n/**\n * Thunk around estimatedDocumentCount()\n *\n * @param {Function} [callback]\n * @see estimatedDocumentCount https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount\n * @api private\n */\n\nQuery.prototype._estimatedDocumentCount = wrapThunk(function (callback) {\n  if (this.error()) {\n    return callback(this.error());\n  }\n\n  const options = this._optionsForExec();\n\n  this._collection.collection.estimatedDocumentCount(options, utils.tick(callback));\n});\n/**\n * Specifies this query as a `count` query.\n *\n * This method is deprecated. If you want to count the number of documents in\n * a collection, e.g. `count({})`, use the [`estimatedDocumentCount()` function](/docs/api.html#query_Query-estimatedDocumentCount)\n * instead. Otherwise, use the [`countDocuments()`](/docs/api.html#query_Query-countDocuments) function instead.\n *\n * Passing a `callback` executes the query.\n *\n * This function triggers the following middleware.\n *\n * - `count()`\n *\n * #### Example:\n *\n *     const countQuery = model.where({ 'color': 'black' }).count();\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @deprecated\n * @param {Object} [filter] count documents that match this object\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see count https://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api public\n */\n\nQuery.prototype.count = function (filter, callback) {\n  this.op = 'count';\n\n  this._validateOp();\n\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = undefined;\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n  return this;\n};\n/**\n * Specifies this query as a `estimatedDocumentCount()` query. Faster than\n * using `countDocuments()` for large collections because\n * `estimatedDocumentCount()` uses collection metadata rather than scanning\n * the entire collection.\n *\n * `estimatedDocumentCount()` does **not** accept a filter. `Model.find({ foo: bar }).estimatedDocumentCount()`\n * is equivalent to `Model.find().estimatedDocumentCount()`\n *\n * This function triggers the following middleware.\n *\n * - `estimatedDocumentCount()`\n *\n * #### Example:\n *\n *     await Model.find().estimatedDocumentCount();\n *\n * @param {Object} [options] passed transparently to the [MongoDB driver](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount)\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see estimatedDocumentCount https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount\n * @api public\n */\n\n\nQuery.prototype.estimatedDocumentCount = function (options, callback) {\n  this.op = 'estimatedDocumentCount';\n\n  this._validateOp();\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  if (typeof options === 'object' && options != null) {\n    this.setOptions(options);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n  return this;\n};\n/**\n * Specifies this query as a `countDocuments()` query. Behaves like `count()`,\n * except it always does a full collection scan when passed an empty filter `{}`.\n *\n * There are also minor differences in how `countDocuments()` handles\n * [`$where` and a couple geospatial operators](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments).\n * versus `count()`.\n *\n * Passing a `callback` executes the query.\n *\n * This function triggers the following middleware.\n *\n * - `countDocuments()`\n *\n * #### Example:\n *\n *     const countQuery = model.where({ 'color': 'black' }).countDocuments();\n *\n *     query.countDocuments({ color: 'black' }).count(callback);\n *\n *     query.countDocuments({ color: 'black' }, callback);\n *\n *     query.where('color', 'black').countDocuments(function(err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     });\n *\n * The `countDocuments()` function is similar to `count()`, but there are a\n * [few operators that `countDocuments()` does not support](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments).\n * Below are the operators that `count()` supports but `countDocuments()` does not,\n * and the suggested replacement:\n *\n * - `$where`: [`$expr`](https://docs.mongodb.com/manual/reference/operator/query/expr/)\n * - `$near`: [`$geoWithin`](https://docs.mongodb.com/manual/reference/operator/query/geoWithin/) with [`$center`](https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center)\n * - `$nearSphere`: [`$geoWithin`](https://docs.mongodb.com/manual/reference/operator/query/geoWithin/) with [`$centerSphere`](https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere)\n *\n * @param {Object} [filter] mongodb selector\n * @param {Object} [options]\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see countDocuments https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n * @api public\n */\n\n\nQuery.prototype.countDocuments = function (conditions, options, callback) {\n  this.op = 'countDocuments';\n\n  this._validateOp();\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = undefined;\n    options = undefined;\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  if (typeof options === 'object' && options != null) {\n    this.setOptions(options);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n  return this;\n};\n/**\n * Thunk around distinct()\n *\n * @param {Function} [callback]\n * @see distinct https://docs.mongodb.org/manual/reference/method/db.collection.distinct/\n * @api private\n */\n\n\nQuery.prototype.__distinct = wrapThunk(function __distinct(callback) {\n  this._castConditions();\n\n  if (this.error()) {\n    callback(this.error());\n    return null;\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n  applyGlobalDiskUse(this.options, this.model);\n\n  const options = this._optionsForExec(); // don't pass in the conditions because we already merged them in\n\n\n  this._collection.collection.distinct(this._distinct, this._conditions, options, callback);\n});\n/**\n * Declares or executes a distinct() operation.\n *\n * Passing a `callback` executes the query.\n *\n * This function does not trigger any middleware.\n *\n * #### Example\n *\n *     distinct(field, conditions, callback)\n *     distinct(field, conditions)\n *     distinct(field, callback)\n *     distinct(field)\n *     distinct(callback)\n *     distinct()\n *\n * @param {String} [field]\n * @param {Object|Query} [filter]\n * @param {Function} [callback] optional params are (error, arr)\n * @return {Query} this\n * @see distinct https://docs.mongodb.org/manual/reference/method/db.collection.distinct/\n * @api public\n */\n\nQuery.prototype.distinct = function (field, conditions, callback) {\n  this.op = 'distinct';\n\n  this._validateOp();\n\n  if (!callback) {\n    if (typeof conditions === 'function') {\n      callback = conditions;\n      conditions = undefined;\n    } else if (typeof field === 'function') {\n      callback = field;\n      field = undefined;\n      conditions = undefined;\n    }\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'distinct'));\n  }\n\n  if (field != null) {\n    this._distinct = field;\n  }\n\n  if (callback != null) {\n    this.exec(callback);\n  }\n\n  return this;\n};\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The\n * sort order of each path is ascending unless the path name is prefixed with `-`\n * which will be treated as descending.\n *\n * #### Example\n *\n *     // sort by \"field\" ascending and \"test\" descending\n *     query.sort({ field: 'asc', test: -1 });\n *\n *     // equivalent\n *     query.sort('field -test');\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see cursor.sort https://docs.mongodb.org/manual/reference/method/cursor.sort/\n * @api public\n */\n\n\nQuery.prototype.sort = function (arg) {\n  if (arguments.length > 1) {\n    throw new Error('sort() only takes 1 Argument');\n  }\n\n  return Query.base.sort.call(this, arg);\n};\n/**\n * Declare and/or execute this query as a remove() operation. `remove()` is\n * deprecated, you should use [`deleteOne()`](#query_Query-deleteOne)\n * or [`deleteMany()`](#query_Query-deleteMany) instead.\n *\n * This function does not trigger any middleware\n *\n * #### Example\n *\n *     Character.remove({ name: /Stark/ }, callback);\n *\n * This function calls the MongoDB driver's [`Collection#remove()` function](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#remove).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * #### Example\n *\n *     const res = await Character.remove({ name: /Stark/ });\n *     // Number of docs deleted\n *     res.deletedCount;\n *\n * #### Note\n *\n * Calling `remove()` creates a [Mongoose query](./queries.html), and a query\n * does not execute until you either pass a callback, call [`Query#then()`](#query_Query-then),\n * or call [`Query#exec()`](#query_Query-exec).\n *\n *     // not executed\n *     const query = Character.remove({ name: /Stark/ });\n *\n *     // executed\n *     Character.remove({ name: /Stark/ }, callback);\n *     Character.remove({ name: /Stark/ }).remove(callback);\n *\n *     // executed without a callback\n *     Character.exec();\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\n * @return {Query} this\n * @deprecated\n * @see deleteWriteOpResult https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\n * @see MongoDB driver remove https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#remove\n * @api public\n */\n\n\nQuery.prototype.remove = function (filter, callback) {\n  this.op = 'remove';\n\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'remove'));\n  }\n\n  if (!callback) {\n    return Query.base.remove.call(this);\n  }\n\n  this.exec(callback);\n  return this;\n};\n/*!\n * ignore\n */\n\n\nQuery.prototype._remove = wrapThunk(function (callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n  return Query.base.remove.call(this, callback);\n});\n/**\n * Declare and/or execute this query as a `deleteOne()` operation. Works like\n * remove, except it deletes at most one document regardless of the `single`\n * option.\n *\n * This function triggers `deleteOne` middleware.\n *\n * #### Example\n *\n *     await Character.deleteOne({ name: 'Eddard Stark' });\n *\n *     // Using callbacks:\n *     Character.deleteOne({ name: 'Eddard Stark' }, callback);\n *\n * This function calls the MongoDB driver's [`Collection#deleteOne()` function](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteOne).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * #### Example\n *\n *     const res = await Character.deleteOne({ name: 'Eddard Stark' });\n *     // `1` if MongoDB deleted a doc, `0` if no docs matched the filter `{ name: ... }`\n *     res.deletedCount;\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\n * @return {Query} this\n * @see deleteWriteOpResult https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\n * @see MongoDB Driver deleteOne https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteOne\n * @api public\n */\n\nQuery.prototype.deleteOne = function (filter, options, callback) {\n  this.op = 'deleteOne';\n\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  } else {\n    this.setOptions(options);\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteOne'));\n  }\n\n  if (!callback) {\n    return Query.base.deleteOne.call(this);\n  }\n\n  this.exec.call(this, callback);\n  return this;\n};\n/*!\n * Internal thunk for `deleteOne()`\n */\n\n\nQuery.prototype._deleteOne = wrapThunk(function (callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n  return Query.base.deleteOne.call(this, callback);\n});\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Works like\n * remove, except it deletes _every_ document that matches `filter` in the\n * collection, regardless of the value of `single`.\n *\n * This function triggers `deleteMany` middleware.\n *\n * #### Example\n *\n *     await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });\n *\n *     // Using callbacks:\n *     Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }, callback);\n *\n * This function calls the MongoDB driver's [`Collection#deleteMany()` function](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteMany).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * #### Example\n *\n *     const res = await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });\n *     // `0` if no docs matched the filter, number of docs deleted otherwise\n *     res.deletedCount;\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\n * @return {Query} this\n * @see deleteWriteOpResult https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\n * @see MongoDB Driver deleteMany https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteMany\n * @api public\n */\n\nQuery.prototype.deleteMany = function (filter, options, callback) {\n  this.op = 'deleteMany';\n\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  } else {\n    this.setOptions(options);\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteMany'));\n  }\n\n  if (!callback) {\n    return Query.base.deleteMany.call(this);\n  }\n\n  this.exec.call(this, callback);\n  return this;\n};\n/*!\n * Internal thunk around `deleteMany()`\n */\n\n\nQuery.prototype._deleteMany = wrapThunk(function (callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n  return Query.base.deleteMany.call(this, callback);\n});\n/*!\n * hydrates a document\n *\n * @param {Model} model\n * @param {Document} doc\n * @param {Object} res 3rd parameter to callback\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Function} callback\n */\n\nfunction completeOne(model, doc, res, options, fields, userProvidedFields, pop, callback) {\n  if (options.rawResult && doc == null) {\n    _init(null);\n\n    return null;\n  }\n\n  helpers.createModelAndInit(model, doc, fields, userProvidedFields, options, pop, _init);\n\n  function _init(err, casted) {\n    if (err) {\n      return immediate(() => callback(err));\n    }\n\n    if (options.rawResult) {\n      if (doc && casted) {\n        if (options.session != null) {\n          casted.$session(options.session);\n        }\n\n        res.value = casted;\n      } else {\n        res.value = null;\n      }\n\n      return immediate(() => callback(null, res));\n    }\n\n    if (options.session != null) {\n      casted.$session(options.session);\n    }\n\n    immediate(() => callback(null, casted));\n  }\n}\n/*!\n * If the model is a discriminator type and not root, then add the key & value to the criteria.\n */\n\n\nfunction prepareDiscriminatorCriteria(query) {\n  if (!query || !query.model || !query.model.schema) {\n    return;\n  }\n\n  const schema = query.model.schema;\n\n  if (schema && schema.discriminatorMapping && !schema.discriminatorMapping.isRoot) {\n    query._conditions[schema.discriminatorMapping.key] = schema.discriminatorMapping.value;\n  }\n}\n/**\n * Issues a mongodb [findAndModify](https://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found\n * document (if any) to the callback. The query executes if\n * `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndUpdate()`\n *\n * #### Available options\n *\n * - `new`: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `fields`: {Object|String} - Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n * - `setDefaultsOnInsert`: `true` by default. If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created.\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n *\n * #### Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * #### Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @method findOneAndUpdate\n * @memberOf Query\n * @instance\n * @param {Object|Query} [filter]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean} [options.new=false] By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.returnOriginal=null] An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.\n * @param {Function} [callback] optional params are (error, doc), _unless_ `rawResult` is used, in which case params are (error, writeOpResult)\n * @see Tutorial /docs/tutorials/findoneandupdate.html\n * @see mongodb https://www.mongodb.org/display/DOCS/findAndModify+Command\n * @see writeOpResult https://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.findOneAndUpdate = function (criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n\n  this._validateOp();\n\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      break;\n\n    case 2:\n      if (typeof doc === 'function') {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n\n      options = undefined;\n      break;\n\n    case 1:\n      if (typeof criteria === 'function') {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n\n  }\n\n  if (mquery.canMerge(criteria)) {\n    this.merge(criteria);\n  } // apply doc\n\n\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  options = options ? utils.clone(options) : {};\n\n  if (options.projection) {\n    this.select(options.projection);\n    delete options.projection;\n  }\n\n  if (options.fields) {\n    this.select(options.fields);\n    delete options.fields;\n  }\n\n  const returnOriginal = this && this.model && this.model.base && this.model.base.options && this.model.base.options.returnOriginal;\n\n  if (options.new == null && options.returnDocument == null && options.returnOriginal == null && returnOriginal != null) {\n    options.returnOriginal = returnOriginal;\n  }\n\n  this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n  return this;\n};\n/*!\n * Thunk around findOneAndUpdate()\n *\n * @param {Function} [callback]\n * @api private\n */\n\n\nQuery.prototype._findOneAndUpdate = wrapThunk(function (callback) {\n  if (this.error() != null) {\n    return callback(this.error());\n  }\n\n  this._findAndModify('update', callback);\n});\n/**\n * Issues a mongodb [findAndModify](https://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to\n * the callback. Executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndRemove()`\n *\n * #### Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n *\n * #### Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * #### Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *\n * @method findOneAndRemove\n * @memberOf Query\n * @instance\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see mongodb https://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = function (conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n\n  this._validateOp();\n\n  this._validate();\n\n  switch (arguments.length) {\n    case 2:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      break;\n\n    case 1:\n      if (typeof conditions === 'function') {\n        callback = conditions;\n        conditions = undefined;\n        options = undefined;\n      }\n\n      break;\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n  return this;\n};\n/**\n * Issues a MongoDB [findOneAndDelete](https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndDelete/) command.\n *\n * Finds a matching document, removes it, and passes the found document (if any)\n * to the callback. Executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * This function differs slightly from `Model.findOneAndRemove()` in that\n * `findOneAndRemove()` becomes a [MongoDB `findAndModify()` command](https://docs.mongodb.com/manual/reference/method/db.collection.findAndModify/),\n * as opposed to a `findOneAndDelete()` command. For most mongoose use cases,\n * this distinction is purely pedantic. You should use `findOneAndDelete()`\n * unless you have a good reason not to.\n *\n * #### Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n *\n * #### Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * #### Examples\n *\n *     A.where().findOneAndDelete(conditions, options, callback) // executes\n *     A.where().findOneAndDelete(conditions, options)  // return Query\n *     A.where().findOneAndDelete(conditions, callback) // executes\n *     A.where().findOneAndDelete(conditions) // returns Query\n *     A.where().findOneAndDelete(callback)   // executes\n *     A.where().findOneAndDelete()           // returns Query\n *\n * @method findOneAndDelete\n * @memberOf Query\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see mongodb https://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\n\nQuery.prototype.findOneAndDelete = function (conditions, options, callback) {\n  this.op = 'findOneAndDelete';\n\n  this._validateOp();\n\n  this._validate();\n\n  switch (arguments.length) {\n    case 2:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      break;\n\n    case 1:\n      if (typeof conditions === 'function') {\n        callback = conditions;\n        conditions = undefined;\n        options = undefined;\n      }\n\n      break;\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n  return this;\n};\n/*!\n * Thunk around findOneAndDelete()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\n\n\nQuery.prototype._findOneAndDelete = wrapThunk(function (callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  const filter = this._conditions;\n\n  const options = this._optionsForExec();\n\n  let fields = null;\n\n  if (this._fields != null) {\n    options.projection = this._castFields(utils.clone(this._fields));\n    fields = options.projection;\n\n    if (fields instanceof Error) {\n      callback(fields);\n      return null;\n    }\n  }\n\n  this._collection.collection.findOneAndDelete(filter, options, _wrapThunkCallback(this, (err, res) => {\n    if (err) {\n      return callback(err);\n    }\n\n    const doc = res.value;\n    return this._completeOne(doc, res, callback);\n  }));\n});\n/**\n * Issues a MongoDB [findOneAndReplace](https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndReplace/) command.\n *\n * Finds a matching document, removes it, and passes the found document (if any)\n * to the callback. Executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndReplace()`\n *\n * #### Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n *\n * #### Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * #### Examples\n *\n *     A.where().findOneAndReplace(filter, replacement, options, callback); // executes\n *     A.where().findOneAndReplace(filter, replacement, options); // return Query\n *     A.where().findOneAndReplace(filter, replacement, callback); // executes\n *     A.where().findOneAndReplace(filter); // returns Query\n *     A.where().findOneAndReplace(callback); // executes\n *     A.where().findOneAndReplace(); // returns Query\n *\n * @method findOneAndReplace\n * @memberOf Query\n * @param {Object} [filter]\n * @param {Object} [replacement]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.new=false] By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.returnOriginal=null] An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndReplace = function (filter, replacement, options, callback) {\n  this.op = 'findOneAndReplace';\n\n  this._validateOp();\n\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if (typeof options === 'function') {\n        callback = options;\n        options = void 0;\n      }\n\n      break;\n\n    case 2:\n      if (typeof replacement === 'function') {\n        callback = replacement;\n        replacement = void 0;\n      }\n\n      break;\n\n    case 1:\n      if (typeof filter === 'function') {\n        callback = filter;\n        filter = void 0;\n        replacement = void 0;\n        options = void 0;\n      }\n\n      break;\n  }\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n  }\n\n  if (replacement != null) {\n    if (hasDollarKeys(replacement)) {\n      throw new Error('The replacement document must not contain atomic operators.');\n    }\n\n    this._mergeUpdate(replacement);\n  }\n\n  options = options || {};\n  const returnOriginal = this && this.model && this.model.base && this.model.base.options && this.model.base.options.returnOriginal;\n\n  if (options.new == null && options.returnDocument == null && options.returnOriginal == null && returnOriginal != null) {\n    options.returnOriginal = returnOriginal;\n  }\n\n  this.setOptions(options);\n  this.setOptions({\n    overwrite: true\n  });\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n  return this;\n};\n/*!\n * Thunk around findOneAndReplace()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\n\n\nQuery.prototype._findOneAndReplace = wrapThunk(function (callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  const filter = this._conditions;\n\n  const options = this._optionsForExec();\n\n  convertNewToReturnDocument(options);\n  let fields = null;\n\n  this._applyPaths();\n\n  if (this._fields != null) {\n    options.projection = this._castFields(utils.clone(this._fields));\n    fields = options.projection;\n\n    if (fields instanceof Error) {\n      callback(fields);\n      return null;\n    }\n  }\n\n  const runValidators = _getOption(this, 'runValidators', false);\n\n  if (runValidators === false) {\n    try {\n      this._update = this._castUpdate(this._update, true);\n    } catch (err) {\n      const validationError = new ValidationError();\n      validationError.errors[err.path] = err;\n      callback(validationError);\n      return null;\n    }\n\n    this._collection.collection.findOneAndReplace(filter, this._update || {}, options, _wrapThunkCallback(this, (err, res) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const doc = res.value;\n      return this._completeOne(doc, res, callback);\n    }));\n\n    return;\n  }\n\n  let castedDoc = new this.model(this._update, null, true);\n  this._update = castedDoc;\n  castedDoc.validate(err => {\n    if (err != null) {\n      return callback(err);\n    }\n\n    if (castedDoc.toBSON) {\n      castedDoc = castedDoc.toBSON();\n    }\n\n    this._collection.collection.findOneAndReplace(filter, castedDoc, options, _wrapThunkCallback(this, (err, res) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const doc = res.value;\n      return this._completeOne(doc, res, callback);\n    }));\n  });\n});\n/*!\n * Support the `new` option as an alternative to `returnOriginal` for backwards\n * compat.\n */\n\nfunction convertNewToReturnDocument(options) {\n  if ('new' in options) {\n    options.returnDocument = options['new'] ? 'after' : 'before';\n    delete options['new'];\n  }\n\n  if ('returnOriginal' in options) {\n    options.returnDocument = options['returnOriginal'] ? 'before' : 'after';\n    delete options['returnOriginal'];\n  } // Temporary since driver 4.0.0-beta does not support `returnDocument`\n\n\n  if (typeof options.returnDocument === 'string') {\n    options.returnOriginal = options.returnDocument === 'before';\n  }\n}\n/*!\n * Thunk around findOneAndRemove()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\n\n\nQuery.prototype._findOneAndRemove = wrapThunk(function (callback) {\n  if (this.error() != null) {\n    callback(this.error());\n    return;\n  }\n\n  this._findAndModify('remove', callback);\n});\n/*!\n * Get options from query opts, falling back to the base mongoose object.\n */\n\nfunction _getOption(query, option, def) {\n  const opts = query._optionsForExec(query.model);\n\n  if (option in opts) {\n    return opts[option];\n  }\n\n  if (option in query.model.base.options) {\n    return query.model.base.options[option];\n  }\n\n  return def;\n}\n/*!\n * Override mquery.prototype._findAndModify to provide casting etc.\n *\n * @param {String} type - either \"remove\" or \"update\"\n * @param {Function} callback\n * @api private\n */\n\n\nQuery.prototype._findAndModify = function (type, callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('Expected callback in _findAndModify');\n  }\n\n  const model = this.model;\n  const schema = model.schema;\n\n  const _this = this;\n\n  let fields;\n  const castedQuery = castQuery(this);\n\n  if (castedQuery instanceof Error) {\n    return callback(castedQuery);\n  }\n\n  _castArrayFilters(this);\n\n  const opts = this._optionsForExec(model);\n\n  if ('strict' in opts) {\n    this._mongooseOptions.strict = opts.strict;\n  }\n\n  const isOverwriting = this.options.overwrite && !hasDollarKeys(this._update);\n\n  if (isOverwriting) {\n    this._update = new this.model(this._update, null, true);\n  }\n\n  if (type === 'remove') {\n    opts.remove = true;\n  } else {\n    if (!('new' in opts) && !('returnOriginal' in opts) && !('returnDocument' in opts)) {\n      opts.new = false;\n    }\n\n    if (!('upsert' in opts)) {\n      opts.upsert = false;\n    }\n\n    if (opts.upsert || opts['new']) {\n      opts.remove = false;\n    }\n\n    if (!isOverwriting) {\n      try {\n        this._update = this._castUpdate(this._update, opts.overwrite);\n      } catch (err) {\n        return callback(err);\n      }\n\n      const _opts = Object.assign({}, opts, {\n        setDefaultsOnInsert: this._mongooseOptions.setDefaultsOnInsert\n      });\n\n      this._update = setDefaultsOnInsert(this._conditions, schema, this._update, _opts);\n\n      if (!this._update || Object.keys(this._update).length === 0) {\n        if (opts.upsert) {\n          // still need to do the upsert to empty doc\n          const doc = utils.clone(castedQuery);\n          delete doc._id;\n          this._update = {\n            $set: doc\n          };\n        } else {\n          this._executionStack = null;\n          this.findOne(callback);\n          return this;\n        }\n      } else if (this._update instanceof Error) {\n        return callback(this._update);\n      } else {\n        // In order to make MongoDB 2.6 happy (see\n        // https://jira.mongodb.org/browse/SERVER-12266 and related issues)\n        // if we have an actual update document but $set is empty, junk the $set.\n        if (this._update.$set && Object.keys(this._update.$set).length === 0) {\n          delete this._update.$set;\n        }\n      }\n    }\n\n    if (Array.isArray(opts.arrayFilters)) {\n      opts.arrayFilters = removeUnusedArrayFilters(this._update, opts.arrayFilters);\n    }\n  }\n\n  this._applyPaths();\n\n  if (this._fields) {\n    fields = utils.clone(this._fields);\n    opts.projection = this._castFields(fields);\n\n    if (opts.projection instanceof Error) {\n      return callback(opts.projection);\n    }\n  }\n\n  if (opts.sort) convertSortToArray(opts);\n\n  const cb = function (err, doc, res) {\n    if (err) {\n      return callback(err);\n    }\n\n    _this._completeOne(doc, res, callback);\n  };\n\n  const runValidators = _getOption(this, 'runValidators', false); // Bypass mquery\n\n\n  const collection = _this._collection.collection;\n  convertNewToReturnDocument(opts);\n\n  if (type === 'remove') {\n    collection.findOneAndDelete(castedQuery, opts, _wrapThunkCallback(_this, function (error, res) {\n      return cb(error, res ? res.value : res, res);\n    }));\n    return this;\n  } // honors legacy overwrite option for backward compatibility\n\n\n  const updateMethod = isOverwriting ? 'findOneAndReplace' : 'findOneAndUpdate';\n\n  if (runValidators) {\n    this.validate(this._update, opts, isOverwriting, error => {\n      if (error) {\n        return callback(error);\n      }\n\n      if (this._update && this._update.toBSON) {\n        this._update = this._update.toBSON();\n      }\n\n      collection[updateMethod](castedQuery, this._update, opts, _wrapThunkCallback(_this, function (error, res) {\n        return cb(error, res ? res.value : res, res);\n      }));\n    });\n  } else {\n    if (this._update && this._update.toBSON) {\n      this._update = this._update.toBSON();\n    }\n\n    collection[updateMethod](castedQuery, this._update, opts, _wrapThunkCallback(_this, function (error, res) {\n      return cb(error, res ? res.value : res, res);\n    }));\n  }\n\n  return this;\n};\n/*!\n * ignore\n */\n\n\nfunction _completeOneLean(doc, res, opts, callback) {\n  if (opts.rawResult) {\n    return callback(null, res);\n  }\n\n  return callback(null, doc);\n}\n/*!\n * Override mquery.prototype._mergeUpdate to handle mongoose objects in\n * updates.\n *\n * @param {Object} doc\n * @api private\n */\n\n\nQuery.prototype._mergeUpdate = function (doc) {\n  if (doc == null || typeof doc === 'object' && Object.keys(doc).length === 0) {\n    return;\n  }\n\n  if (!this._update) {\n    this._update = Array.isArray(doc) ? [] : {};\n  }\n\n  if (doc instanceof Query) {\n    if (Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else if (Array.isArray(doc)) {\n    if (!Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n\n    this._update = this._update.concat(doc);\n  } else {\n    if (Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n\n    utils.mergeClone(this._update, doc);\n  }\n};\n/*!\n * The mongodb driver 1.3.23 only supports the nested array sort\n * syntax. We must convert it or sorting findAndModify will not work.\n */\n\n\nfunction convertSortToArray(opts) {\n  if (Array.isArray(opts.sort)) {\n    return;\n  }\n\n  if (!utils.isObject(opts.sort)) {\n    return;\n  }\n\n  const sort = [];\n\n  for (const key in opts.sort) {\n    if (utils.object.hasOwnProperty(opts.sort, key)) {\n      sort.push([key, opts.sort[key]]);\n    }\n  }\n\n  opts.sort = sort;\n}\n/*!\n * ignore\n */\n\n\nfunction _updateThunk(op, callback) {\n  this._castConditions();\n\n  _castArrayFilters(this);\n\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n  const castedQuery = this._conditions;\n\n  const options = this._optionsForExec(this.model);\n\n  this._update = utils.clone(this._update, options);\n  const isOverwriting = this.options.overwrite && !hasDollarKeys(this._update);\n\n  if (isOverwriting) {\n    if (op === 'updateOne' || op === 'updateMany') {\n      return callback(new MongooseError('The MongoDB server disallows ' + 'overwriting documents using `' + op + '`. See: ' + 'https://mongoosejs.com/docs/deprecations.html#update'));\n    }\n\n    this._update = new this.model(this._update, null, true);\n  } else {\n    try {\n      this._update = this._castUpdate(this._update, options.overwrite);\n    } catch (err) {\n      callback(err);\n      return null;\n    }\n\n    if (this._update == null || Object.keys(this._update).length === 0) {\n      callback(null, {\n        acknowledged: false\n      });\n      return null;\n    }\n\n    const _opts = Object.assign({}, options, {\n      setDefaultsOnInsert: this._mongooseOptions.setDefaultsOnInsert\n    });\n\n    this._update = setDefaultsOnInsert(this._conditions, this.model.schema, this._update, _opts);\n  }\n\n  if (Array.isArray(options.arrayFilters)) {\n    options.arrayFilters = removeUnusedArrayFilters(this._update, options.arrayFilters);\n  }\n\n  const runValidators = _getOption(this, 'runValidators', false);\n\n  if (runValidators) {\n    this.validate(this._update, options, isOverwriting, err => {\n      if (err) {\n        return callback(err);\n      }\n\n      if (this._update.toBSON) {\n        this._update = this._update.toBSON();\n      }\n\n      this._collection[op](castedQuery, this._update, options, callback);\n    });\n    return null;\n  }\n\n  if (this._update.toBSON) {\n    this._update = this._update.toBSON();\n  }\n\n  this._collection[op](castedQuery, this._update, options, callback);\n\n  return null;\n}\n/*!\n * Mongoose calls this function internally to validate the query if\n * `runValidators` is set\n *\n * @param {Object} castedDoc the update, after casting\n * @param {Object} options the options from `_optionsForExec()`\n * @param {Function} callback\n * @api private\n */\n\n\nQuery.prototype.validate = function validate(castedDoc, options, isOverwriting, callback) {\n  return promiseOrCallback(callback, cb => {\n    try {\n      if (isOverwriting) {\n        castedDoc.$validate(cb);\n      } else {\n        updateValidators(this, this.model.schema, castedDoc, options, cb);\n      }\n    } catch (err) {\n      immediate(function () {\n        cb(err);\n      });\n    }\n  });\n};\n/*!\n * Internal thunk for .update()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\n\n\nQuery.prototype._execUpdate = wrapThunk(function (callback) {\n  return _updateThunk.call(this, 'update', callback);\n});\n/*!\n * Internal thunk for .updateMany()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\n\nQuery.prototype._updateMany = wrapThunk(function (callback) {\n  return _updateThunk.call(this, 'updateMany', callback);\n});\n/*!\n * Internal thunk for .updateOne()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\n\nQuery.prototype._updateOne = wrapThunk(function (callback) {\n  return _updateThunk.call(this, 'updateOne', callback);\n});\n/*!\n * Internal thunk for .replaceOne()\n *\n * @param {Function} callback\n * @see Model.replaceOne #model_Model.replaceOne\n * @api private\n */\n\nQuery.prototype._replaceOne = wrapThunk(function (callback) {\n  return _updateThunk.call(this, 'replaceOne', callback);\n});\n/**\n * Declare and/or execute this query as an update() operation.\n *\n * _All paths passed that are not [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operations will become `$set` ops._\n *\n * This function triggers the following middleware.\n *\n * - `update()`\n *\n * #### Example\n *\n *     Model.where({ _id: id }).update({ title: 'words' });\n *\n *     // becomes\n *\n *     Model.where({ _id: id }).update({ $set: { title: 'words' }});\n *\n * #### Valid options:\n *\n *  - `upsert` (boolean) whether to create the doc if it doesn't match (false)\n *  - `multi` (boolean) whether multiple documents should be updated (false)\n *  - `runValidators` (boolean) if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n *  - `setDefaultsOnInsert` (boolean) `true` by default. If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created.\n *  - `strict` (boolean) overrides the `strict` option for this update\n *  - `read`\n *  - `writeConcern`\n *\n * #### Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op. The update operation will be ignored and the callback executed without sending the command to MongoDB.\n *\n * #### Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback, we must first call update() and then execute it by using the `exec()` method.\n *\n * ```javascript\n * const q = Model.where({ _id: id });\n * q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n * q.update({ $set: { name: 'bob' }}).exec(); // executed\n *\n * // keys that are not [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) ops become `$set`.\n * // this executes the same command as the previous example.\n * q.update({ name: 'bob' }).exec();\n *\n * // multi updates\n * Model.where()\n *      .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *\n * // more multi updates\n * Model.where()\n *      .setOptions({ multi: true })\n *      .update({ $set: { arr: [] }}, callback)\n *\n * // single update by default\n * Model.where({ email: 'address@example.com' })\n *      .update({ $inc: { counter: 1 }}, callback)\n * ```\n *\n * API summary\n *\n * ```javascript\n * update(filter, doc, options, cb); // executes\n * update(filter, doc, options);\n * update(filter, doc, cb); // executes\n * update(filter, doc);\n * update(doc, cb); // executes\n * update(doc);\n * update(cb); // executes\n * update(true); // executes\n * update();\n * ```\n *\n * @param {Object} [filter]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update https://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult https://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.update = function (conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'update', conditions, doc, options, callback);\n};\n/**\n * Declare and/or execute this query as an updateMany() operation. Same as\n * `update()`, except MongoDB will update _all_ documents that match\n * `filter` (as opposed to just the first one) regardless of the value of\n * the `multi` option.\n *\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\n * and `post('updateMany')` instead.\n *\n * #### Example:\n *     const res = await Person.updateMany({ name: /Stark$/ }, { isDeleted: true });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `updateMany()`\n *\n * @param {Object} [filter]\n * @param {Object|Array} [update] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update https://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult https://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\n\nQuery.prototype.updateMany = function (conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'updateMany', conditions, doc, options, callback);\n};\n/**\n * Declare and/or execute this query as an updateOne() operation. Same as\n * `update()`, except it does not support the `multi` option.\n *\n * - MongoDB will update _only_ the first document that matches `filter` regardless of the value of the `multi` option.\n * - Use `replaceOne()` if you want to overwrite an entire document rather than using [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operators like `$set`.\n *\n * **Note** updateOne will _not_ fire update middleware. Use `pre('updateOne')`\n * and `post('updateOne')` instead.\n *\n * #### Example:\n *     const res = await Person.updateOne({ name: 'Jean-Luc Picard' }, { ship: 'USS Enterprise' });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `updateOne()`\n *\n * @param {Object} [filter]\n * @param {Object|Array} [update] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update https://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult https://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\n\nQuery.prototype.updateOne = function (conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'updateOne', conditions, doc, options, callback);\n};\n/**\n * Declare and/or execute this query as a replaceOne() operation. Same as\n * `update()`, except MongoDB will replace the existing document and will\n * not accept any [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operators (`$set`, etc.)\n *\n * **Note** replaceOne will _not_ fire update middleware. Use `pre('replaceOne')`\n * and `post('replaceOne')` instead.\n *\n * #### Example:\n *     const res = await Person.replaceOne({ _id: 24601 }, { name: 'Jean Valjean' });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `replaceOne()`\n *\n * @param {Object} [filter]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update https://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult https://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\n\nQuery.prototype.replaceOne = function (conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  this.setOptions({\n    overwrite: true\n  });\n  return _update(this, 'replaceOne', conditions, doc, options, callback);\n};\n/*!\n * Internal helper for update, updateMany, updateOne, replaceOne\n */\n\n\nfunction _update(query, op, filter, doc, options, callback) {\n  // make sure we don't send in the whole Document to merge()\n  query.op = op;\n\n  query._validateOp();\n\n  filter = utils.toObject(filter);\n  doc = doc || {}; // strict is an option used in the update checking, make sure it gets set\n\n  if (options != null) {\n    if ('strict' in options) {\n      query._mongooseOptions.strict = options.strict;\n    }\n  }\n\n  if (!(filter instanceof Query) && filter != null && filter.toString() !== '[object Object]') {\n    query.error(new ObjectParameterError(filter, 'filter', op));\n  } else {\n    query.merge(filter);\n  }\n\n  if (utils.isObject(options)) {\n    query.setOptions(options);\n  }\n\n  query._mergeUpdate(doc); // Hooks\n\n\n  if (callback) {\n    query.exec(callback);\n    return query;\n  }\n\n  return Query.base[op].call(query, filter, void 0, options, callback);\n}\n/**\n * Runs a function `fn` and treats the return value of `fn` as the new value\n * for the query to resolve to.\n *\n * Any functions you pass to `transform()` will run **after** any post hooks.\n *\n * #### Example:\n *\n *     const res = await MyModel.findOne().transform(res => {\n *       // Sets a `loadedAt` property on the doc that tells you the time the\n *       // document was loaded.\n *       return res == null ?\n *         res :\n *         Object.assign(res, { loadedAt: new Date() });\n *     });\n *\n * @method transform\n * @memberOf Query\n * @instance\n * @param {Function} fn function to run to transform the query result\n * @return {Query} this\n */\n\n\nQuery.prototype.transform = function (fn) {\n  this._transforms.push(fn);\n\n  return this;\n};\n/**\n * Make this query throw an error if no documents match the given `filter`.\n * This is handy for integrating with async/await, because `orFail()` saves you\n * an extra `if` statement to check if no document was found.\n *\n * #### Example:\n *\n *     // Throws if no doc returned\n *     await Model.findOne({ foo: 'bar' }).orFail();\n *\n *     // Throws if no document was updated. Note that `orFail()` will still\n *     // throw if the only document that matches is `{ foo: 'bar', name: 'test' }`,\n *     // because `orFail()` will throw if no document was _updated_, not\n *     // if no document was _found_.\n *     await Model.updateOne({ foo: 'bar' }, { name: 'test' }).orFail();\n *\n *     // Throws \"No docs found!\" error if no docs match `{ foo: 'bar' }`\n *     await Model.find({ foo: 'bar' }).orFail(new Error('No docs found!'));\n *\n *     // Throws \"Not found\" error if no document was found\n *     await Model.findOneAndUpdate({ foo: 'bar' }, { name: 'test' }).\n *       orFail(() => Error('Not found'));\n *\n * @method orFail\n * @memberOf Query\n * @instance\n * @param {Function|Error} [err] optional error to throw if no docs match `filter`. If not specified, `orFail()` will throw a `DocumentNotFoundError`\n * @return {Query} this\n */\n\n\nQuery.prototype.orFail = function (err) {\n  this.transform(res => {\n    switch (this.op) {\n      case 'find':\n        if (res.length === 0) {\n          throw _orFailError(err, this);\n        }\n\n        break;\n\n      case 'findOne':\n        if (res == null) {\n          throw _orFailError(err, this);\n        }\n\n        break;\n\n      case 'replaceOne':\n      case 'update':\n      case 'updateMany':\n      case 'updateOne':\n        if (res && res.modifiedCount === 0) {\n          throw _orFailError(err, this);\n        }\n\n        break;\n\n      case 'findOneAndDelete':\n      case 'findOneAndRemove':\n        if ((res && res.lastErrorObject && res.lastErrorObject.n) === 0) {\n          throw _orFailError(err, this);\n        }\n\n        break;\n\n      case 'findOneAndUpdate':\n      case 'findOneAndReplace':\n        if ((res && res.lastErrorObject && res.lastErrorObject.updatedExisting) === false) {\n          throw _orFailError(err, this);\n        }\n\n        break;\n\n      case 'deleteMany':\n      case 'deleteOne':\n      case 'remove':\n        if (res.deletedCount === 0) {\n          throw _orFailError(err, this);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    return res;\n  });\n  return this;\n};\n/*!\n * Get the error to throw for `orFail()`\n */\n\n\nfunction _orFailError(err, query) {\n  if (typeof err === 'function') {\n    err = err.call(query);\n  }\n\n  if (err == null) {\n    err = new DocumentNotFoundError(query.getQuery(), query.model.modelName);\n  }\n\n  return err;\n}\n/**\n * Executes the query\n *\n * #### Examples:\n *\n *     const promise = query.exec();\n *     const promise = query.exec('update');\n *\n *     query.exec(callback);\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback] optional params depend on the function being called\n * @return {Promise}\n * @api public\n */\n\n\nQuery.prototype.exec = function exec(op, callback) {\n  const _this = this; // Ensure that `exec()` is the first thing that shows up in\n  // the stack when cast errors happen.\n\n\n  const castError = new CastError();\n\n  if (typeof op === 'function') {\n    callback = op;\n    op = null;\n  } else if (typeof op === 'string') {\n    this.op = op;\n  }\n\n  if (this.op == null) {\n    throw new Error('Query must have `op` before executing');\n  }\n\n  this._validateOp();\n\n  callback = this.model.$handleCallbackError(callback);\n  return promiseOrCallback(callback, cb => {\n    cb = this.model.$wrapCallback(cb);\n\n    if (!_this.op) {\n      cb();\n      return;\n    }\n\n    this._hooks.execPre('exec', this, [], error => {\n      if (error != null) {\n        return cb(_cleanCastErrorStack(castError, error));\n      }\n\n      let thunk = '_' + this.op;\n\n      if (this.op === 'update') {\n        thunk = '_execUpdate';\n      } else if (this.op === 'distinct') {\n        thunk = '__distinct';\n      }\n\n      this[thunk].call(this, (error, res) => {\n        if (error) {\n          return cb(_cleanCastErrorStack(castError, error));\n        }\n\n        this._hooks.execPost('exec', this, [], {}, error => {\n          if (error) {\n            return cb(_cleanCastErrorStack(castError, error));\n          }\n\n          cb(null, res);\n        });\n      });\n    });\n  }, this.model.events);\n};\n/*!\n * ignore\n */\n\n\nfunction _cleanCastErrorStack(castError, error) {\n  if (error instanceof CastError) {\n    castError.copy(error);\n    return castError;\n  }\n\n  return error;\n}\n/*!\n * ignore\n */\n\n\nfunction _wrapThunkCallback(query, cb) {\n  return function (error, res) {\n    if (error != null) {\n      return cb(error);\n    }\n\n    for (const fn of query._transforms) {\n      try {\n        res = fn(res);\n      } catch (error) {\n        return cb(error);\n      }\n    }\n\n    return cb(null, res);\n  };\n}\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * More about [`then()` in JavaScript](https://masteringjs.io/tutorials/fundamentals/then).\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\n\nQuery.prototype.then = function (resolve, reject) {\n  return this.exec().then(resolve, reject);\n};\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n * Like `.then()`, but only takes a rejection handler.\n *\n * More about [Promise `catch()` in JavaScript](https://masteringjs.io/tutorials/fundamentals/catch).\n *\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\n\nQuery.prototype.catch = function (reject) {\n  return this.exec().then(null, reject);\n};\n/**\n * Add pre [middleware](/docs/middleware.html) to this query instance. Doesn't affect\n * other queries.\n *\n * #### Example:\n *\n *     const q1 = Question.find({ answer: 42 });\n *     q1.pre(function middleware() {\n *       console.log(this.getFilter());\n *     });\n *     await q1.exec(); // Prints \"{ answer: 42 }\"\n *\n *     // Doesn't print anything, because `middleware()` is only\n *     // registered on `q1`.\n *     await Question.find({ answer: 42 });\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\n\nQuery.prototype.pre = function (fn) {\n  this._hooks.pre('exec', fn);\n\n  return this;\n};\n/**\n * Add post [middleware](/docs/middleware.html) to this query instance. Doesn't affect\n * other queries.\n *\n * #### Example:\n *\n *     const q1 = Question.find({ answer: 42 });\n *     q1.post(function middleware() {\n *       console.log(this.getFilter());\n *     });\n *     await q1.exec(); // Prints \"{ answer: 42 }\"\n *\n *     // Doesn't print anything, because `middleware()` is only\n *     // registered on `q1`.\n *     await Question.find({ answer: 42 });\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\n\nQuery.prototype.post = function (fn) {\n  this._hooks.post('exec', fn);\n\n  return this;\n};\n/*!\n * Casts obj for an update command.\n *\n * @param {Object} obj\n * @return {Object} obj after casting its values\n * @api private\n */\n\n\nQuery.prototype._castUpdate = function _castUpdate(obj, overwrite) {\n  let schema = this.schema;\n  const discriminatorKey = schema.options.discriminatorKey;\n  const baseSchema = schema._baseSchema ? schema._baseSchema : schema;\n\n  if (this._mongooseOptions.overwriteDiscriminatorKey && obj[discriminatorKey] != null && baseSchema.discriminators) {\n    const _schema = baseSchema.discriminators[obj[discriminatorKey]];\n\n    if (_schema != null) {\n      schema = _schema;\n    }\n  }\n\n  let upsert;\n\n  if ('upsert' in this.options) {\n    upsert = this.options.upsert;\n  }\n\n  const filter = this._conditions;\n\n  if (schema != null && utils.hasUserDefinedProperty(filter, schema.options.discriminatorKey) && typeof filter[schema.options.discriminatorKey] !== 'object' && schema.discriminators != null) {\n    const discriminatorValue = filter[schema.options.discriminatorKey];\n    const byValue = getDiscriminatorByValue(this.model.discriminators, discriminatorValue);\n    schema = schema.discriminators[discriminatorValue] || byValue && byValue.schema || schema;\n  }\n\n  return castUpdate(schema, obj, {\n    overwrite: overwrite,\n    strict: this._mongooseOptions.strict,\n    upsert: upsert,\n    arrayFilters: this.options.arrayFilters,\n    overwriteDiscriminatorKey: this._mongooseOptions.overwriteDiscriminatorKey\n  }, this, this._conditions);\n};\n/*!\n * castQuery\n * @api private\n */\n\n\nfunction castQuery(query) {\n  try {\n    return query.cast(query.model);\n  } catch (err) {\n    return err;\n  }\n}\n/**\n * Specifies paths which should be populated with other documents.\n *\n * #### Example:\n *\n *     let book = await Book.findOne().populate('authors');\n *     book.title; // 'Node.js in Action'\n *     book.authors[0].name; // 'TJ Holowaychuk'\n *     book.authors[1].name; // 'Nathan Rajlich'\n *\n *     let books = await Book.find().populate({\n *       path: 'authors',\n *       // `match` and `sort` apply to the Author model,\n *       // not the Book model. These options do not affect\n *       // which documents are in `books`, just the order and\n *       // contents of each book document's `authors`.\n *       match: { name: new RegExp('.*h.*', 'i') },\n *       sort: { name: -1 }\n *     });\n *     books[0].title; // 'Node.js in Action'\n *     // Each book's `authors` are sorted by name, descending.\n *     books[0].authors[0].name; // 'TJ Holowaychuk'\n *     books[0].authors[1].name; // 'Marc Harter'\n *\n *     books[1].title; // 'Professional AngularJS'\n *     // Empty array, no authors' name has the letter 'h'\n *     books[1].authors; // []\n *\n * Paths are populated after the query executes and a response is received. A\n * separate query is then executed for each path specified for population. After\n * a response for each query has also been returned, the results are passed to\n * the callback.\n *\n * @param {Object|String|Array<String>} path either the path(s) to populate or an object specifying all parameters\n * @param {Object|String} [select] Field selection for the population query\n * @param {Model} [model] The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's `ref` field.\n * @param {Object} [match] Conditions for the population query\n * @param {Object} [options] Options for the population query (sort, etc)\n * @param {String} [options.path=null] The path to populate.\n * @param {boolean} [options.retainNullValues=false] by default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] if true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://docs.mongodb.com/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @see population ./populate.html\n * @see Query#select #query_Query-select\n * @see Model.populate #model_Model.populate\n * @return {Query} this\n * @api public\n */\n\n\nQuery.prototype.populate = function () {\n  // Bail when given no truthy arguments\n  if (!Array.from(arguments).some(Boolean)) {\n    return this;\n  }\n\n  const res = utils.populate.apply(null, arguments); // Propagate readConcern and readPreference and lean from parent query,\n  // unless one already specified\n\n  if (this.options != null) {\n    const readConcern = this.options.readConcern;\n    const readPref = this.options.readPreference;\n\n    for (const populateOptions of res) {\n      if (readConcern != null && (populateOptions && populateOptions.options && populateOptions.options.readConcern) == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.readConcern = readConcern;\n      }\n\n      if (readPref != null && (populateOptions && populateOptions.options && populateOptions.options.readPreference) == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.readPreference = readPref;\n      }\n    }\n  }\n\n  const opts = this._mongooseOptions;\n\n  if (opts.lean != null) {\n    const lean = opts.lean;\n\n    for (const populateOptions of res) {\n      if ((populateOptions && populateOptions.options && populateOptions.options.lean) == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.lean = lean;\n      }\n    }\n  }\n\n  if (!utils.isObject(opts.populate)) {\n    opts.populate = {};\n  }\n\n  const pop = opts.populate;\n\n  for (const populateOptions of res) {\n    const path = populateOptions.path;\n\n    if (pop[path] && pop[path].populate && populateOptions.populate) {\n      populateOptions.populate = pop[path].populate.concat(populateOptions.populate);\n    }\n\n    pop[populateOptions.path] = populateOptions;\n  }\n\n  return this;\n};\n/**\n * Gets a list of paths to be populated by this query\n *\n * #### Example:\n *      bookSchema.pre('findOne', function() {\n *        let keys = this.getPopulatedPaths(); // ['author']\n *      });\n *      ...\n *      Book.findOne({}).populate('author');\n *\n * #### Example:\n *      // Deep populate\n *      const q = L1.find().populate({\n *        path: 'level2',\n *        populate: { path: 'level3' }\n *      });\n *      q.getPopulatedPaths(); // ['level2', 'level2.level3']\n *\n * @return {Array} an array of strings representing populated paths\n * @api public\n */\n\n\nQuery.prototype.getPopulatedPaths = function getPopulatedPaths() {\n  const obj = this._mongooseOptions.populate || {};\n  const ret = Object.keys(obj);\n\n  for (const path of Object.keys(obj)) {\n    const pop = obj[path];\n\n    if (!Array.isArray(pop.populate)) {\n      continue;\n    }\n\n    _getPopulatedPaths(ret, pop.populate, path + '.');\n  }\n\n  return ret;\n};\n/*!\n * ignore\n */\n\n\nfunction _getPopulatedPaths(list, arr, prefix) {\n  for (const pop of arr) {\n    list.push(prefix + pop.path);\n\n    if (!Array.isArray(pop.populate)) {\n      continue;\n    }\n\n    _getPopulatedPaths(list, pop.populate, prefix + pop.path + '.');\n  }\n}\n/**\n * Casts this query to the schema of `model`\n *\n * #### Note\n *\n * If `obj` is present, it is cast instead of this query.\n *\n * @param {Model} [model] the model to cast to. If not set, defaults to `this.model`\n * @param {Object} [obj]\n * @return {Object}\n * @api public\n */\n\n\nQuery.prototype.cast = function (model, obj) {\n  obj || (obj = this._conditions);\n  model = model || this.model;\n  const discriminatorKey = model.schema.options.discriminatorKey;\n\n  if (obj != null && obj.hasOwnProperty(discriminatorKey)) {\n    model = getDiscriminatorByValue(model.discriminators, obj[discriminatorKey]) || model;\n  }\n\n  const opts = {\n    upsert: this.options && this.options.upsert\n  };\n\n  if (this.options) {\n    if ('strict' in this.options) {\n      opts.strict = this.options.strict;\n      opts.strictQuery = opts.strict;\n    }\n\n    if ('strictQuery' in this.options) {\n      opts.strictQuery = this.options.strictQuery;\n    }\n  }\n\n  try {\n    return cast(model.schema, obj, opts, this);\n  } catch (err) {\n    // CastError, assign model\n    if (typeof err.setModel === 'function') {\n      err.setModel(model);\n    }\n\n    throw err;\n  }\n};\n/**\n * Casts selected field arguments for field selection with mongo 2.2\n *\n *     query.select({ ids: { $elemMatch: { $in: [hexString] }})\n *\n * @param {Object} fields\n * @see https://github.com/Automattic/mongoose/issues/1091\n * @see https://docs.mongodb.org/manual/reference/projection/elemMatch/\n * @api private\n */\n\n\nQuery.prototype._castFields = function _castFields(fields) {\n  let selected, elemMatchKeys, keys, key, out, i;\n\n  if (fields) {\n    keys = Object.keys(fields);\n    elemMatchKeys = [];\n    i = keys.length; // collect $elemMatch args\n\n    while (i--) {\n      key = keys[i];\n\n      if (fields[key].$elemMatch) {\n        selected || (selected = {});\n        selected[key] = fields[key];\n        elemMatchKeys.push(key);\n      }\n    }\n  }\n\n  if (selected) {\n    // they passed $elemMatch, cast em\n    try {\n      out = this.cast(this.model, selected);\n    } catch (err) {\n      return err;\n    } // apply the casted field args\n\n\n    i = elemMatchKeys.length;\n\n    while (i--) {\n      key = elemMatchKeys[i];\n      fields[key] = out[key];\n    }\n  }\n\n  return fields;\n};\n/**\n * Applies schematype selected options to this query.\n * @api private\n */\n\n\nQuery.prototype._applyPaths = function applyPaths() {\n  this._fields = this._fields || {};\n  helpers.applyPaths(this._fields, this.model.schema);\n  let _selectPopulatedPaths = true;\n\n  if ('selectPopulatedPaths' in this.model.base.options) {\n    _selectPopulatedPaths = this.model.base.options.selectPopulatedPaths;\n  }\n\n  if ('selectPopulatedPaths' in this.model.schema.options) {\n    _selectPopulatedPaths = this.model.schema.options.selectPopulatedPaths;\n  }\n\n  if (_selectPopulatedPaths) {\n    selectPopulatedFields(this._fields, this._userProvidedFields, this._mongooseOptions.populate);\n  }\n};\n/**\n * Returns a wrapper around a [mongodb driver cursor](https://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html).\n * A QueryCursor exposes a Streams3 interface, as well as a `.next()` function.\n *\n * The `.cursor()` function triggers pre find hooks, but **not** post find hooks.\n *\n * #### Example\n *\n *     // There are 2 ways to use a cursor. First, as a stream:\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       on('data', function(doc) { console.log(doc); }).\n *       on('end', function() { console.log('Done!'); });\n *\n *     // Or you can use `.next()` to manually get the next doc in the stream.\n *     // `.next()` returns a promise, so you can use promises or callbacks.\n *     const cursor = Thing.find({ name: /^hello/ }).cursor();\n *     cursor.next(function(error, doc) {\n *       console.log(doc);\n *     });\n *\n *     // Because `.next()` returns a promise, you can use co\n *     // to easily iterate through all documents without loading them\n *     // all into memory.\n *     const cursor = Thing.find({ name: /^hello/ }).cursor();\n *     for (let doc = await cursor.next(); doc != null; doc = await cursor.next()) {\n *       console.log(doc);\n *     }\n *\n * #### Valid options\n *\n *   - `transform`: optional function which accepts a mongoose document. The return value of the function will be emitted on `data` and returned by `.next()`.\n *\n * @return {QueryCursor}\n * @param {Object} [options]\n * @see QueryCursor\n * @api public\n */\n\n\nQuery.prototype.cursor = function cursor(opts) {\n  this._applyPaths();\n\n  this._fields = this._castFields(this._fields);\n  this.setOptions({\n    projection: this._fieldsForExec()\n  });\n\n  if (opts) {\n    this.setOptions(opts);\n  }\n\n  const options = Object.assign({}, this._optionsForExec(), {\n    projection: this.projection()\n  });\n\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    return new QueryCursor(this, options)._markError(err);\n  }\n\n  return new QueryCursor(this, options);\n}; // the rest of these are basically to support older Mongoose syntax with mquery\n\n/**\n * _DEPRECATED_ Alias of `maxScan`\n *\n * @deprecated\n * @see maxScan #query_Query-maxScan\n * @method maxscan\n * @memberOf Query\n * @instance\n */\n\n\nQuery.prototype.maxscan = Query.base.maxScan;\n/**\n * Sets the tailable option (for use with capped collections).\n *\n * #### Example\n *\n *     query.tailable(); // true\n *     query.tailable(true);\n *     query.tailable(false);\n *\n *     // Set both `tailable` and `awaitData` options\n *     query.tailable({ awaitData: true });\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} bool defaults to true\n * @param {Object} [opts] options to set\n * @param {Boolean} [opts.awaitData] false by default. Set to true to keep the cursor open even if there's no data.\n * @param {Number} [opts.maxAwaitTimeMS] the maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. Requires `tailable` and `awaitData` to be true\n * @see tailable https://docs.mongodb.org/manual/tutorial/create-tailable-cursor/\n * @api public\n */\n\nQuery.prototype.tailable = function (val, opts) {\n  // we need to support the tailable({ awaitData : true }) as well as the\n  // tailable(true, {awaitData :true}) syntax that mquery does not support\n  if (val != null && typeof val.constructor === 'function' && val.constructor.name === 'Object') {\n    opts = val;\n    val = true;\n  }\n\n  if (val === undefined) {\n    val = true;\n  }\n\n  if (opts && typeof opts === 'object') {\n    for (const key of Object.keys(opts)) {\n      if (key === 'awaitData' || key === 'awaitdata') {\n        // backwards compat, see gh-10875\n        // For backwards compatibility\n        this.options['awaitData'] = !!opts[key];\n      } else {\n        this.options[key] = opts[key];\n      }\n    }\n  }\n\n  return Query.base.tailable.call(this, val);\n};\n/**\n * Declares an intersects query for `geometry()`.\n *\n * #### Example\n *\n *     query.where('path').intersects().geometry({\n *       type: 'LineString',\n *       coordinates: [[180.0, 11.0], [180, 9.0]]\n *     });\n *\n *     query.where('path').intersects({\n *       type: 'LineString',\n *       coordinates: [[180.0, 11.0], [180, 9.0]]\n *     });\n *\n * #### Note:\n *\n * **MUST** be used after `where()`.\n *\n * #### Note:\n *\n * In Mongoose 3.7, `intersects` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method intersects\n * @memberOf Query\n * @instance\n * @param {Object} [arg]\n * @return {Query} this\n * @see $geometry https://docs.mongodb.org/manual/reference/operator/geometry/\n * @see geoIntersects https://docs.mongodb.org/manual/reference/operator/geoIntersects/\n * @api public\n */\n\n/**\n * Specifies a `$geometry` condition\n *\n * #### Example\n *\n *     const polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     const polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     const polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * The argument is assigned to the most recent path passed to `where()`.\n *\n * #### Note:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * @method geometry\n * @memberOf Query\n * @instance\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see $geometry https://docs.mongodb.org/manual/reference/operator/geometry/\n * @see https://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see https://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * #### Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *\n * @method near\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see $near https://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere https://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance https://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @see https://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/*!\n * Overwriting mquery is needed to support a couple different near() forms found in older\n * versions of mongoose\n * near([1,1])\n * near(1,1)\n * near(field, [1,2])\n * near(field, 1, 2)\n * In addition to all of the normal forms supported by mquery\n */\n\n\nQuery.prototype.near = function () {\n  const params = [];\n  const sphere = this._mongooseOptions.nearSphere; // TODO refactor\n\n  if (arguments.length === 1) {\n    if (Array.isArray(arguments[0])) {\n      params.push({\n        center: arguments[0],\n        spherical: sphere\n      });\n    } else if (typeof arguments[0] === 'string') {\n      // just passing a path\n      params.push(arguments[0]);\n    } else if (utils.isObject(arguments[0])) {\n      if (typeof arguments[0].spherical !== 'boolean') {\n        arguments[0].spherical = sphere;\n      }\n\n      params.push(arguments[0]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 2) {\n    if (typeof arguments[0] === 'number' && typeof arguments[1] === 'number') {\n      params.push({\n        center: [arguments[0], arguments[1]],\n        spherical: sphere\n      });\n    } else if (typeof arguments[0] === 'string' && Array.isArray(arguments[1])) {\n      params.push(arguments[0]);\n      params.push({\n        center: arguments[1],\n        spherical: sphere\n      });\n    } else if (typeof arguments[0] === 'string' && utils.isObject(arguments[1])) {\n      params.push(arguments[0]);\n\n      if (typeof arguments[1].spherical !== 'boolean') {\n        arguments[1].spherical = sphere;\n      }\n\n      params.push(arguments[1]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 3) {\n    if (typeof arguments[0] === 'string' && typeof arguments[1] === 'number' && typeof arguments[2] === 'number') {\n      params.push(arguments[0]);\n      params.push({\n        center: [arguments[1], arguments[2]],\n        spherical: sphere\n      });\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else {\n    throw new TypeError('invalid argument');\n  }\n\n  return Query.base.near.apply(this, params);\n};\n/**\n * _DEPRECATED_ Specifies a `$nearSphere` condition\n *\n * #### Example\n *\n *     query.where('loc').nearSphere({ center: [10, 10], maxDistance: 5 });\n *\n * **Deprecated.** Use `query.near()` instead with the `spherical` option set to `true`.\n *\n * #### Example\n *\n *     query.where('loc').near({ center: [10, 10], spherical: true });\n *\n * @deprecated\n * @see near() #query_Query-near\n * @see $near https://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere https://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance https://docs.mongodb.org/manual/reference/operator/maxDistance/\n */\n\n\nQuery.prototype.nearSphere = function () {\n  this._mongooseOptions.nearSphere = true;\n  this.near.apply(this, arguments);\n  return this;\n};\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js)\n * This function *only* works for `find()` queries.\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * #### Example\n *\n *     for await (const doc of Model.aggregate([{ $sort: { name: 1 } }])) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method Symbol.asyncIterator\n * @memberOf Query\n * @instance\n * @api public\n */\n\n\nif (Symbol.asyncIterator != null) {\n  Query.prototype[Symbol.asyncIterator] = function () {\n    return this.cursor().transformNull()._transformForAsyncIterator();\n  };\n}\n/**\n * Specifies a `$polygon` condition\n *\n * #### Example\n *\n *     query.where('loc').within().polygon([10, 20], [13, 25], [7, 15]);\n *     query.polygon('loc', [10, 20], [13, 25], [7, 15]);\n *\n * @method polygon\n * @memberOf Query\n * @instance\n * @param {String|Array} [path]\n * @param {Array|Object} [coordinatePairs...]\n * @return {Query} this\n * @see $polygon https://docs.mongodb.org/manual/reference/operator/polygon/\n * @see https://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a `$box` condition\n *\n * #### Example\n *\n *     const lowerLeft = [40.73083, -73.99756]\n *     const upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box({ ll : lowerLeft, ur : upperRight })\n *\n * @method box\n * @memberOf Query\n * @instance\n * @see $box https://docs.mongodb.org/manual/reference/operator/box/\n * @see within() Query#within #query_Query-within\n * @see https://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @param {Object} val\n * @param [Array] Upper Right Coords\n * @return {Query} this\n * @api public\n */\n\n/*!\n * this is needed to support the mongoose syntax of:\n * box(field, { ll : [x,y], ur : [x2,y2] })\n * box({ ll : [x,y], ur : [x2,y2] })\n */\n\n\nQuery.prototype.box = function (ll, ur) {\n  if (!Array.isArray(ll) && utils.isObject(ll)) {\n    ur = ll.ur;\n    ll = ll.ll;\n  }\n\n  return Query.base.box.call(this, ll, ur);\n};\n/**\n * Specifies a `$center` or `$centerSphere` condition.\n *\n * #### Example\n *\n *     const area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n *     // spherical calculations\n *     const area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n * @method circle\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see $center https://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere https://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @see $geoWithin https://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @see https://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * _DEPRECATED_ Alias for [circle](#query_Query-circle)\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * @deprecated\n * @method center\n * @memberOf Query\n * @instance\n * @api public\n */\n\n\nQuery.prototype.center = Query.base.circle;\n/**\n * _DEPRECATED_ Specifies a `$centerSphere` condition\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * #### Example\n *\n *     const area = { center: [50, 50], radius: 10 };\n *     query.where('loc').within().centerSphere(area);\n *\n * @deprecated\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see https://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $centerSphere https://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @api public\n */\n\nQuery.prototype.centerSphere = function () {\n  if (arguments[0] != null && typeof arguments[0].constructor === 'function' && arguments[0].constructor.name === 'Object') {\n    arguments[0].spherical = true;\n  }\n\n  if (arguments[1] != null && typeof arguments[1].constructor === 'function' && arguments[1].constructor.name === 'Object') {\n    arguments[1].spherical = true;\n  }\n\n  Query.base.circle.apply(this, arguments);\n};\n/**\n * Determines if field selection has been made.\n *\n * @method selected\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively(); // false\n *     query.select('name');\n *     query.selectedInclusively(); // true\n *\n * @method selectedInclusively\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\n\nQuery.prototype.selectedInclusively = function selectedInclusively() {\n  return isInclusive(this._fields);\n};\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExclusively(); // false\n *     query.select('-name');\n *     query.selectedExclusively(); // true\n *     query.selectedInclusively(); // false\n *\n * @method selectedExclusively\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\n\nQuery.prototype.selectedExclusively = function selectedExclusively() {\n  return isExclusive(this._fields);\n};\n/**\n * The model this query is associated with.\n *\n * #### Example:\n *\n *     const q = MyModel.find();\n *     q.model === MyModel; // true\n *\n * @api public\n * @property model\n * @memberOf Query\n * @instance\n */\n\n\nQuery.prototype.model;\n/*!\n * Export\n */\n\nmodule.exports = Query;","map":{"version":3,"names":["CastError","require","DocumentNotFoundError","Kareem","MongooseError","ObjectParameterError","QueryCursor","ReadPreference","get","ValidationError","applyGlobalMaxTimeMS","applyGlobalDiskUse","applyWriteConcern","cast","castArrayFilters","castNumber","castUpdate","completeMany","promiseOrCallback","getDiscriminatorByValue","hasDollarKeys","helpers","immediate","isExclusive","isInclusive","isSubpath","mquery","parseProjection","removeUnusedArrayFilters","sanitizeFilter","sanitizeProjection","selectPopulatedFields","setDefaultsOnInsert","updateValidators","util","utils","validOps","wrapThunk","queryOptionMethods","Set","Query","conditions","options","model","collection","_mongooseOptions","_transforms","_hooks","_executionStack","keys","Object","key","mongooseCollection","schema","_mapreduce","lean","call","find","$useProjection","collation","prototype","constructor","base","use$geoWithin","toConstructor","coll","CustomQuery","criteria","clone","p","inherits","assign","sort","setOptions","op","_validateOp","_conditions","_fields","_update","flattenDecimals","_path","_distinct","_collection","q","slice","arguments","length","_validate","path","val","arg","Array","isArray","numKeys","i","_ensurePath","$slice","select","validOpsSet","has","error","Error","mod","conds","$mod","limit","v","err","skip","projection","_userProvidedFields","fields","userProvidedFields","undefined","hasUserDefinedProperty","db","sanitizeValue","value","isObject","selectedInclusively","entries","forEach","field","selectedExclusively","TypeError","read","pref","tags","readPreference","toString","modelName","inspect","session","writeConcern","w","j","wtimeout","ms","getOptions","overwrite","populate","_numPopulate","overwriteDiscriminatorKey","defaults","args","apply","explain","verbose","allowDiskUse","maxTimeMS","getFilter","getQuery","setQuery","getUpdate","setUpdate","_fieldsForExec","_updateForExec","update","transform","depopulate","ops","ret","$set","splice","indexOf","push","_optionsForExec","upsert","set","_error","_unsetCastError","mongooseOptions","_castConditions","sanitizeFilterOpt","_castArrayFilters","query","_find","callback","_wrapThunkCallback","_applyPaths","_castFields","_this","completeManyOptions","cb","docs","versionKey","doc","pop","preparePopulationOptionsMQ","filter","cursor","toArray","toObject","canMerge","merge","prepareDiscriminatorCriteria","exec","source","opts","mergeClone","_completeOne","res","rawResult","_completeOneLean","completeOne","_findOne","findOne","_count","count","tick","_countDocuments","countDocuments","_estimatedDocumentCount","estimatedDocumentCount","__distinct","distinct","remove","_remove","deleteOne","_deleteOne","deleteMany","_deleteMany","_init","createModelAndInit","casted","$session","discriminatorMapping","isRoot","findOneAndUpdate","_mergeUpdate","returnOriginal","new","returnDocument","_findOneAndUpdate","_findAndModify","findOneAndRemove","findOneAndDelete","_findOneAndDelete","findOneAndReplace","replacement","_findOneAndReplace","convertNewToReturnDocument","runValidators","_getOption","_castUpdate","validationError","errors","castedDoc","validate","toBSON","_findOneAndRemove","option","def","type","castedQuery","castQuery","strict","isOverwriting","_opts","_id","arrayFilters","convertSortToArray","updateMethod","concat","object","hasOwnProperty","_updateThunk","acknowledged","$validate","_execUpdate","_updateMany","_updateOne","_replaceOne","updateMany","updateOne","replaceOne","fn","orFail","_orFailError","modifiedCount","lastErrorObject","n","updatedExisting","deletedCount","castError","$handleCallbackError","$wrapCallback","execPre","_cleanCastErrorStack","thunk","execPost","events","copy","then","resolve","reject","catch","pre","post","obj","discriminatorKey","baseSchema","_baseSchema","discriminators","_schema","discriminatorValue","byValue","from","some","Boolean","readConcern","readPref","populateOptions","getPopulatedPaths","_getPopulatedPaths","list","arr","prefix","strictQuery","setModel","selected","elemMatchKeys","out","$elemMatch","applyPaths","_selectPopulatedPaths","selectPopulatedPaths","_markError","maxscan","maxScan","tailable","name","near","params","sphere","nearSphere","center","spherical","Symbol","asyncIterator","transformNull","_transformForAsyncIterator","box","ll","ur","circle","centerSphere","module","exports"],"sources":["B:/web_project_react/web_car_react/node_modules/mongoose/lib/query.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('./error/cast');\nconst DocumentNotFoundError = require('./error/notFound');\nconst Kareem = require('kareem');\nconst MongooseError = require('./error/mongooseError');\nconst ObjectParameterError = require('./error/objectParameter');\nconst QueryCursor = require('./cursor/QueryCursor');\nconst ReadPreference = require('./driver').get().ReadPreference;\nconst ValidationError = require('./error/validation');\nconst { applyGlobalMaxTimeMS, applyGlobalDiskUse } = require('./helpers/query/applyGlobalOption');\nconst applyWriteConcern = require('./helpers/schema/applyWriteConcern');\nconst cast = require('./cast');\nconst castArrayFilters = require('./helpers/update/castArrayFilters');\nconst castNumber = require('./cast/number');\nconst castUpdate = require('./helpers/query/castUpdate');\nconst completeMany = require('./helpers/query/completeMany');\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\nconst getDiscriminatorByValue = require('./helpers/discriminator/getDiscriminatorByValue');\nconst hasDollarKeys = require('./helpers/query/hasDollarKeys');\nconst helpers = require('./queryhelpers');\nconst immediate = require('./helpers/immediate');\nconst isExclusive = require('./helpers/projection/isExclusive');\nconst isInclusive = require('./helpers/projection/isInclusive');\nconst isSubpath = require('./helpers/projection/isSubpath');\nconst mquery = require('mquery');\nconst parseProjection = require('./helpers/projection/parseProjection');\nconst removeUnusedArrayFilters = require('./helpers/update/removeUnusedArrayFilters');\nconst sanitizeFilter = require('./helpers/query/sanitizeFilter');\nconst sanitizeProjection = require('./helpers/query/sanitizeProjection');\nconst selectPopulatedFields = require('./helpers/query/selectPopulatedFields');\nconst setDefaultsOnInsert = require('./helpers/setDefaultsOnInsert');\nconst updateValidators = require('./helpers/updateValidators');\nconst util = require('util');\nconst utils = require('./utils');\nconst validOps = require('./helpers/query/validOps');\nconst wrapThunk = require('./helpers/query/wrapThunk');\n\nconst queryOptionMethods = new Set([\n  'allowDiskUse',\n  'batchSize',\n  'collation',\n  'comment',\n  'explain',\n  'hint',\n  'j',\n  'lean',\n  'limit',\n  'maxScan',\n  'maxTimeMS',\n  'maxscan',\n  'populate',\n  'projection',\n  'read',\n  'select',\n  'skip',\n  'slice',\n  'sort',\n  'tailable',\n  'w',\n  'writeConcern',\n  'wtimeout'\n]);\n\n/**\n * Query constructor used for building queries. You do not need\n * to instantiate a `Query` directly. Instead use Model functions like\n * [`Model.find()`](/docs/api.html#find_find).\n *\n * #### Example:\n *\n *     const query = MyModel.find(); // `query` is an instance of `Query`\n *     query.setOptions({ lean : true });\n *     query.collection(MyModel.collection);\n *     query.where('age').gte(21).exec(callback);\n *\n *     // You can instantiate a query directly. There is no need to do\n *     // this unless you're an advanced user with a very good reason to.\n *     const query = new mongoose.Query();\n *\n * @param {Object} [options]\n * @param {Object} [model]\n * @param {Object} [conditions]\n * @param {Object} [collection] Mongoose collection\n * @api public\n */\n\nfunction Query(conditions, options, model, collection) {\n  // this stuff is for dealing with custom queries created by #toConstructor\n  if (!this._mongooseOptions) {\n    this._mongooseOptions = {};\n  }\n  options = options || {};\n\n  this._transforms = [];\n  this._hooks = new Kareem();\n  this._executionStack = null;\n\n  // this is the case where we have a CustomQuery, we need to check if we got\n  // options passed in, and if we did, merge them in\n  const keys = Object.keys(options);\n  for (const key of keys) {\n    this._mongooseOptions[key] = options[key];\n  }\n\n  if (collection) {\n    this.mongooseCollection = collection;\n  }\n\n  if (model) {\n    this.model = model;\n    this.schema = model.schema;\n  }\n\n\n  // this is needed because map reduce returns a model that can be queried, but\n  // all of the queries on said model should be lean\n  if (this.model && this.model._mapreduce) {\n    this.lean();\n  }\n\n  // inherit mquery\n  mquery.call(this, null, options);\n  if (collection) {\n    this.collection(collection);\n  }\n\n  if (conditions) {\n    this.find(conditions);\n  }\n\n  this.options = this.options || {};\n\n  // For gh-6880. mquery still needs to support `fields` by default for old\n  // versions of MongoDB\n  this.$useProjection = true;\n\n  const collation = this &&\n    this.schema &&\n    this.schema.options &&\n    this.schema.options.collation || null;\n  if (collation != null) {\n    this.options.collation = collation;\n  }\n}\n\n/*!\n * inherit mquery\n */\n\nQuery.prototype = new mquery();\nQuery.prototype.constructor = Query;\nQuery.base = mquery.prototype;\n\n/**\n * Flag to opt out of using `$geoWithin`.\n *\n * ```javascript\n * mongoose.Query.use$geoWithin = false;\n * ```\n *\n * MongoDB 2.4 deprecated the use of `$within`, replacing it with `$geoWithin`. Mongoose uses `$geoWithin` by default (which is 100% backward compatible with `$within`). If you are running an older version of MongoDB, set this flag to `false` so your `within()` queries continue to work.\n *\n * @see https://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @default true\n * @property use$geoWithin\n * @memberOf Query\n * @receiver Query\n * @api public\n */\n\nQuery.use$geoWithin = mquery.use$geoWithin;\n\n/**\n * Converts this query to a customized, reusable query constructor with all arguments and options retained.\n *\n * #### Example\n *\n *     // Create a query for adventure movies and read from the primary\n *     // node in the replica-set unless it is down, in which case we'll\n *     // read from a secondary node.\n *     const query = Movie.find({ tags: 'adventure' }).read('primaryPreferred');\n *\n *     // create a custom Query constructor based off these settings\n *     const Adventure = query.toConstructor();\n *\n *     // Adventure is now a subclass of mongoose.Query and works the same way but with the\n *     // default query parameters and options set.\n *     Adventure().exec(callback)\n *\n *     // further narrow down our query results while still using the previous settings\n *     Adventure().where({ name: /^Life/ }).exec(callback);\n *\n *     // since Adventure is a stand-alone constructor we can also add our own\n *     // helper methods and getters without impacting global queries\n *     Adventure.prototype.startsWith = function (prefix) {\n *       this.where({ name: new RegExp('^' + prefix) })\n *       return this;\n *     }\n *     Object.defineProperty(Adventure.prototype, 'highlyRated', {\n *       get: function () {\n *         this.where({ rating: { $gt: 4.5 }});\n *         return this;\n *       }\n *     })\n *     Adventure().highlyRated.startsWith('Life').exec(callback)\n *\n * @return {Query} subclass-of-Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  const model = this.model;\n  const coll = this.mongooseCollection;\n\n  const CustomQuery = function(criteria, options) {\n    if (!(this instanceof CustomQuery)) {\n      return new CustomQuery(criteria, options);\n    }\n    this._mongooseOptions = utils.clone(p._mongooseOptions);\n    Query.call(this, criteria, options || null, model, coll);\n  };\n\n  util.inherits(CustomQuery, model.Query);\n\n  // set inherited defaults\n  const p = CustomQuery.prototype;\n\n  p.options = {};\n\n  // Need to handle `sort()` separately because entries-style `sort()` syntax\n  // `sort([['prop1', 1]])` confuses mquery into losing the outer nested array.\n  // See gh-8159\n  const options = Object.assign({}, this.options);\n  if (options.sort != null) {\n    p.sort(options.sort);\n    delete options.sort;\n  }\n  p.setOptions(options);\n\n  p.op = this.op;\n  p._validateOp();\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._update = utils.clone(this._update, {\n    flattenDecimals: false\n  });\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._mongooseOptions = this._mongooseOptions;\n\n  return CustomQuery;\n};\n\n/**\n * Make a copy of this query so you can re-execute it.\n *\n * #### Example:\n *     const q = Book.findOne({ title: 'Casino Royale' });\n *     await q.exec();\n *     await q.exec(); // Throws an error because you can't execute a query twice\n *\n *     await q.clone().exec(); // Works\n *\n * @method clone\n * @return {Query} copy\n * @memberOf Query\n * @instance\n * @api public\n */\n\nQuery.prototype.clone = function clone() {\n  const model = this.model;\n  const collection = this.mongooseCollection;\n\n  const q = new this.constructor({}, {}, model, collection);\n\n  // Need to handle `sort()` separately because entries-style `sort()` syntax\n  // `sort([['prop1', 1]])` confuses mquery into losing the outer nested array.\n  // See gh-8159\n  const options = Object.assign({}, this.options);\n  if (options.sort != null) {\n    q.sort(options.sort);\n    delete options.sort;\n  }\n  q.setOptions(options);\n\n  q.op = this.op;\n  q._validateOp();\n  q._conditions = utils.clone(this._conditions);\n  q._fields = utils.clone(this._fields);\n  q._update = utils.clone(this._update, {\n    flattenDecimals: false\n  });\n  q._path = this._path;\n  q._distinct = this._distinct;\n  q._collection = this._collection;\n  q._mongooseOptions = this._mongooseOptions;\n\n  return q;\n};\n\n/**\n * Specifies a javascript function or expression to pass to MongoDBs query system.\n *\n * #### Example\n *\n *     query.$where('this.comments.length === 10 || this.name.length === 5')\n *\n *     // or\n *\n *     query.$where(function () {\n *       return this.comments.length === 10 || this.name.length === 5;\n *     })\n *\n * #### Note:\n *\n * Only use `$where` when you have a condition that cannot be met using other MongoDB operators like `$lt`.\n * **Be sure to read about all of [its caveats](https://docs.mongodb.org/manual/reference/operator/where/) before using.**\n *\n * @see $where https://docs.mongodb.org/manual/reference/operator/where/\n * @method $where\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @instance\n * @method $where\n * @api public\n */\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * #### Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @method where\n * @memberOf Query\n * @instance\n * @param {String|Object} [path]\n * @param {any} [val]\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a `$slice` projection for an array.\n *\n * #### Example\n *\n *     query.slice('comments', 5);\n *     query.slice('comments', -5);\n *     query.slice('comments', [10, 5]);\n *     query.where('comments').slice(5);\n *     query.where('comments').slice([-10, 5]);\n *\n * @method slice\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb https://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @see $slice https://docs.mongodb.org/manual/reference/projection/slice/#prj._S_slice\n * @api public\n */\n\nQuery.prototype.slice = function() {\n  if (arguments.length === 0) {\n    return this;\n  }\n\n  this._validate('slice');\n\n  let path;\n  let val;\n\n  if (arguments.length === 1) {\n    const arg = arguments[0];\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const keys = Object.keys(arg);\n      const numKeys = keys.length;\n      for (let i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n      return this;\n    }\n    this._ensurePath('slice');\n    path = this._path;\n    val = arguments[0];\n  } else if (arguments.length === 2) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n      path = this._path;\n      val = [arguments[0], arguments[1]];\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (arguments.length === 3) {\n    path = arguments[0];\n    val = [arguments[1], arguments[2]];\n  }\n\n  const p = {};\n  p[path] = { $slice: val };\n  this.select(p);\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nconst validOpsSet = new Set(validOps);\n\nQuery.prototype._validateOp = function() {\n  if (this.op != null && !validOpsSet.has(this.op)) {\n    this.error(new Error('Query has invalid `op`: \"' + this.op + '\"'));\n  }\n};\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * #### Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @method equals\n * @memberOf Query\n * @instance\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * #### Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }]);\n *\n * @see $or https://docs.mongodb.org/manual/reference/operator/or/\n * @method or\n * @memberOf Query\n * @instance\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * #### Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }]);\n *\n * @see $nor https://docs.mongodb.org/manual/reference/operator/nor/\n * @method nor\n * @memberOf Query\n * @instance\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * #### Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @method and\n * @memberOf Query\n * @instance\n * @see $and https://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a `$gt` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * #### Example\n *\n *     Thing.find().where('age').gt(21);\n *\n *     // or\n *     Thing.find().gt('age', 21);\n *\n * @method gt\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $gt https://docs.mongodb.org/manual/reference/operator/gt/\n * @api public\n */\n\n/**\n * Specifies a `$gte` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $gte https://docs.mongodb.org/manual/reference/operator/gte/\n * @api public\n */\n\n/**\n * Specifies a `$lt` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @see $lt https://docs.mongodb.org/manual/reference/operator/lt/\n * @api public\n */\n\n/**\n * Specifies a `$lte` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @see $lte https://docs.mongodb.org/manual/reference/operator/lte/\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$ne` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $ne https://docs.mongodb.org/manual/reference/operator/ne/\n * @method ne\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {any} val\n * @api public\n */\n\n/**\n * Specifies an `$in` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $in https://docs.mongodb.org/manual/reference/operator/in/\n * @method in\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies an `$nin` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $nin https://docs.mongodb.org/manual/reference/operator/nin/\n * @method nin\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies an `$all` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * #### Example:\n *\n *     MyModel.find().where('pets').all(['dog', 'cat', 'ferret']);\n *     // Equivalent:\n *     MyModel.find().all('pets', ['dog', 'cat', 'ferret']);\n *\n * @see $all https://docs.mongodb.org/manual/reference/operator/all/\n * @method all\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val\n * @api public\n */\n\n/**\n * Specifies a `$size` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * #### Example\n *\n *     const docs = await MyModel.where('tags').size(0).exec();\n *     assert(Array.isArray(docs));\n *     console.log('documents with 0 tags', docs);\n *\n * @see $size https://docs.mongodb.org/manual/reference/operator/size/\n * @method size\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$regex` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $regex https://docs.mongodb.org/manual/reference/operator/regex/\n * @method regex\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */\n\n/**\n * Specifies a `maxDistance` query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $maxDistance https://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @method maxDistance\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$mod` condition, filters documents for documents whose\n * `path` property is a number that is equal to `remainder` modulo `divisor`.\n *\n * #### Example\n *\n *     // All find products whose inventory is odd\n *     Product.find().mod('inventory', [2, 1]);\n *     Product.find().where('inventory').mod([2, 1]);\n *     // This syntax is a little strange, but supported.\n *     Product.find().where('inventory').mod(2, 1);\n *\n * @method mod\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Array} val must be of length 2, first element is `divisor`, 2nd element is `remainder`.\n * @return {Query} this\n * @see $mod https://docs.mongodb.org/manual/reference/operator/mod/\n * @api public\n */\n\nQuery.prototype.mod = function() {\n  let val;\n  let path;\n\n  if (arguments.length === 1) {\n    this._ensurePath('mod');\n    val = arguments[0];\n    path = this._path;\n  } else if (arguments.length === 2 && !Array.isArray(arguments[1])) {\n    this._ensurePath('mod');\n    val = [arguments[0], arguments[1]];\n    path = this._path;\n  } else if (arguments.length === 3) {\n    val = [arguments[1], arguments[2]];\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n};\n\n/**\n * Specifies an `$exists` condition\n *\n * #### Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @method exists\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Boolean} val\n * @return {Query} this\n * @see $exists https://docs.mongodb.org/manual/reference/operator/exists/\n * @api public\n */\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * #### Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @method elemMatch\n * @memberOf Query\n * @instance\n * @param {String|Object|Function} path\n * @param {Object|Function} filter\n * @return {Query} this\n * @see $elemMatch https://docs.mongodb.org/manual/reference/operator/elemMatch/\n * @api public\n */\n\n/**\n * Defines a `$within` or `$geoWithin` argument for geo-spatial queries.\n *\n * #### Example\n *\n *     query.where(path).within().box()\n *     query.where(path).within().circle()\n *     query.where(path).within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * **MUST** be used after `where()`.\n *\n * #### Note:\n *\n * As of Mongoose 3.7, `$geoWithin` is always used for queries. To change this behavior, see [Query.use$geoWithin](#query_Query-use%2524geoWithin).\n *\n * #### Note:\n *\n * In Mongoose 3.7, `within` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method within\n * @see $polygon https://docs.mongodb.org/manual/reference/operator/polygon/\n * @see $box https://docs.mongodb.org/manual/reference/operator/box/\n * @see $geometry https://docs.mongodb.org/manual/reference/operator/geometry/\n * @see $center https://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere https://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @memberOf Query\n * @instance\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies the maximum number of documents the query will return.\n *\n * #### Example\n *\n *     query.limit(20);\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @api public\n */\n\nQuery.prototype.limit = function limit(v) {\n  this._validate('limit');\n\n  if (typeof v === 'string') {\n    try {\n      v = castNumber(v);\n    } catch (err) {\n      throw new CastError('Number', v, 'limit');\n    }\n  }\n\n  this.options.limit = v;\n  return this;\n};\n\n/**\n * Specifies the number of documents to skip.\n *\n * #### Example\n *\n *     query.skip(100).limit(20);\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see cursor.skip https://docs.mongodb.org/manual/reference/method/cursor.skip/\n * @api public\n */\n\nQuery.prototype.skip = function skip(v) {\n  this._validate('skip');\n\n  if (typeof v === 'string') {\n    try {\n      v = castNumber(v);\n    } catch (err) {\n      throw new CastError('Number', v, 'skip');\n    }\n  }\n\n  this.options.skip = v;\n  return this;\n};\n\n/**\n * Specifies the maxScan option.\n *\n * #### Example\n *\n *     query.maxScan(100);\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see maxScan https://docs.mongodb.org/manual/reference/operator/maxScan/\n * @api public\n */\n\n/**\n * Specifies the batchSize option.\n *\n * #### Example\n *\n *     query.batchSize(100)\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @instance\n * @param {Number} val\n * @see batchSize https://docs.mongodb.org/manual/reference/method/cursor.batchSize/\n * @api public\n */\n\n/**\n * Specifies the `comment` option.\n *\n * #### Example\n *\n *     query.comment('login query')\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @instance\n * @param {String} val\n * @see comment https://docs.mongodb.org/manual/reference/operator/comment/\n * @api public\n */\n\n/**\n * Specifies this query as a `snapshot` query.\n *\n * #### Example\n *\n *     query.snapshot(); // true\n *     query.snapshot(true);\n *     query.snapshot(false);\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @method snapshot\n * @memberOf Query\n * @instance\n * @see snapshot https://docs.mongodb.org/manual/reference/operator/snapshot/\n * @return {Query} this\n * @api public\n */\n\n/**\n * Sets query hints.\n *\n * #### Example\n *\n *     query.hint({ indexA: 1, indexB: -1 });\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @method hint\n * @memberOf Query\n * @instance\n * @param {Object} val a hint object\n * @return {Query} this\n * @see $hint https://docs.mongodb.org/manual/reference/operator/hint/\n * @api public\n */\n\n/**\n * Get/set the current projection (AKA fields). Pass `null` to remove the\n * current projection.\n *\n * Unlike `projection()`, the `select()` function modifies the current\n * projection in place. This function overwrites the existing projection.\n *\n * #### Example:\n *\n *     const q = Model.find();\n *     q.projection(); // null\n *\n *     q.select('a b');\n *     q.projection(); // { a: 1, b: 1 }\n *\n *     q.projection({ c: 1 });\n *     q.projection(); // { c: 1 }\n *\n *     q.projection(null);\n *     q.projection(); // null\n *\n *\n * @method projection\n * @memberOf Query\n * @instance\n * @param {Object|null} arg\n * @return {Object} the current projection\n * @api public\n */\n\nQuery.prototype.projection = function(arg) {\n  if (arguments.length === 0) {\n    return this._fields;\n  }\n\n  this._fields = {};\n  this._userProvidedFields = {};\n  this.select(arg);\n  return this._fields;\n};\n\n/**\n * Specifies which document fields to include or exclude (also known as the query \"projection\")\n *\n * When using string syntax, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included. Lastly, if a path is prefixed with `+`, it forces inclusion of the path, which is useful for paths excluded at the [schema level](/docs/api.html#schematype_SchemaType-select).\n *\n * A projection _must_ be either inclusive or exclusive. In other words, you must\n * either list the fields to include (which excludes all others), or list the fields\n * to exclude (which implies all other fields are included). The [`_id` field is the only exception because MongoDB includes it by default](https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/#suppress-id-field).\n *\n * #### Example\n *\n *     // include a and b, exclude other fields\n *     query.select('a b');\n *     // Equivalent syntaxes:\n *     query.select(['a', 'b']);\n *     query.select({ a: 1, b: 1 });\n *\n *     // exclude c and d, include other fields\n *     query.select('-c -d');\n *\n *     // Use `+` to override schema-level `select: false` without making the\n *     // projection inclusive.\n *     const schema = new Schema({\n *       foo: { type: String, select: false },\n *       bar: String\n *     });\n *     // ...\n *     query.select('+foo'); // Override foo's `select: false` without excluding `bar`\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({ a: 1, b: 1 });\n *     query.select({ c: 0, d: 0 });\n *\n *     Additional calls to select can override the previous selection:\n *     query.select({ a: 1, b: 1 }).select({ b: 0 }); // selection is now { a: 1 }\n *     query.select({ a: 0, b: 0 }).select({ b: 1 }); // selection is now { a: 0 }\n *\n *\n * @method select\n * @memberOf Query\n * @instance\n * @param {Object|String|Array<String>} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\nQuery.prototype.select = function select() {\n  let arg = arguments[0];\n  if (!arg) return this;\n\n  if (arguments.length !== 1) {\n    throw new Error('Invalid select: select only takes 1 argument');\n  }\n\n  this._validate('select');\n\n  const fields = this._fields || (this._fields = {});\n  const userProvidedFields = this._userProvidedFields || (this._userProvidedFields = {});\n  let sanitizeProjection = undefined;\n  if (this.model != null && utils.hasUserDefinedProperty(this.model.db.options, 'sanitizeProjection')) {\n    sanitizeProjection = this.model.db.options.sanitizeProjection;\n  } else if (this.model != null && utils.hasUserDefinedProperty(this.model.base.options, 'sanitizeProjection')) {\n    sanitizeProjection = this.model.base.options.sanitizeProjection;\n  } else {\n    sanitizeProjection = this._mongooseOptions.sanitizeProjection;\n  }\n\n  function sanitizeValue(value) {\n    return typeof value === 'string' && sanitizeProjection ? value = 1 : value;\n  }\n\n  arg = parseProjection(arg);\n\n  if (utils.isObject(arg)) {\n    if (this.selectedInclusively()) {\n      Object.entries(arg).forEach(([key, value]) => {\n        if (value) {\n          // Add the field to the projection\n          fields[key] = userProvidedFields[key] = sanitizeValue(value);\n        } else {\n          // Remove the field from the projection\n          Object.keys(userProvidedFields).forEach(field => {\n            if (isSubpath(key, field)) {\n              delete fields[field];\n              delete userProvidedFields[field];\n            }\n          });\n        }\n      });\n    } else if (this.selectedExclusively()) {\n      Object.entries(arg).forEach(([key, value]) => {\n        if (!value) {\n          // Add the field to the projection\n          fields[key] = userProvidedFields[key] = sanitizeValue(value);\n        } else {\n          // Remove the field from the projection\n          Object.keys(userProvidedFields).forEach(field => {\n            if (isSubpath(key, field)) {\n              delete fields[field];\n              delete userProvidedFields[field];\n            }\n          });\n        }\n      });\n    } else {\n      const keys = Object.keys(arg);\n      for (let i = 0; i < keys.length; ++i) {\n        const value = arg[keys[i]];\n        fields[keys[i]] = sanitizeValue(value);\n        userProvidedFields[keys[i]] = sanitizeValue(value);\n      }\n    }\n    return this;\n  }\n\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n};\n\n/**\n * Determines the MongoDB nodes from which to read.\n *\n * #### Preferences:\n *\n * ```\n * primary - (default) Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n * secondary            Read from secondary if available, otherwise error.\n * primaryPreferred     Read from primary if available, otherwise a secondary.\n * secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n * nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n * ```\n *\n * Aliases\n *\n * ```\n * p   primary\n * pp  primaryPreferred\n * s   secondary\n * sp  secondaryPreferred\n * n   nearest\n * ```\n *\n * #### Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // read from secondaries with matching tags\n *     new Query().read('s', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }])\n *\n * Read more about how to use read preferences [here](https://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](https://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @method read\n * @memberOf Query\n * @instance\n * @param {String} pref one of the listed preference options or aliases\n * @param {Array} [tags] optional tags for this query\n * @see mongodb https://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver https://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = function read(pref, tags) {\n  // first cast into a ReadPreference object to support tags\n  const read = new ReadPreference(pref, tags);\n  this.options.readPreference = read;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype.toString = function toString() {\n  if (this.op === 'count' ||\n      this.op === 'countDocuments' ||\n      this.op === 'find' ||\n      this.op === 'findOne' ||\n      this.op === 'deleteMany' ||\n      this.op === 'deleteOne' ||\n      this.op === 'findOneAndDelete' ||\n      this.op === 'findOneAndRemove' ||\n      this.op === 'remove') {\n    return `${this.model.modelName}.${this.op}(${util.inspect(this._conditions)})`;\n  }\n  if (this.op === 'distinct') {\n    return `${this.model.modelName}.distinct('${this._distinct}', ${util.inspect(this._conditions)})`;\n  }\n  if (this.op === 'findOneAndReplace' ||\n      this.op === 'findOneAndUpdate' ||\n      this.op === 'replaceOne' ||\n      this.op === 'update' ||\n      this.op === 'updateMany' ||\n      this.op === 'updateOne') {\n    return `${this.model.modelName}.${this.op}(${util.inspect(this._conditions)}, ${util.inspect(this._update)})`;\n  }\n\n  // 'estimatedDocumentCount' or any others\n  return `${this.model.modelName}.${this.op}()`;\n};\n\n/**\n * Sets the [MongoDB session](https://docs.mongodb.com/manual/reference/server-sessions/)\n * associated with this query. Sessions are how you mark a query as part of a\n * [transaction](/docs/transactions.html).\n *\n * Calling `session(null)` removes the session from this query.\n *\n * #### Example:\n *\n *     const s = await mongoose.startSession();\n *     await mongoose.model('Person').findOne({ name: 'Axl Rose' }).session(s);\n *\n * @method session\n * @memberOf Query\n * @instance\n * @param {ClientSession} [session] from `await conn.startSession()`\n * @see Connection.prototype.startSession() /docs/api.html#connection_Connection-startSession\n * @see mongoose.startSession() /docs/api.html#mongoose_Mongoose-startSession\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.session = function session(v) {\n  if (v == null) {\n    delete this.options.session;\n  }\n  this.options.session = v;\n  return this;\n};\n\n/**\n * Sets the 3 write concern parameters for this query:\n *\n * - `w`: Sets the specified number of `mongod` servers, or tag set of `mongod` servers, that must acknowledge this write before this write is considered successful.\n * - `j`: Boolean, set to `true` to request acknowledgement that this operation has been persisted to MongoDB's on-disk journal.\n * - `wtimeout`: If [`w > 1`](/docs/api.html#query_Query-w), the maximum amount of time to wait for this write to propagate through the replica set before this operation fails. The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern` option](/docs/guide.html#writeConcern)\n *\n * #### Example:\n *\n *     // The 'majority' option means the `deleteOne()` promise won't resolve\n *     // until the `deleteOne()` has propagated to the majority of the replica set\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       writeConcern({ w: 'majority' });\n *\n * @method writeConcern\n * @memberOf Query\n * @instance\n * @param {Object} writeConcern the write concern value to set\n * @see mongodb https://mongodb.github.io/node-mongodb-native/3.1/api/global.html#WriteConcern\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.writeConcern = function writeConcern(val) {\n  if (val == null) {\n    delete this.options.writeConcern;\n    return this;\n  }\n  this.options.writeConcern = val;\n  return this;\n};\n\n/**\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\n * that must acknowledge this write before this write is considered successful.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.w` option](/docs/guide.html#writeConcern)\n *\n * #### Example:\n *\n *     // The 'majority' option means the `deleteOne()` promise won't resolve\n *     // until the `deleteOne()` has propagated to the majority of the replica set\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       w('majority');\n *\n * @method w\n * @memberOf Query\n * @instance\n * @param {String|number} val 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.w = function w(val) {\n  if (val == null) {\n    delete this.options.w;\n  }\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.w = val;\n  } else {\n    this.options.w = val;\n  }\n  return this;\n};\n\n/**\n * Requests acknowledgement that this operation has been persisted to MongoDB's\n * on-disk journal.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.j` option](/docs/guide.html#writeConcern)\n *\n * #### Example:\n *\n *     await mongoose.model('Person').deleteOne({ name: 'Ned Stark' }).j(true);\n *\n * @method j\n * @memberOf Query\n * @instance\n * @param {boolean} val\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.j = function j(val) {\n  if (val == null) {\n    delete this.options.j;\n  }\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.j = val;\n  } else {\n    this.options.j = val;\n  }\n  return this;\n};\n\n/**\n * If [`w > 1`](/docs/api.html#query_Query-w), the maximum amount of time to\n * wait for this write to propagate through the replica set before this\n * operation fails. The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndReplace()`\n * - `findOneAndUpdate()`\n * - `remove()`\n * - `update()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the schema's [`writeConcern.wtimeout` option](/docs/guide.html#writeConcern)\n *\n * #### Example:\n *\n *     // The `deleteOne()` promise won't resolve until this `deleteOne()` has\n *     // propagated to at least `w = 2` members of the replica set. If it takes\n *     // longer than 1 second, this `deleteOne()` will fail.\n *     await mongoose.model('Person').\n *       deleteOne({ name: 'Ned Stark' }).\n *       w(2).\n *       wtimeout(1000);\n *\n * @method wtimeout\n * @memberOf Query\n * @instance\n * @param {number} ms number of milliseconds to wait\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.wtimeout = function wtimeout(ms) {\n  if (ms == null) {\n    delete this.options.wtimeout;\n  }\n  if (this.options.writeConcern != null) {\n    this.options.writeConcern.wtimeout = ms;\n  } else {\n    this.options.wtimeout = ms;\n  }\n  return this;\n};\n\n/**\n * Sets the readConcern option for the query.\n *\n * #### Example:\n *\n *     new Query().readConcern('local')\n *     new Query().readConcern('l')  // same as local\n *\n *     new Query().readConcern('available')\n *     new Query().readConcern('a')  // same as available\n *\n *     new Query().readConcern('majority')\n *     new Query().readConcern('m')  // same as majority\n *\n *     new Query().readConcern('linearizable')\n *     new Query().readConcern('lz') // same as linearizable\n *\n *     new Query().readConcern('snapshot')\n *     new Query().readConcern('s')  // same as snapshot\n *\n *\n * #### Read Concern Level:\n *\n * ```\n * local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n * available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n * majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\n * linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\n * snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\n * ```\n *\n * Aliases\n *\n * ```\n * l   local\n * a   available\n * m   majority\n * lz  linearizable\n * s   snapshot\n * ```\n *\n * Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).\n *\n * @memberOf Query\n * @method readConcern\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\n * @return {Query} this\n * @api public\n */\n\n/**\n * Gets query options.\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.limit(10);\n *     query.setOptions({ maxTimeMS: 1000 });\n *     query.getOptions(); // { limit: 10, maxTimeMS: 1000 }\n *\n * @return {Object} the options\n * @api public\n */\n\nQuery.prototype.getOptions = function() {\n  return this.options;\n};\n\n/**\n * Sets query options. Some options only make sense for certain operations.\n *\n * #### Options:\n *\n * The following options are only for `find()`:\n *\n * - [tailable](https://www.mongodb.org/display/DOCS/Tailable+Cursors)\n * - [sort](https://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D)\n * - [limit](https://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D)\n * - [skip](https://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D)\n * - [allowDiskUse](https://docs.mongodb.com/manual/reference/method/cursor.allowDiskUse/)\n * - [batchSize](https://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D)\n * - [readPreference](https://docs.mongodb.org/manual/applications/replication/#read-preference)\n * - [hint](https://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint)\n * - [comment](https://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment)\n * - [snapshot](https://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D)\n * - [maxscan](https://docs.mongodb.org/v3.2/reference/operator/meta/maxScan/#metaOp._S_maxScan)\n *\n * The following options are only for write operations: `update()`, `updateOne()`, `updateMany()`, `replaceOne()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:\n *\n * - [upsert](https://docs.mongodb.com/manual/reference/method/db.collection.update/)\n * - [writeConcern](https://docs.mongodb.com/manual/reference/method/db.collection.update/)\n * - [timestamps](https://mongoosejs.com/docs/guide.html#timestamps): If `timestamps` is set in the schema, set this option to `false` to skip timestamps for that particular update. Has no effect if `timestamps` is not enabled in the schema options.\n * - overwriteDiscriminatorKey: allow setting the discriminator key in the update. Will use the correct discriminator schema if the update changes the discriminator key.\n *\n * The following options are only for `find()`, `findOne()`, `findById()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:\n *\n * - [lean](./api.html#query_Query-lean)\n * - [populate](/docs/populate.html)\n * - [projection](/docs/api/query.html#query_Query-projection)\n * - sanitizeProjection\n *\n * The following options are only for all operations **except** `update()`, `updateOne()`, `updateMany()`, `remove()`, `deleteOne()`, and `deleteMany()`:\n *\n * - [maxTimeMS](https://docs.mongodb.com/manual/reference/operator/meta/maxTimeMS/)\n *\n * The following options are for `findOneAndUpdate()` and `findOneAndRemove()`\n *\n * - rawResult\n *\n * The following options are for all operations:\n *\n * - [strict](/docs/guide.html#strict)\n * - [collation](https://docs.mongodb.com/manual/reference/collation/)\n * - [session](https://docs.mongodb.com/manual/reference/server-sessions/)\n * - [explain](https://docs.mongodb.com/manual/reference/method/cursor.explain/)\n *\n * @param {Object} options\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.setOptions = function(options, overwrite) {\n  // overwrite is only for internal use\n  if (overwrite) {\n    // ensure that _mongooseOptions & options are two different objects\n    this._mongooseOptions = (options && utils.clone(options)) || {};\n    this.options = options || {};\n\n    if ('populate' in options) {\n      this.populate(this._mongooseOptions);\n    }\n    return this;\n  }\n  if (options == null) {\n    return this;\n  }\n  if (typeof options !== 'object') {\n    throw new Error('Options must be an object, got \"' + options + '\"');\n  }\n\n  if (Array.isArray(options.populate)) {\n    const populate = options.populate;\n    delete options.populate;\n    const _numPopulate = populate.length;\n    for (let i = 0; i < _numPopulate; ++i) {\n      this.populate(populate[i]);\n    }\n  }\n\n  if ('setDefaultsOnInsert' in options) {\n    this._mongooseOptions.setDefaultsOnInsert = options.setDefaultsOnInsert;\n    delete options.setDefaultsOnInsert;\n  }\n  if ('overwriteDiscriminatorKey' in options) {\n    this._mongooseOptions.overwriteDiscriminatorKey = options.overwriteDiscriminatorKey;\n    delete options.overwriteDiscriminatorKey;\n  }\n  if ('sanitizeProjection' in options) {\n    if (options.sanitizeProjection && !this._mongooseOptions.sanitizeProjection) {\n      sanitizeProjection(this._fields);\n    }\n\n    this._mongooseOptions.sanitizeProjection = options.sanitizeProjection;\n    delete options.sanitizeProjection;\n  }\n  if ('sanitizeFilter' in options) {\n    this._mongooseOptions.sanitizeFilter = options.sanitizeFilter;\n    delete options.sanitizeFilter;\n  }\n\n  if ('defaults' in options) {\n    this._mongooseOptions.defaults = options.defaults;\n    // deleting options.defaults will cause 7287 to fail\n  }\n\n  if (typeof options.limit === 'string') {\n    try {\n      options.limit = castNumber(options.limit);\n    } catch (err) {\n      throw new CastError('Number', options.limit, 'limit');\n    }\n  }\n  if (typeof options.skip === 'string') {\n    try {\n      options.skip = castNumber(options.skip);\n    } catch (err) {\n      throw new CastError('Number', options.skip, 'skip');\n    }\n  }\n\n  // set arbitrary options\n  for (const key of Object.keys(options)) {\n    if (queryOptionMethods.has(key)) {\n      const args = Array.isArray(options[key]) ?\n        options[key] :\n        [options[key]];\n      this[key].apply(this, args);\n    } else {\n      this.options[key] = options[key];\n    }\n  }\n\n  return this;\n};\n\n/**\n * Sets the [`explain` option](https://docs.mongodb.com/manual/reference/method/cursor.explain/),\n * which makes this query return detailed execution stats instead of the actual\n * query result. This method is useful for determining what index your queries\n * use.\n *\n * Calling `query.explain(v)` is equivalent to `query.setOptions({ explain: v })`\n *\n * #### Example:\n *\n *     const query = new Query();\n *     const res = await query.find({ a: 1 }).explain('queryPlanner');\n *     console.log(res);\n *\n * @param {String} [verbose] The verbosity mode. Either 'queryPlanner', 'executionStats', or 'allPlansExecution'. The default is 'queryPlanner'\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.explain = function(verbose) {\n  if (arguments.length === 0) {\n    this.options.explain = true;\n  } else if (verbose === false) {\n    delete this.options.explain;\n  } else {\n    this.options.explain = verbose;\n  }\n  return this;\n};\n\n/**\n * Sets the [`allowDiskUse` option](https://docs.mongodb.com/manual/reference/method/cursor.allowDiskUse/),\n * which allows the MongoDB server to use more than 100 MB for this query's `sort()`. This option can\n * let you work around `QueryExceededMemoryLimitNoDiskUseAllowed` errors from the MongoDB server.\n *\n * Note that this option requires MongoDB server >= 4.4. Setting this option is a no-op for MongoDB 4.2\n * and earlier.\n *\n * Calling `query.allowDiskUse(v)` is equivalent to `query.setOptions({ allowDiskUse: v })`\n *\n * #### Example:\n *\n *     await query.find().sort({ name: 1 }).allowDiskUse(true);\n *     // Equivalent:\n *     await query.find().sort({ name: 1 }).allowDiskUse();\n *\n * @param {Boolean} [v] Enable/disable `allowDiskUse`. If called with 0 arguments, sets `allowDiskUse: true`\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.allowDiskUse = function(v) {\n  if (arguments.length === 0) {\n    this.options.allowDiskUse = true;\n  } else if (v === false) {\n    delete this.options.allowDiskUse;\n  } else {\n    this.options.allowDiskUse = v;\n  }\n  return this;\n};\n\n/**\n * Sets the [maxTimeMS](https://docs.mongodb.com/manual/reference/method/cursor.maxTimeMS/)\n * option. This will tell the MongoDB server to abort if the query or write op\n * has been running for more than `ms` milliseconds.\n *\n * Calling `query.maxTimeMS(v)` is equivalent to `query.setOptions({ maxTimeMS: v })`\n *\n * #### Example:\n *\n *     const query = new Query();\n *     // Throws an error 'operation exceeded time limit' as long as there's\n *     // >= 1 doc in the queried collection\n *     const res = await query.find({ $where: 'sleep(1000) || true' }).maxTimeMS(100);\n *\n * @param {Number} [ms] The number of milliseconds\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.maxTimeMS = function(ms) {\n  this.options.maxTimeMS = ms;\n  return this;\n};\n\n/**\n * Returns the current query filter (also known as conditions) as a [POJO](https://masteringjs.io/tutorials/fundamentals/pojo).\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 }).where('b').gt(2);\n *     query.getFilter(); // { a: 1, b: { $gt: 2 } }\n *\n * @return {Object} current query filter\n * @api public\n */\n\nQuery.prototype.getFilter = function() {\n  return this._conditions;\n};\n\n/**\n * Returns the current query filter. Equivalent to `getFilter()`.\n *\n * You should use `getFilter()` instead of `getQuery()` where possible. `getQuery()`\n * will likely be deprecated in a future release.\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 }).where('b').gt(2);\n *     query.getQuery(); // { a: 1, b: { $gt: 2 } }\n *\n * @return {Object} current query filter\n * @api public\n */\n\nQuery.prototype.getQuery = function() {\n  return this._conditions;\n};\n\n/**\n * Sets the query conditions to the provided JSON object.\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.find({ a: 1 })\n *     query.setQuery({ a: 2 });\n *     query.getQuery(); // { a: 2 }\n *\n * @param {Object} new query conditions\n * @return {undefined}\n * @api public\n */\n\nQuery.prototype.setQuery = function(val) {\n  this._conditions = val;\n};\n\n/**\n * Returns the current update operations as a JSON object.\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.update({}, { $set: { a: 5 } });\n *     query.getUpdate(); // { $set: { a: 5 } }\n *\n * @return {Object} current update operations\n * @api public\n */\n\nQuery.prototype.getUpdate = function() {\n  return this._update;\n};\n\n/**\n * Sets the current update operation to new value.\n *\n * #### Example:\n *\n *     const query = new Query();\n *     query.update({}, { $set: { a: 5 } });\n *     query.setUpdate({ $set: { b: 6 } });\n *     query.getUpdate(); // { $set: { b: 6 } }\n *\n * @param {Object} new update operation\n * @return {undefined}\n * @api public\n */\n\nQuery.prototype.setUpdate = function(val) {\n  this._update = val;\n};\n\n/**\n * Returns fields selection for this query.\n *\n * @method _fieldsForExec\n * @return {Object}\n * @api private\n * @receiver Query\n */\n\nQuery.prototype._fieldsForExec = function() {\n  return utils.clone(this._fields);\n};\n\n\n/**\n * Return an update document with corrected `$set` operations.\n *\n * @method _updateForExec\n * @api private\n * @receiver Query\n */\n\nQuery.prototype._updateForExec = function() {\n  const update = utils.clone(this._update, {\n    transform: false,\n    depopulate: true\n  });\n  const ops = Object.keys(update);\n  let i = ops.length;\n  const ret = {};\n\n  while (i--) {\n    const op = ops[i];\n\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = update[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Makes sure _path is set.\n *\n * @method _ensurePath\n * @param {String} method\n * @api private\n * @receiver Query\n */\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @method canMerge\n * @memberOf Query\n * @instance\n * @param {Object} conds\n * @return {Boolean}\n * @api private\n */\n\n/**\n * Returns default options for this query.\n *\n * @param {Model} model\n * @api private\n */\n\nQuery.prototype._optionsForExec = function(model) {\n  const options = utils.clone(this.options);\n  delete options.populate;\n  model = model || this.model;\n\n  if (!model) {\n    return options;\n  }\n\n  // Apply schema-level `writeConcern` option\n  applyWriteConcern(model.schema, options);\n\n  const readPreference = model &&\n  model.schema &&\n  model.schema.options &&\n  model.schema.options.read;\n  if (!('readPreference' in options) && readPreference) {\n    options.readPreference = readPreference;\n  }\n\n  if (options.upsert !== void 0) {\n    options.upsert = !!options.upsert;\n  }\n  if (options.writeConcern) {\n    if (options.j) {\n      options.writeConcern.j = options.j;\n      delete options.j;\n    }\n    if (options.w) {\n      options.writeConcern.w = options.w;\n      delete options.w;\n    }\n    if (options.wtimeout) {\n      options.writeConcern.wtimeout = options.wtimeout;\n      delete options.wtimeout;\n    }\n  }\n  return options;\n};\n\n/**\n * Sets the lean option.\n *\n * Documents returned from queries with the `lean` option enabled are plain\n * javascript objects, not [Mongoose Documents](/api/document.html). They have no\n * `save` method, getters/setters, virtuals, or other Mongoose features.\n *\n * #### Example:\n *\n *     new Query().lean() // true\n *     new Query().lean(true)\n *     new Query().lean(false)\n *\n *     const docs = await Model.find().lean();\n *     docs[0] instanceof mongoose.Document; // false\n *\n * [Lean is great for high-performance, read-only cases](/docs/tutorials/lean.html),\n * especially when combined\n * with [cursors](/docs/queries.html#streaming).\n *\n * If you need virtuals, getters/setters, or defaults with `lean()`, you need\n * to use a plugin. See:\n *\n * - [mongoose-lean-virtuals](https://plugins.mongoosejs.io/plugins/lean-virtuals)\n * - [mongoose-lean-getters](https://plugins.mongoosejs.io/plugins/lean-getters)\n * - [mongoose-lean-defaults](https://www.npmjs.com/package/mongoose-lean-defaults)\n *\n * @param {Boolean|Object} bool defaults to true\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.lean = function(v) {\n  this._mongooseOptions.lean = arguments.length ? v : true;\n  return this;\n};\n\n/**\n * Adds a `$set` to this query's update without changing the operation.\n * This is useful for query middleware so you can add an update regardless\n * of whether you use `updateOne()`, `updateMany()`, `findOneAndUpdate()`, etc.\n *\n * #### Example:\n *\n *     // Updates `{ $set: { updatedAt: new Date() } }`\n *     new Query().updateOne({}, {}).set('updatedAt', new Date());\n *     new Query().updateMany({}, {}).set({ updatedAt: new Date() });\n *\n * @param {String|Object} path path or object of key/value pairs to set\n * @param {Any} [val] the value to set\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.set = function(path, val) {\n  if (typeof path === 'object') {\n    const keys = Object.keys(path);\n    for (const key of keys) {\n      this.set(key, path[key]);\n    }\n    return this;\n  }\n\n  this._update = this._update || {};\n  this._update.$set = this._update.$set || {};\n  this._update.$set[path] = val;\n  return this;\n};\n\n/**\n * For update operations, returns the value of a path in the update's `$set`.\n * Useful for writing getters/setters that can work with both update operations\n * and `save()`.\n *\n * #### Example:\n *\n *     const query = Model.updateOne({}, { $set: { name: 'Jean-Luc Picard' } });\n *     query.get('name'); // 'Jean-Luc Picard'\n *\n * @param {String|Object} path path or object of key/value pairs to get\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.get = function get(path) {\n  const update = this._update;\n  if (update == null) {\n    return void 0;\n  }\n  const $set = update.$set;\n  if ($set == null) {\n    return update[path];\n  }\n\n  if (utils.hasUserDefinedProperty(update, path)) {\n    return update[path];\n  }\n  if (utils.hasUserDefinedProperty($set, path)) {\n    return $set[path];\n  }\n\n  return void 0;\n};\n\n/**\n * Gets/sets the error flag on this query. If this flag is not null or\n * undefined, the `exec()` promise will reject without executing.\n *\n * #### Example:\n *\n *     Query().error(); // Get current error value\n *     Query().error(null); // Unset the current error\n *     Query().error(new Error('test')); // `exec()` will resolve with test\n *     Schema.pre('find', function() {\n *       if (!this.getQuery().userId) {\n *         this.error(new Error('Not allowed to query without setting userId'));\n *       }\n *     });\n *\n * Note that query casting runs **after** hooks, so cast errors will override\n * custom errors.\n *\n * #### Example:\n *     const TestSchema = new Schema({ num: Number });\n *     const TestModel = db.model('Test', TestSchema);\n *     TestModel.find({ num: 'not a number' }).error(new Error('woops')).exec(function(error) {\n *       // `error` will be a cast error because `num` failed to cast\n *     });\n *\n * @param {Error|null} err if set, `exec()` will fail fast before sending the query to MongoDB\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.error = function error(err) {\n  if (arguments.length === 0) {\n    return this._error;\n  }\n\n  this._error = err;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._unsetCastError = function _unsetCastError() {\n  if (this._error != null && !(this._error instanceof CastError)) {\n    return;\n  }\n  return this.error(null);\n};\n\n/**\n * Getter/setter around the current mongoose-specific options for this query\n * Below are the current Mongoose-specific options.\n *\n * - `populate`: an array representing what paths will be populated. Should have one entry for each call to [`Query.prototype.populate()`](/docs/api.html#query_Query-populate)\n * - `lean`: if truthy, Mongoose will not [hydrate](/docs/api.html#model_Model.hydrate) any documents that are returned from this query. See [`Query.prototype.lean()`](/docs/api.html#query_Query-lean) for more information.\n * - `strict`: controls how Mongoose handles keys that aren't in the schema for updates. This option is `true` by default, which means Mongoose will silently strip any paths in the update that aren't in the schema. See the [`strict` mode docs](/docs/guide.html#strict) for more information.\n * - `strictQuery`: controls how Mongoose handles keys that aren't in the schema for the query `filter`. This option is `false` by default for backwards compatibility, which means Mongoose will allow `Model.find({ foo: 'bar' })` even if `foo` is not in the schema. See the [`strictQuery` docs](/docs/guide.html#strictQuery) for more information.\n * - `nearSphere`: use `$nearSphere` instead of `near()`. See the [`Query.prototype.nearSphere()` docs](/docs/api.html#query_Query-nearSphere)\n *\n * Mongoose maintains a separate object for internal options because\n * Mongoose sends `Query.prototype.options` to the MongoDB server, and the\n * above options are not relevant for the MongoDB server.\n *\n * @param {Object} options if specified, overwrites the current options\n * @return {Object} the options\n * @api public\n */\n\nQuery.prototype.mongooseOptions = function(v) {\n  if (arguments.length > 0) {\n    this._mongooseOptions = v;\n  }\n  return this._mongooseOptions;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._castConditions = function() {\n  let sanitizeFilterOpt = undefined;\n  if (this.model != null && utils.hasUserDefinedProperty(this.model.db.options, 'sanitizeFilter')) {\n    sanitizeFilterOpt = this.model.db.options.sanitizeFilter;\n  } else if (this.model != null && utils.hasUserDefinedProperty(this.model.base.options, 'sanitizeFilter')) {\n    sanitizeFilterOpt = this.model.base.options.sanitizeFilter;\n  } else {\n    sanitizeFilterOpt = this._mongooseOptions.sanitizeFilter;\n  }\n\n  if (sanitizeFilterOpt) {\n    sanitizeFilter(this._conditions);\n  }\n\n  try {\n    this.cast(this.model);\n    this._unsetCastError();\n  } catch (err) {\n    this.error(err);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _castArrayFilters(query) {\n  try {\n    castArrayFilters(query);\n  } catch (err) {\n    query.error(err);\n  }\n}\n\n/**\n * Thunk around find()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._find = wrapThunk(function(callback) {\n\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n\n  const fields = this._fieldsForExec();\n  const mongooseOptions = this._mongooseOptions;\n  const _this = this;\n  const userProvidedFields = _this._userProvidedFields || {};\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n  applyGlobalDiskUse(this.options, this.model);\n\n  // Separate options to pass down to `completeMany()` in case we need to\n  // set a session on the document\n  const completeManyOptions = Object.assign({}, {\n    session: this && this.options && this.options.session || null\n  });\n\n  const cb = (err, docs) => {\n    if (err) {\n      return callback(err);\n    }\n\n    if (docs.length === 0) {\n      return callback(null, docs);\n    }\n    if (this.options.explain) {\n      return callback(null, docs);\n    }\n    if (!mongooseOptions.populate) {\n      const versionKey = _this.schema.options.versionKey;\n      if (mongooseOptions.lean && mongooseOptions.lean.versionKey === false && versionKey) {\n        docs.forEach((doc) => {\n          if (versionKey in doc) {\n            delete doc[versionKey];\n          }\n        });\n      }\n      return mongooseOptions.lean ?\n        callback(null, docs) :\n        completeMany(_this.model, docs, fields, userProvidedFields, completeManyOptions, callback);\n    }\n\n    const pop = helpers.preparePopulationOptionsMQ(_this, mongooseOptions);\n\n    if (mongooseOptions.lean) {\n      return _this.model.populate(docs, pop, callback);\n    }\n\n    completeMany(_this.model, docs, fields, userProvidedFields, completeManyOptions, (err, docs) => {\n      if (err != null) {\n        return callback(err);\n      }\n      _this.model.populate(docs, pop, callback);\n    });\n  };\n\n  const options = this._optionsForExec();\n  options.projection = this._fieldsForExec();\n  const filter = this._conditions;\n\n  this._collection.collection.find(filter, options, (err, cursor) => {\n    if (err != null) {\n      return cb(err);\n    }\n\n    if (options.explain) {\n      return cursor.explain(cb);\n    }\n    try {\n      return cursor.toArray(cb);\n    } catch (err) {\n      return cb(err);\n    }\n  });\n});\n\n/**\n * Find all documents that match `selector`. The result will be an array of documents.\n *\n * If there are too many documents in the result to fit in memory, use\n * [`Query.prototype.cursor()`](api.html#query_Query-cursor)\n *\n * #### Example\n *\n *     // Using async/await\n *     const arr = await Movie.find({ year: { $gte: 1980, $lte: 1989 } });\n *\n *     // Using callbacks\n *     Movie.find({ year: { $gte: 1980, $lte: 1989 } }, function(err, arr) {});\n *\n * @param {Object|ObjectId} [filter] mongodb selector. If not specified, returns all documents.\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function(conditions, callback) {\n  this.op = 'find';\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'find'));\n  }\n\n  // if we don't have a callback, then just return the query object\n  if (!callback) {\n    return Query.base.find.call(this);\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\nQuery.prototype.merge = function(source) {\n  if (!source) {\n    return this;\n  }\n\n  const opts = { overwrite: true };\n\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions, opts);\n    }\n\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields, opts);\n    }\n\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options, opts);\n    }\n\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n\n    utils.merge(this._mongooseOptions, source._mongooseOptions);\n\n    return this;\n  }\n\n  // plain object\n  utils.merge(this._conditions, source, opts);\n\n  return this;\n};\n\n/**\n * Adds a collation to this op (MongoDB 3.4 and up)\n *\n * @param {Object} value\n * @return {Query} this\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\n * @api public\n */\n\nQuery.prototype.collation = function(value) {\n  if (this.options == null) {\n    this.options = {};\n  }\n  this.options.collation = value;\n  return this;\n};\n\n/**\n * Hydrate a single doc from `findOne()`, `findOneAndUpdate()`, etc.\n *\n * @api private\n */\n\nQuery.prototype._completeOne = function(doc, res, callback) {\n  if (!doc && !this.options.rawResult) {\n    return callback(null, null);\n  }\n\n  const model = this.model;\n  const projection = utils.clone(this._fields);\n  const userProvidedFields = this._userProvidedFields || {};\n  // `populate`, `lean`\n  const mongooseOptions = this._mongooseOptions;\n  // `rawResult`\n  const options = this.options;\n\n  if (options.explain) {\n    return callback(null, doc);\n  }\n\n  if (!mongooseOptions.populate) {\n    const versionKey = this.schema.options.versionKey;\n    if (mongooseOptions.lean && mongooseOptions.lean.versionKey === false && versionKey) {\n      if (versionKey in doc) {\n        delete doc[versionKey];\n      }\n    }\n    return mongooseOptions.lean ?\n      _completeOneLean(doc, res, options, callback) :\n      completeOne(model, doc, res, options, projection, userProvidedFields,\n        null, callback);\n  }\n\n  const pop = helpers.preparePopulationOptionsMQ(this, this._mongooseOptions);\n  if (mongooseOptions.lean) {\n    return model.populate(doc, pop, (err, doc) => {\n      if (err != null) {\n        return callback(err);\n      }\n      _completeOneLean(doc, res, options, callback);\n    });\n  }\n\n  completeOne(model, doc, res, options, projection, userProvidedFields, [], (err, doc) => {\n    if (err != null) {\n      return callback(err);\n    }\n    model.populate(doc, pop, callback);\n  });\n};\n\n/**\n * Thunk around findOne()\n *\n * @param {Function} [callback]\n * @see findOne https://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @api private\n */\n\nQuery.prototype._findOne = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error()) {\n    callback(this.error());\n    return null;\n  }\n\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n  applyGlobalMaxTimeMS(this.options, this.model);\n  applyGlobalDiskUse(this.options, this.model);\n\n  // don't pass in the conditions because we already merged them in\n  Query.base.findOne.call(this, {}, (err, doc) => {\n    if (err) {\n      callback(err);\n      return null;\n    }\n\n    this._completeOne(doc, null, _wrapThunkCallback(this, callback));\n  });\n});\n\n/**\n * Declares the query a findOne operation. When executed, the first found document is passed to the callback.\n *\n * Passing a `callback` executes the query. The result of the query is a single document.\n *\n * * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\n * mongoose will send an empty `findOne` command to MongoDB, which will return\n * an arbitrary document. If you're querying by `_id`, use `Model.findById()`\n * instead.\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * #### Example\n *\n *     const query  = Kitten.where({ color: 'white' });\n *     query.findOne(function (err, kitten) {\n *       if (err) return handleError(err);\n *       if (kitten) {\n *         // doc may be null if no document matched\n *       }\n *     });\n *\n * @param {Object} [filter] mongodb selector\n * @param {Object} [projection] optional fields to return\n * @param {Object} [options] see [`setOptions()`](https://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see findOne https://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @see Query.select #query_Query-select\n * @api public\n */\n\nQuery.prototype.findOne = function(conditions, projection, options, callback) {\n  this.op = 'findOne';\n  this._validateOp();\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = null;\n    projection = null;\n    options = null;\n  } else if (typeof projection === 'function') {\n    callback = projection;\n    options = null;\n    projection = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  // make sure we don't send in the whole Document to merge()\n  conditions = utils.toObject(conditions);\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (projection) {\n    this.select(projection);\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'findOne'));\n  }\n\n  if (!callback) {\n    // already merged in the conditions, don't need to send them in.\n    return Query.base.findOne.call(this);\n  }\n\n  this.exec(callback);\n  return this;\n};\n\n/**\n * Thunk around count()\n *\n * @param {Function} [callback]\n * @see count https://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api private\n */\n\nQuery.prototype._count = wrapThunk(function(callback) {\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    this.error(err);\n  }\n\n  if (this.error()) {\n    return callback(this.error());\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n  applyGlobalDiskUse(this.options, this.model);\n\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n\n  this._collection.count(conds, options, utils.tick(callback));\n});\n\n/**\n * Thunk around countDocuments()\n *\n * @param {Function} [callback]\n * @see countDocuments https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n * @api private\n */\n\nQuery.prototype._countDocuments = wrapThunk(function(callback) {\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    this.error(err);\n  }\n\n  if (this.error()) {\n    return callback(this.error());\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n  applyGlobalDiskUse(this.options, this.model);\n\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n\n  this._collection.collection.countDocuments(conds, options, utils.tick(callback));\n});\n\n/**\n * Thunk around estimatedDocumentCount()\n *\n * @param {Function} [callback]\n * @see estimatedDocumentCount https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount\n * @api private\n */\n\nQuery.prototype._estimatedDocumentCount = wrapThunk(function(callback) {\n  if (this.error()) {\n    return callback(this.error());\n  }\n\n  const options = this._optionsForExec();\n\n  this._collection.collection.estimatedDocumentCount(options, utils.tick(callback));\n});\n\n/**\n * Specifies this query as a `count` query.\n *\n * This method is deprecated. If you want to count the number of documents in\n * a collection, e.g. `count({})`, use the [`estimatedDocumentCount()` function](/docs/api.html#query_Query-estimatedDocumentCount)\n * instead. Otherwise, use the [`countDocuments()`](/docs/api.html#query_Query-countDocuments) function instead.\n *\n * Passing a `callback` executes the query.\n *\n * This function triggers the following middleware.\n *\n * - `count()`\n *\n * #### Example:\n *\n *     const countQuery = model.where({ 'color': 'black' }).count();\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @deprecated\n * @param {Object} [filter] count documents that match this object\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see count https://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api public\n */\n\nQuery.prototype.count = function(filter, callback) {\n  this.op = 'count';\n  this._validateOp();\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = undefined;\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/**\n * Specifies this query as a `estimatedDocumentCount()` query. Faster than\n * using `countDocuments()` for large collections because\n * `estimatedDocumentCount()` uses collection metadata rather than scanning\n * the entire collection.\n *\n * `estimatedDocumentCount()` does **not** accept a filter. `Model.find({ foo: bar }).estimatedDocumentCount()`\n * is equivalent to `Model.find().estimatedDocumentCount()`\n *\n * This function triggers the following middleware.\n *\n * - `estimatedDocumentCount()`\n *\n * #### Example:\n *\n *     await Model.find().estimatedDocumentCount();\n *\n * @param {Object} [options] passed transparently to the [MongoDB driver](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount)\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see estimatedDocumentCount https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount\n * @api public\n */\n\nQuery.prototype.estimatedDocumentCount = function(options, callback) {\n  this.op = 'estimatedDocumentCount';\n  this._validateOp();\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  if (typeof options === 'object' && options != null) {\n    this.setOptions(options);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/**\n * Specifies this query as a `countDocuments()` query. Behaves like `count()`,\n * except it always does a full collection scan when passed an empty filter `{}`.\n *\n * There are also minor differences in how `countDocuments()` handles\n * [`$where` and a couple geospatial operators](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments).\n * versus `count()`.\n *\n * Passing a `callback` executes the query.\n *\n * This function triggers the following middleware.\n *\n * - `countDocuments()`\n *\n * #### Example:\n *\n *     const countQuery = model.where({ 'color': 'black' }).countDocuments();\n *\n *     query.countDocuments({ color: 'black' }).count(callback);\n *\n *     query.countDocuments({ color: 'black' }, callback);\n *\n *     query.where('color', 'black').countDocuments(function(err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     });\n *\n * The `countDocuments()` function is similar to `count()`, but there are a\n * [few operators that `countDocuments()` does not support](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments).\n * Below are the operators that `count()` supports but `countDocuments()` does not,\n * and the suggested replacement:\n *\n * - `$where`: [`$expr`](https://docs.mongodb.com/manual/reference/operator/query/expr/)\n * - `$near`: [`$geoWithin`](https://docs.mongodb.com/manual/reference/operator/query/geoWithin/) with [`$center`](https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center)\n * - `$nearSphere`: [`$geoWithin`](https://docs.mongodb.com/manual/reference/operator/query/geoWithin/) with [`$centerSphere`](https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere)\n *\n * @param {Object} [filter] mongodb selector\n * @param {Object} [options]\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see countDocuments https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\n * @api public\n */\n\nQuery.prototype.countDocuments = function(conditions, options, callback) {\n  this.op = 'countDocuments';\n  this._validateOp();\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = undefined;\n    options = undefined;\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  if (typeof options === 'object' && options != null) {\n    this.setOptions(options);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/**\n * Thunk around distinct()\n *\n * @param {Function} [callback]\n * @see distinct https://docs.mongodb.org/manual/reference/method/db.collection.distinct/\n * @api private\n */\n\nQuery.prototype.__distinct = wrapThunk(function __distinct(callback) {\n  this._castConditions();\n\n  if (this.error()) {\n    callback(this.error());\n    return null;\n  }\n\n  applyGlobalMaxTimeMS(this.options, this.model);\n  applyGlobalDiskUse(this.options, this.model);\n\n  const options = this._optionsForExec();\n\n  // don't pass in the conditions because we already merged them in\n  this._collection.collection.\n    distinct(this._distinct, this._conditions, options, callback);\n});\n\n/**\n * Declares or executes a distinct() operation.\n *\n * Passing a `callback` executes the query.\n *\n * This function does not trigger any middleware.\n *\n * #### Example\n *\n *     distinct(field, conditions, callback)\n *     distinct(field, conditions)\n *     distinct(field, callback)\n *     distinct(field)\n *     distinct(callback)\n *     distinct()\n *\n * @param {String} [field]\n * @param {Object|Query} [filter]\n * @param {Function} [callback] optional params are (error, arr)\n * @return {Query} this\n * @see distinct https://docs.mongodb.org/manual/reference/method/db.collection.distinct/\n * @api public\n */\n\nQuery.prototype.distinct = function(field, conditions, callback) {\n  this.op = 'distinct';\n  this._validateOp();\n  if (!callback) {\n    if (typeof conditions === 'function') {\n      callback = conditions;\n      conditions = undefined;\n    } else if (typeof field === 'function') {\n      callback = field;\n      field = undefined;\n      conditions = undefined;\n    }\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'distinct'));\n  }\n\n  if (field != null) {\n    this._distinct = field;\n  }\n\n  if (callback != null) {\n    this.exec(callback);\n  }\n\n  return this;\n};\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The\n * sort order of each path is ascending unless the path name is prefixed with `-`\n * which will be treated as descending.\n *\n * #### Example\n *\n *     // sort by \"field\" ascending and \"test\" descending\n *     query.sort({ field: 'asc', test: -1 });\n *\n *     // equivalent\n *     query.sort('field -test');\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see cursor.sort https://docs.mongodb.org/manual/reference/method/cursor.sort/\n * @api public\n */\n\nQuery.prototype.sort = function(arg) {\n  if (arguments.length > 1) {\n    throw new Error('sort() only takes 1 Argument');\n  }\n\n  return Query.base.sort.call(this, arg);\n};\n\n/**\n * Declare and/or execute this query as a remove() operation. `remove()` is\n * deprecated, you should use [`deleteOne()`](#query_Query-deleteOne)\n * or [`deleteMany()`](#query_Query-deleteMany) instead.\n *\n * This function does not trigger any middleware\n *\n * #### Example\n *\n *     Character.remove({ name: /Stark/ }, callback);\n *\n * This function calls the MongoDB driver's [`Collection#remove()` function](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#remove).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * #### Example\n *\n *     const res = await Character.remove({ name: /Stark/ });\n *     // Number of docs deleted\n *     res.deletedCount;\n *\n * #### Note\n *\n * Calling `remove()` creates a [Mongoose query](./queries.html), and a query\n * does not execute until you either pass a callback, call [`Query#then()`](#query_Query-then),\n * or call [`Query#exec()`](#query_Query-exec).\n *\n *     // not executed\n *     const query = Character.remove({ name: /Stark/ });\n *\n *     // executed\n *     Character.remove({ name: /Stark/ }, callback);\n *     Character.remove({ name: /Stark/ }).remove(callback);\n *\n *     // executed without a callback\n *     Character.exec();\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\n * @return {Query} this\n * @deprecated\n * @see deleteWriteOpResult https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\n * @see MongoDB driver remove https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#remove\n * @api public\n */\n\nQuery.prototype.remove = function(filter, callback) {\n  this.op = 'remove';\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'remove'));\n  }\n\n  if (!callback) {\n    return Query.base.remove.call(this);\n  }\n\n  this.exec(callback);\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._remove = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n\n  return Query.base.remove.call(this, callback);\n});\n\n/**\n * Declare and/or execute this query as a `deleteOne()` operation. Works like\n * remove, except it deletes at most one document regardless of the `single`\n * option.\n *\n * This function triggers `deleteOne` middleware.\n *\n * #### Example\n *\n *     await Character.deleteOne({ name: 'Eddard Stark' });\n *\n *     // Using callbacks:\n *     Character.deleteOne({ name: 'Eddard Stark' }, callback);\n *\n * This function calls the MongoDB driver's [`Collection#deleteOne()` function](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteOne).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * #### Example\n *\n *     const res = await Character.deleteOne({ name: 'Eddard Stark' });\n *     // `1` if MongoDB deleted a doc, `0` if no docs matched the filter `{ name: ... }`\n *     res.deletedCount;\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\n * @return {Query} this\n * @see deleteWriteOpResult https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\n * @see MongoDB Driver deleteOne https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteOne\n * @api public\n */\n\nQuery.prototype.deleteOne = function(filter, options, callback) {\n  this.op = 'deleteOne';\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  } else {\n    this.setOptions(options);\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteOne'));\n  }\n\n  if (!callback) {\n    return Query.base.deleteOne.call(this);\n  }\n\n  this.exec.call(this, callback);\n\n  return this;\n};\n\n/*!\n * Internal thunk for `deleteOne()`\n */\n\nQuery.prototype._deleteOne = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n\n  return Query.base.deleteOne.call(this, callback);\n});\n\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Works like\n * remove, except it deletes _every_ document that matches `filter` in the\n * collection, regardless of the value of `single`.\n *\n * This function triggers `deleteMany` middleware.\n *\n * #### Example\n *\n *     await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });\n *\n *     // Using callbacks:\n *     Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }, callback);\n *\n * This function calls the MongoDB driver's [`Collection#deleteMany()` function](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteMany).\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\n * object that contains 3 properties:\n *\n * - `ok`: `1` if no errors occurred\n * - `deletedCount`: the number of documents deleted\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\n *\n * #### Example\n *\n *     const res = await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });\n *     // `0` if no docs matched the filter, number of docs deleted otherwise\n *     res.deletedCount;\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](https://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\n * @return {Query} this\n * @see deleteWriteOpResult https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\n * @see MongoDB Driver deleteMany https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteMany\n * @api public\n */\n\nQuery.prototype.deleteMany = function(filter, options, callback) {\n  this.op = 'deleteMany';\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  } else {\n    this.setOptions(options);\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteMany'));\n  }\n\n  if (!callback) {\n    return Query.base.deleteMany.call(this);\n  }\n\n  this.exec.call(this, callback);\n\n  return this;\n};\n\n/*!\n * Internal thunk around `deleteMany()`\n */\n\nQuery.prototype._deleteMany = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n\n  return Query.base.deleteMany.call(this, callback);\n});\n\n/*!\n * hydrates a document\n *\n * @param {Model} model\n * @param {Document} doc\n * @param {Object} res 3rd parameter to callback\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Function} callback\n */\n\nfunction completeOne(model, doc, res, options, fields, userProvidedFields, pop, callback) {\n  if (options.rawResult && doc == null) {\n    _init(null);\n    return null;\n  }\n\n  helpers.createModelAndInit(model, doc, fields, userProvidedFields, options, pop, _init);\n\n  function _init(err, casted) {\n    if (err) {\n      return immediate(() => callback(err));\n    }\n\n\n    if (options.rawResult) {\n      if (doc && casted) {\n        if (options.session != null) {\n          casted.$session(options.session);\n        }\n        res.value = casted;\n      } else {\n        res.value = null;\n      }\n      return immediate(() => callback(null, res));\n    }\n    if (options.session != null) {\n      casted.$session(options.session);\n    }\n    immediate(() => callback(null, casted));\n  }\n}\n\n/*!\n * If the model is a discriminator type and not root, then add the key & value to the criteria.\n */\n\nfunction prepareDiscriminatorCriteria(query) {\n  if (!query || !query.model || !query.model.schema) {\n    return;\n  }\n\n  const schema = query.model.schema;\n\n  if (schema && schema.discriminatorMapping && !schema.discriminatorMapping.isRoot) {\n    query._conditions[schema.discriminatorMapping.key] = schema.discriminatorMapping.value;\n  }\n}\n\n/**\n * Issues a mongodb [findAndModify](https://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found\n * document (if any) to the callback. The query executes if\n * `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndUpdate()`\n *\n * #### Available options\n *\n * - `new`: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `fields`: {Object|String} - Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n * - `setDefaultsOnInsert`: `true` by default. If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created.\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n *\n * #### Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * #### Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @method findOneAndUpdate\n * @memberOf Query\n * @instance\n * @param {Object|Query} [filter]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean} [options.new=false] By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.returnOriginal=null] An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.\n * @param {Function} [callback] optional params are (error, doc), _unless_ `rawResult` is used, in which case params are (error, writeOpResult)\n * @see Tutorial /docs/tutorials/findoneandupdate.html\n * @see mongodb https://www.mongodb.org/display/DOCS/findAndModify+Command\n * @see writeOpResult https://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function(criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n  this._validateOp();\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      if (typeof doc === 'function') {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      options = undefined;\n      break;\n    case 1:\n      if (typeof criteria === 'function') {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n  }\n\n  if (mquery.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  options = options ? utils.clone(options) : {};\n\n  if (options.projection) {\n    this.select(options.projection);\n    delete options.projection;\n  }\n  if (options.fields) {\n    this.select(options.fields);\n    delete options.fields;\n  }\n\n  const returnOriginal = this &&\n    this.model &&\n    this.model.base &&\n    this.model.base.options &&\n    this.model.base.options.returnOriginal;\n  if (options.new == null && options.returnDocument == null && options.returnOriginal == null && returnOriginal != null) {\n    options.returnOriginal = returnOriginal;\n  }\n\n  this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/*!\n * Thunk around findOneAndUpdate()\n *\n * @param {Function} [callback]\n * @api private\n */\n\nQuery.prototype._findOneAndUpdate = wrapThunk(function(callback) {\n  if (this.error() != null) {\n    return callback(this.error());\n  }\n\n  this._findAndModify('update', callback);\n});\n\n/**\n * Issues a mongodb [findAndModify](https://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to\n * the callback. Executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndRemove()`\n *\n * #### Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n *\n * #### Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * #### Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *\n * @method findOneAndRemove\n * @memberOf Query\n * @instance\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see mongodb https://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = function(conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n  this._validateOp();\n  this._validate();\n\n  switch (arguments.length) {\n    case 2:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 1:\n      if (typeof conditions === 'function') {\n        callback = conditions;\n        conditions = undefined;\n        options = undefined;\n      }\n      break;\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/**\n * Issues a MongoDB [findOneAndDelete](https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndDelete/) command.\n *\n * Finds a matching document, removes it, and passes the found document (if any)\n * to the callback. Executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndDelete()`\n *\n * This function differs slightly from `Model.findOneAndRemove()` in that\n * `findOneAndRemove()` becomes a [MongoDB `findAndModify()` command](https://docs.mongodb.com/manual/reference/method/db.collection.findAndModify/),\n * as opposed to a `findOneAndDelete()` command. For most mongoose use cases,\n * this distinction is purely pedantic. You should use `findOneAndDelete()`\n * unless you have a good reason not to.\n *\n * #### Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n *\n * #### Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * #### Examples\n *\n *     A.where().findOneAndDelete(conditions, options, callback) // executes\n *     A.where().findOneAndDelete(conditions, options)  // return Query\n *     A.where().findOneAndDelete(conditions, callback) // executes\n *     A.where().findOneAndDelete(conditions) // returns Query\n *     A.where().findOneAndDelete(callback)   // executes\n *     A.where().findOneAndDelete()           // returns Query\n *\n * @method findOneAndDelete\n * @memberOf Query\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see mongodb https://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndDelete = function(conditions, options, callback) {\n  this.op = 'findOneAndDelete';\n  this._validateOp();\n  this._validate();\n\n  switch (arguments.length) {\n    case 2:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 1:\n      if (typeof conditions === 'function') {\n        callback = conditions;\n        conditions = undefined;\n        options = undefined;\n      }\n      break;\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/*!\n * Thunk around findOneAndDelete()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._findOneAndDelete = wrapThunk(function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  const filter = this._conditions;\n  const options = this._optionsForExec();\n  let fields = null;\n\n  if (this._fields != null) {\n    options.projection = this._castFields(utils.clone(this._fields));\n    fields = options.projection;\n    if (fields instanceof Error) {\n      callback(fields);\n      return null;\n    }\n  }\n\n  this._collection.collection.findOneAndDelete(filter, options, _wrapThunkCallback(this, (err, res) => {\n    if (err) {\n      return callback(err);\n    }\n\n    const doc = res.value;\n\n    return this._completeOne(doc, res, callback);\n  }));\n});\n\n/**\n * Issues a MongoDB [findOneAndReplace](https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndReplace/) command.\n *\n * Finds a matching document, removes it, and passes the found document (if any)\n * to the callback. Executes if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndReplace()`\n *\n * #### Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n *\n * #### Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * #### Examples\n *\n *     A.where().findOneAndReplace(filter, replacement, options, callback); // executes\n *     A.where().findOneAndReplace(filter, replacement, options); // return Query\n *     A.where().findOneAndReplace(filter, replacement, callback); // executes\n *     A.where().findOneAndReplace(filter); // returns Query\n *     A.where().findOneAndReplace(callback); // executes\n *     A.where().findOneAndReplace(); // returns Query\n *\n * @method findOneAndReplace\n * @memberOf Query\n * @param {Object} [filter]\n * @param {Object} [replacement]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.3/interfaces/ModifyResult.html)\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.new=false] By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Boolean} [options.returnOriginal=null] An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndReplace = function(filter, replacement, options, callback) {\n  this.op = 'findOneAndReplace';\n  this._validateOp();\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if (typeof options === 'function') {\n        callback = options;\n        options = void 0;\n      }\n      break;\n    case 2:\n      if (typeof replacement === 'function') {\n        callback = replacement;\n        replacement = void 0;\n      }\n      break;\n    case 1:\n      if (typeof filter === 'function') {\n        callback = filter;\n        filter = void 0;\n        replacement = void 0;\n        options = void 0;\n      }\n      break;\n  }\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n  }\n\n  if (replacement != null) {\n    if (hasDollarKeys(replacement)) {\n      throw new Error('The replacement document must not contain atomic operators.');\n    }\n    this._mergeUpdate(replacement);\n  }\n\n  options = options || {};\n\n  const returnOriginal = this &&\n  this.model &&\n  this.model.base &&\n  this.model.base.options &&\n  this.model.base.options.returnOriginal;\n  if (options.new == null && options.returnDocument == null && options.returnOriginal == null && returnOriginal != null) {\n    options.returnOriginal = returnOriginal;\n  }\n  this.setOptions(options);\n  this.setOptions({ overwrite: true });\n\n  if (!callback) {\n    return this;\n  }\n\n  this.exec(callback);\n\n  return this;\n};\n\n/*!\n * Thunk around findOneAndReplace()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._findOneAndReplace = wrapThunk(function(callback) {\n  this._castConditions();\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  const filter = this._conditions;\n  const options = this._optionsForExec();\n  convertNewToReturnDocument(options);\n  let fields = null;\n\n  this._applyPaths();\n  if (this._fields != null) {\n    options.projection = this._castFields(utils.clone(this._fields));\n    fields = options.projection;\n    if (fields instanceof Error) {\n      callback(fields);\n      return null;\n    }\n  }\n\n  const runValidators = _getOption(this, 'runValidators', false);\n  if (runValidators === false) {\n    try {\n      this._update = this._castUpdate(this._update, true);\n    } catch (err) {\n      const validationError = new ValidationError();\n      validationError.errors[err.path] = err;\n      callback(validationError);\n      return null;\n    }\n\n    this._collection.collection.findOneAndReplace(filter, this._update || {}, options, _wrapThunkCallback(this, (err, res) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const doc = res.value;\n\n      return this._completeOne(doc, res, callback);\n    }));\n\n    return;\n  }\n\n\n  let castedDoc = new this.model(this._update, null, true);\n  this._update = castedDoc;\n  castedDoc.validate(err => {\n    if (err != null) {\n      return callback(err);\n    }\n\n    if (castedDoc.toBSON) {\n      castedDoc = castedDoc.toBSON();\n    }\n\n    this._collection.collection.findOneAndReplace(filter, castedDoc, options, _wrapThunkCallback(this, (err, res) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const doc = res.value;\n\n      return this._completeOne(doc, res, callback);\n    }));\n  });\n});\n\n/*!\n * Support the `new` option as an alternative to `returnOriginal` for backwards\n * compat.\n */\n\nfunction convertNewToReturnDocument(options) {\n  if ('new' in options) {\n    options.returnDocument = options['new'] ? 'after' : 'before';\n    delete options['new'];\n  }\n  if ('returnOriginal' in options) {\n    options.returnDocument = options['returnOriginal'] ? 'before' : 'after';\n    delete options['returnOriginal'];\n  }\n  // Temporary since driver 4.0.0-beta does not support `returnDocument`\n  if (typeof options.returnDocument === 'string') {\n    options.returnOriginal = options.returnDocument === 'before';\n  }\n}\n\n/*!\n * Thunk around findOneAndRemove()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._findOneAndRemove = wrapThunk(function(callback) {\n  if (this.error() != null) {\n    callback(this.error());\n    return;\n  }\n\n  this._findAndModify('remove', callback);\n});\n\n/*!\n * Get options from query opts, falling back to the base mongoose object.\n */\n\nfunction _getOption(query, option, def) {\n  const opts = query._optionsForExec(query.model);\n\n  if (option in opts) {\n    return opts[option];\n  }\n  if (option in query.model.base.options) {\n    return query.model.base.options[option];\n  }\n  return def;\n}\n\n/*!\n * Override mquery.prototype._findAndModify to provide casting etc.\n *\n * @param {String} type - either \"remove\" or \"update\"\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype._findAndModify = function(type, callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('Expected callback in _findAndModify');\n  }\n\n  const model = this.model;\n  const schema = model.schema;\n  const _this = this;\n  let fields;\n\n  const castedQuery = castQuery(this);\n  if (castedQuery instanceof Error) {\n    return callback(castedQuery);\n  }\n\n  _castArrayFilters(this);\n\n  const opts = this._optionsForExec(model);\n\n  if ('strict' in opts) {\n    this._mongooseOptions.strict = opts.strict;\n  }\n\n  const isOverwriting = this.options.overwrite && !hasDollarKeys(this._update);\n  if (isOverwriting) {\n    this._update = new this.model(this._update, null, true);\n  }\n\n  if (type === 'remove') {\n    opts.remove = true;\n  } else {\n    if (!('new' in opts) && !('returnOriginal' in opts) && !('returnDocument' in opts)) {\n      opts.new = false;\n    }\n    if (!('upsert' in opts)) {\n      opts.upsert = false;\n    }\n    if (opts.upsert || opts['new']) {\n      opts.remove = false;\n    }\n\n    if (!isOverwriting) {\n      try {\n        this._update = this._castUpdate(this._update, opts.overwrite);\n      } catch (err) {\n        return callback(err);\n      }\n      const _opts = Object.assign({}, opts, {\n        setDefaultsOnInsert: this._mongooseOptions.setDefaultsOnInsert\n      });\n      this._update = setDefaultsOnInsert(this._conditions, schema, this._update, _opts);\n      if (!this._update || Object.keys(this._update).length === 0) {\n        if (opts.upsert) {\n          // still need to do the upsert to empty doc\n          const doc = utils.clone(castedQuery);\n          delete doc._id;\n          this._update = { $set: doc };\n        } else {\n          this._executionStack = null;\n          this.findOne(callback);\n          return this;\n        }\n      } else if (this._update instanceof Error) {\n        return callback(this._update);\n      } else {\n        // In order to make MongoDB 2.6 happy (see\n        // https://jira.mongodb.org/browse/SERVER-12266 and related issues)\n        // if we have an actual update document but $set is empty, junk the $set.\n        if (this._update.$set && Object.keys(this._update.$set).length === 0) {\n          delete this._update.$set;\n        }\n      }\n    }\n\n    if (Array.isArray(opts.arrayFilters)) {\n      opts.arrayFilters = removeUnusedArrayFilters(this._update, opts.arrayFilters);\n    }\n  }\n\n  this._applyPaths();\n\n  if (this._fields) {\n    fields = utils.clone(this._fields);\n    opts.projection = this._castFields(fields);\n    if (opts.projection instanceof Error) {\n      return callback(opts.projection);\n    }\n  }\n\n  if (opts.sort) convertSortToArray(opts);\n\n  const cb = function(err, doc, res) {\n    if (err) {\n      return callback(err);\n    }\n\n    _this._completeOne(doc, res, callback);\n  };\n\n  const runValidators = _getOption(this, 'runValidators', false);\n\n  // Bypass mquery\n  const collection = _this._collection.collection;\n  convertNewToReturnDocument(opts);\n\n  if (type === 'remove') {\n    collection.findOneAndDelete(castedQuery, opts, _wrapThunkCallback(_this, function(error, res) {\n      return cb(error, res ? res.value : res, res);\n    }));\n\n    return this;\n  }\n\n  // honors legacy overwrite option for backward compatibility\n  const updateMethod = isOverwriting ? 'findOneAndReplace' : 'findOneAndUpdate';\n\n  if (runValidators) {\n    this.validate(this._update, opts, isOverwriting, error => {\n      if (error) {\n        return callback(error);\n      }\n      if (this._update && this._update.toBSON) {\n        this._update = this._update.toBSON();\n      }\n\n      collection[updateMethod](castedQuery, this._update, opts, _wrapThunkCallback(_this, function(error, res) {\n        return cb(error, res ? res.value : res, res);\n      }));\n    });\n  } else {\n    if (this._update && this._update.toBSON) {\n      this._update = this._update.toBSON();\n    }\n    collection[updateMethod](castedQuery, this._update, opts, _wrapThunkCallback(_this, function(error, res) {\n      return cb(error, res ? res.value : res, res);\n    }));\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _completeOneLean(doc, res, opts, callback) {\n  if (opts.rawResult) {\n    return callback(null, res);\n  }\n  return callback(null, doc);\n}\n\n/*!\n * Override mquery.prototype._mergeUpdate to handle mongoose objects in\n * updates.\n *\n * @param {Object} doc\n * @api private\n */\n\nQuery.prototype._mergeUpdate = function(doc) {\n  if (doc == null || (typeof doc === 'object' && Object.keys(doc).length === 0)) {\n    return;\n  }\n\n  if (!this._update) {\n    this._update = Array.isArray(doc) ? [] : {};\n  }\n  if (doc instanceof Query) {\n    if (Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else if (Array.isArray(doc)) {\n    if (!Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n    this._update = this._update.concat(doc);\n  } else {\n    if (Array.isArray(this._update)) {\n      throw new Error('Cannot mix array and object updates');\n    }\n    utils.mergeClone(this._update, doc);\n  }\n};\n\n/*!\n * The mongodb driver 1.3.23 only supports the nested array sort\n * syntax. We must convert it or sorting findAndModify will not work.\n */\n\nfunction convertSortToArray(opts) {\n  if (Array.isArray(opts.sort)) {\n    return;\n  }\n  if (!utils.isObject(opts.sort)) {\n    return;\n  }\n\n  const sort = [];\n\n  for (const key in opts.sort) {\n    if (utils.object.hasOwnProperty(opts.sort, key)) {\n      sort.push([key, opts.sort[key]]);\n    }\n  }\n\n  opts.sort = sort;\n}\n\n/*!\n * ignore\n */\n\nfunction _updateThunk(op, callback) {\n  this._castConditions();\n\n  _castArrayFilters(this);\n\n  if (this.error() != null) {\n    callback(this.error());\n    return null;\n  }\n\n  callback = _wrapThunkCallback(this, callback);\n\n  const castedQuery = this._conditions;\n  const options = this._optionsForExec(this.model);\n\n  this._update = utils.clone(this._update, options);\n  const isOverwriting = this.options.overwrite && !hasDollarKeys(this._update);\n  if (isOverwriting) {\n    if (op === 'updateOne' || op === 'updateMany') {\n      return callback(new MongooseError('The MongoDB server disallows ' +\n        'overwriting documents using `' + op + '`. See: ' +\n        'https://mongoosejs.com/docs/deprecations.html#update'));\n    }\n    this._update = new this.model(this._update, null, true);\n  } else {\n    try {\n      this._update = this._castUpdate(this._update, options.overwrite);\n    } catch (err) {\n      callback(err);\n      return null;\n    }\n\n    if (this._update == null || Object.keys(this._update).length === 0) {\n      callback(null, { acknowledged: false });\n      return null;\n    }\n\n    const _opts = Object.assign({}, options, {\n      setDefaultsOnInsert: this._mongooseOptions.setDefaultsOnInsert\n    });\n    this._update = setDefaultsOnInsert(this._conditions, this.model.schema,\n      this._update, _opts);\n  }\n\n  if (Array.isArray(options.arrayFilters)) {\n    options.arrayFilters = removeUnusedArrayFilters(this._update, options.arrayFilters);\n  }\n\n  const runValidators = _getOption(this, 'runValidators', false);\n  if (runValidators) {\n    this.validate(this._update, options, isOverwriting, err => {\n      if (err) {\n        return callback(err);\n      }\n\n      if (this._update.toBSON) {\n        this._update = this._update.toBSON();\n      }\n      this._collection[op](castedQuery, this._update, options, callback);\n    });\n    return null;\n  }\n\n  if (this._update.toBSON) {\n    this._update = this._update.toBSON();\n  }\n\n  this._collection[op](castedQuery, this._update, options, callback);\n  return null;\n}\n\n/*!\n * Mongoose calls this function internally to validate the query if\n * `runValidators` is set\n *\n * @param {Object} castedDoc the update, after casting\n * @param {Object} options the options from `_optionsForExec()`\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype.validate = function validate(castedDoc, options, isOverwriting, callback) {\n  return promiseOrCallback(callback, cb => {\n    try {\n      if (isOverwriting) {\n        castedDoc.$validate(cb);\n      } else {\n        updateValidators(this, this.model.schema, castedDoc, options, cb);\n      }\n    } catch (err) {\n      immediate(function() {\n        cb(err);\n      });\n    }\n  });\n};\n\n/*!\n * Internal thunk for .update()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._execUpdate = wrapThunk(function(callback) {\n  return _updateThunk.call(this, 'update', callback);\n});\n\n/*!\n * Internal thunk for .updateMany()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._updateMany = wrapThunk(function(callback) {\n  return _updateThunk.call(this, 'updateMany', callback);\n});\n\n/*!\n * Internal thunk for .updateOne()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._updateOne = wrapThunk(function(callback) {\n  return _updateThunk.call(this, 'updateOne', callback);\n});\n\n/*!\n * Internal thunk for .replaceOne()\n *\n * @param {Function} callback\n * @see Model.replaceOne #model_Model.replaceOne\n * @api private\n */\nQuery.prototype._replaceOne = wrapThunk(function(callback) {\n  return _updateThunk.call(this, 'replaceOne', callback);\n});\n\n/**\n * Declare and/or execute this query as an update() operation.\n *\n * _All paths passed that are not [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operations will become `$set` ops._\n *\n * This function triggers the following middleware.\n *\n * - `update()`\n *\n * #### Example\n *\n *     Model.where({ _id: id }).update({ title: 'words' });\n *\n *     // becomes\n *\n *     Model.where({ _id: id }).update({ $set: { title: 'words' }});\n *\n * #### Valid options:\n *\n *  - `upsert` (boolean) whether to create the doc if it doesn't match (false)\n *  - `multi` (boolean) whether multiple documents should be updated (false)\n *  - `runValidators` (boolean) if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n *  - `setDefaultsOnInsert` (boolean) `true` by default. If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created.\n *  - `strict` (boolean) overrides the `strict` option for this update\n *  - `read`\n *  - `writeConcern`\n *\n * #### Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op. The update operation will be ignored and the callback executed without sending the command to MongoDB.\n *\n * #### Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback, we must first call update() and then execute it by using the `exec()` method.\n *\n * ```javascript\n * const q = Model.where({ _id: id });\n * q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n * q.update({ $set: { name: 'bob' }}).exec(); // executed\n *\n * // keys that are not [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) ops become `$set`.\n * // this executes the same command as the previous example.\n * q.update({ name: 'bob' }).exec();\n *\n * // multi updates\n * Model.where()\n *      .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *\n * // more multi updates\n * Model.where()\n *      .setOptions({ multi: true })\n *      .update({ $set: { arr: [] }}, callback)\n *\n * // single update by default\n * Model.where({ email: 'address@example.com' })\n *      .update({ $inc: { counter: 1 }}, callback)\n * ```\n *\n * API summary\n *\n * ```javascript\n * update(filter, doc, options, cb); // executes\n * update(filter, doc, options);\n * update(filter, doc, cb); // executes\n * update(filter, doc);\n * update(doc, cb); // executes\n * update(doc);\n * update(cb); // executes\n * update(true); // executes\n * update();\n * ```\n *\n * @param {Object} [filter]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update https://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult https://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.update = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'update', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as an updateMany() operation. Same as\n * `update()`, except MongoDB will update _all_ documents that match\n * `filter` (as opposed to just the first one) regardless of the value of\n * the `multi` option.\n *\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\n * and `post('updateMany')` instead.\n *\n * #### Example:\n *     const res = await Person.updateMany({ name: /Stark$/ }, { isDeleted: true });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `updateMany()`\n *\n * @param {Object} [filter]\n * @param {Object|Array} [update] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update https://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult https://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.updateMany = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'updateMany', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as an updateOne() operation. Same as\n * `update()`, except it does not support the `multi` option.\n *\n * - MongoDB will update _only_ the first document that matches `filter` regardless of the value of the `multi` option.\n * - Use `replaceOne()` if you want to overwrite an entire document rather than using [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operators like `$set`.\n *\n * **Note** updateOne will _not_ fire update middleware. Use `pre('updateOne')`\n * and `post('updateOne')` instead.\n *\n * #### Example:\n *     const res = await Person.updateOne({ name: 'Jean-Luc Picard' }, { ship: 'USS Enterprise' });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `updateOne()`\n *\n * @param {Object} [filter]\n * @param {Object|Array} [update] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update https://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult https://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.updateOne = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'updateOne', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as a replaceOne() operation. Same as\n * `update()`, except MongoDB will replace the existing document and will\n * not accept any [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operators (`$set`, etc.)\n *\n * **Note** replaceOne will _not_ fire update middleware. Use `pre('replaceOne')`\n * and `post('replaceOne')` instead.\n *\n * #### Example:\n *     const res = await Person.replaceOne({ _id: 24601 }, { name: 'Jean Valjean' });\n *     res.n; // Number of documents matched\n *     res.nModified; // Number of documents modified\n *\n * This function triggers the following middleware.\n *\n * - `replaceOne()`\n *\n * @param {Object} [filter]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see Query docs https://mongoosejs.com/docs/queries.html\n * @see update https://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult https://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\n * @api public\n */\n\nQuery.prototype.replaceOne = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  this.setOptions({ overwrite: true });\n  return _update(this, 'replaceOne', conditions, doc, options, callback);\n};\n\n/*!\n * Internal helper for update, updateMany, updateOne, replaceOne\n */\n\nfunction _update(query, op, filter, doc, options, callback) {\n  // make sure we don't send in the whole Document to merge()\n  query.op = op;\n  query._validateOp();\n  filter = utils.toObject(filter);\n  doc = doc || {};\n\n  // strict is an option used in the update checking, make sure it gets set\n  if (options != null) {\n    if ('strict' in options) {\n      query._mongooseOptions.strict = options.strict;\n    }\n  }\n\n  if (!(filter instanceof Query) &&\n      filter != null &&\n      filter.toString() !== '[object Object]') {\n    query.error(new ObjectParameterError(filter, 'filter', op));\n  } else {\n    query.merge(filter);\n  }\n\n  if (utils.isObject(options)) {\n    query.setOptions(options);\n  }\n\n  query._mergeUpdate(doc);\n\n  // Hooks\n  if (callback) {\n    query.exec(callback);\n\n    return query;\n  }\n\n  return Query.base[op].call(query, filter, void 0, options, callback);\n}\n\n/**\n * Runs a function `fn` and treats the return value of `fn` as the new value\n * for the query to resolve to.\n *\n * Any functions you pass to `transform()` will run **after** any post hooks.\n *\n * #### Example:\n *\n *     const res = await MyModel.findOne().transform(res => {\n *       // Sets a `loadedAt` property on the doc that tells you the time the\n *       // document was loaded.\n *       return res == null ?\n *         res :\n *         Object.assign(res, { loadedAt: new Date() });\n *     });\n *\n * @method transform\n * @memberOf Query\n * @instance\n * @param {Function} fn function to run to transform the query result\n * @return {Query} this\n */\n\nQuery.prototype.transform = function(fn) {\n  this._transforms.push(fn);\n  return this;\n};\n\n/**\n * Make this query throw an error if no documents match the given `filter`.\n * This is handy for integrating with async/await, because `orFail()` saves you\n * an extra `if` statement to check if no document was found.\n *\n * #### Example:\n *\n *     // Throws if no doc returned\n *     await Model.findOne({ foo: 'bar' }).orFail();\n *\n *     // Throws if no document was updated. Note that `orFail()` will still\n *     // throw if the only document that matches is `{ foo: 'bar', name: 'test' }`,\n *     // because `orFail()` will throw if no document was _updated_, not\n *     // if no document was _found_.\n *     await Model.updateOne({ foo: 'bar' }, { name: 'test' }).orFail();\n *\n *     // Throws \"No docs found!\" error if no docs match `{ foo: 'bar' }`\n *     await Model.find({ foo: 'bar' }).orFail(new Error('No docs found!'));\n *\n *     // Throws \"Not found\" error if no document was found\n *     await Model.findOneAndUpdate({ foo: 'bar' }, { name: 'test' }).\n *       orFail(() => Error('Not found'));\n *\n * @method orFail\n * @memberOf Query\n * @instance\n * @param {Function|Error} [err] optional error to throw if no docs match `filter`. If not specified, `orFail()` will throw a `DocumentNotFoundError`\n * @return {Query} this\n */\n\nQuery.prototype.orFail = function(err) {\n  this.transform(res => {\n    switch (this.op) {\n      case 'find':\n        if (res.length === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'findOne':\n        if (res == null) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'replaceOne':\n      case 'update':\n      case 'updateMany':\n      case 'updateOne':\n        if (res && res.modifiedCount === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'findOneAndDelete':\n      case 'findOneAndRemove':\n        if ((res && res.lastErrorObject && res.lastErrorObject.n) === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'findOneAndUpdate':\n      case 'findOneAndReplace':\n        if ((res && res.lastErrorObject && res.lastErrorObject.updatedExisting) === false) {\n          throw _orFailError(err, this);\n        }\n        break;\n      case 'deleteMany':\n      case 'deleteOne':\n      case 'remove':\n        if (res.deletedCount === 0) {\n          throw _orFailError(err, this);\n        }\n        break;\n      default:\n        break;\n    }\n\n    return res;\n  });\n  return this;\n};\n\n/*!\n * Get the error to throw for `orFail()`\n */\n\nfunction _orFailError(err, query) {\n  if (typeof err === 'function') {\n    err = err.call(query);\n  }\n\n  if (err == null) {\n    err = new DocumentNotFoundError(query.getQuery(), query.model.modelName);\n  }\n\n  return err;\n}\n\n/**\n * Executes the query\n *\n * #### Examples:\n *\n *     const promise = query.exec();\n *     const promise = query.exec('update');\n *\n *     query.exec(callback);\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback] optional params depend on the function being called\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.exec = function exec(op, callback) {\n  const _this = this;\n  // Ensure that `exec()` is the first thing that shows up in\n  // the stack when cast errors happen.\n  const castError = new CastError();\n\n  if (typeof op === 'function') {\n    callback = op;\n    op = null;\n  } else if (typeof op === 'string') {\n    this.op = op;\n  }\n\n  if (this.op == null) {\n    throw new Error('Query must have `op` before executing');\n  }\n  this._validateOp();\n\n  callback = this.model.$handleCallbackError(callback);\n\n  return promiseOrCallback(callback, (cb) => {\n    cb = this.model.$wrapCallback(cb);\n\n    if (!_this.op) {\n      cb();\n      return;\n    }\n\n    this._hooks.execPre('exec', this, [], (error) => {\n      if (error != null) {\n        return cb(_cleanCastErrorStack(castError, error));\n      }\n      let thunk = '_' + this.op;\n      if (this.op === 'update') {\n        thunk = '_execUpdate';\n      } else if (this.op === 'distinct') {\n        thunk = '__distinct';\n      }\n      this[thunk].call(this, (error, res) => {\n        if (error) {\n          return cb(_cleanCastErrorStack(castError, error));\n        }\n\n        this._hooks.execPost('exec', this, [], {}, (error) => {\n          if (error) {\n            return cb(_cleanCastErrorStack(castError, error));\n          }\n\n          cb(null, res);\n        });\n      });\n    });\n  }, this.model.events);\n};\n\n/*!\n * ignore\n */\n\nfunction _cleanCastErrorStack(castError, error) {\n  if (error instanceof CastError) {\n    castError.copy(error);\n    return castError;\n  }\n\n  return error;\n}\n\n/*!\n * ignore\n */\n\nfunction _wrapThunkCallback(query, cb) {\n  return function(error, res) {\n    if (error != null) {\n      return cb(error);\n    }\n\n    for (const fn of query._transforms) {\n      try {\n        res = fn(res);\n      } catch (error) {\n        return cb(error);\n      }\n    }\n\n    return cb(null, res);\n  };\n}\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * More about [`then()` in JavaScript](https://masteringjs.io/tutorials/fundamentals/then).\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.then = function(resolve, reject) {\n  return this.exec().then(resolve, reject);\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n * Like `.then()`, but only takes a rejection handler.\n *\n * More about [Promise `catch()` in JavaScript](https://masteringjs.io/tutorials/fundamentals/catch).\n *\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.catch = function(reject) {\n  return this.exec().then(null, reject);\n};\n\n/**\n * Add pre [middleware](/docs/middleware.html) to this query instance. Doesn't affect\n * other queries.\n *\n * #### Example:\n *\n *     const q1 = Question.find({ answer: 42 });\n *     q1.pre(function middleware() {\n *       console.log(this.getFilter());\n *     });\n *     await q1.exec(); // Prints \"{ answer: 42 }\"\n *\n *     // Doesn't print anything, because `middleware()` is only\n *     // registered on `q1`.\n *     await Question.find({ answer: 42 });\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.pre = function(fn) {\n  this._hooks.pre('exec', fn);\n  return this;\n};\n\n/**\n * Add post [middleware](/docs/middleware.html) to this query instance. Doesn't affect\n * other queries.\n *\n * #### Example:\n *\n *     const q1 = Question.find({ answer: 42 });\n *     q1.post(function middleware() {\n *       console.log(this.getFilter());\n *     });\n *     await q1.exec(); // Prints \"{ answer: 42 }\"\n *\n *     // Doesn't print anything, because `middleware()` is only\n *     // registered on `q1`.\n *     await Question.find({ answer: 42 });\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.post = function(fn) {\n  this._hooks.post('exec', fn);\n  return this;\n};\n\n/*!\n * Casts obj for an update command.\n *\n * @param {Object} obj\n * @return {Object} obj after casting its values\n * @api private\n */\n\nQuery.prototype._castUpdate = function _castUpdate(obj, overwrite) {\n  let schema = this.schema;\n\n  const discriminatorKey = schema.options.discriminatorKey;\n  const baseSchema = schema._baseSchema ? schema._baseSchema : schema;\n  if (this._mongooseOptions.overwriteDiscriminatorKey &&\n      obj[discriminatorKey] != null &&\n      baseSchema.discriminators) {\n    const _schema = baseSchema.discriminators[obj[discriminatorKey]];\n    if (_schema != null) {\n      schema = _schema;\n    }\n  }\n\n  let upsert;\n  if ('upsert' in this.options) {\n    upsert = this.options.upsert;\n  }\n\n  const filter = this._conditions;\n  if (schema != null &&\n      utils.hasUserDefinedProperty(filter, schema.options.discriminatorKey) &&\n      typeof filter[schema.options.discriminatorKey] !== 'object' &&\n      schema.discriminators != null) {\n    const discriminatorValue = filter[schema.options.discriminatorKey];\n    const byValue = getDiscriminatorByValue(this.model.discriminators, discriminatorValue);\n    schema = schema.discriminators[discriminatorValue] ||\n      (byValue && byValue.schema) ||\n      schema;\n  }\n\n  return castUpdate(schema, obj, {\n    overwrite: overwrite,\n    strict: this._mongooseOptions.strict,\n    upsert: upsert,\n    arrayFilters: this.options.arrayFilters,\n    overwriteDiscriminatorKey: this._mongooseOptions.overwriteDiscriminatorKey\n  }, this, this._conditions);\n};\n\n/*!\n * castQuery\n * @api private\n */\n\nfunction castQuery(query) {\n  try {\n    return query.cast(query.model);\n  } catch (err) {\n    return err;\n  }\n}\n\n/**\n * Specifies paths which should be populated with other documents.\n *\n * #### Example:\n *\n *     let book = await Book.findOne().populate('authors');\n *     book.title; // 'Node.js in Action'\n *     book.authors[0].name; // 'TJ Holowaychuk'\n *     book.authors[1].name; // 'Nathan Rajlich'\n *\n *     let books = await Book.find().populate({\n *       path: 'authors',\n *       // `match` and `sort` apply to the Author model,\n *       // not the Book model. These options do not affect\n *       // which documents are in `books`, just the order and\n *       // contents of each book document's `authors`.\n *       match: { name: new RegExp('.*h.*', 'i') },\n *       sort: { name: -1 }\n *     });\n *     books[0].title; // 'Node.js in Action'\n *     // Each book's `authors` are sorted by name, descending.\n *     books[0].authors[0].name; // 'TJ Holowaychuk'\n *     books[0].authors[1].name; // 'Marc Harter'\n *\n *     books[1].title; // 'Professional AngularJS'\n *     // Empty array, no authors' name has the letter 'h'\n *     books[1].authors; // []\n *\n * Paths are populated after the query executes and a response is received. A\n * separate query is then executed for each path specified for population. After\n * a response for each query has also been returned, the results are passed to\n * the callback.\n *\n * @param {Object|String|Array<String>} path either the path(s) to populate or an object specifying all parameters\n * @param {Object|String} [select] Field selection for the population query\n * @param {Model} [model] The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's `ref` field.\n * @param {Object} [match] Conditions for the population query\n * @param {Object} [options] Options for the population query (sort, etc)\n * @param {String} [options.path=null] The path to populate.\n * @param {boolean} [options.retainNullValues=false] by default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\n * @param {boolean} [options.getters=false] if true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](/docs/schematypes.html#schematype-options).\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://docs.mongodb.com/manual/tutorial/query-documents/), or a function that returns a filter object.\n * @param {Function} [options.transform=null] Function that Mongoose will call on every populated document that allows you to transform the populated document.\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\n * @see population ./populate.html\n * @see Query#select #query_Query-select\n * @see Model.populate #model_Model.populate\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.populate = function() {\n  // Bail when given no truthy arguments\n  if (!Array.from(arguments).some(Boolean)) {\n    return this;\n  }\n\n  const res = utils.populate.apply(null, arguments);\n\n  // Propagate readConcern and readPreference and lean from parent query,\n  // unless one already specified\n  if (this.options != null) {\n    const readConcern = this.options.readConcern;\n    const readPref = this.options.readPreference;\n\n    for (const populateOptions of res) {\n      if (readConcern != null && (populateOptions && populateOptions.options && populateOptions.options.readConcern) == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.readConcern = readConcern;\n      }\n      if (readPref != null && (populateOptions && populateOptions.options && populateOptions.options.readPreference) == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.readPreference = readPref;\n      }\n    }\n  }\n\n  const opts = this._mongooseOptions;\n\n  if (opts.lean != null) {\n    const lean = opts.lean;\n    for (const populateOptions of res) {\n      if ((populateOptions && populateOptions.options && populateOptions.options.lean) == null) {\n        populateOptions.options = populateOptions.options || {};\n        populateOptions.options.lean = lean;\n      }\n    }\n  }\n\n  if (!utils.isObject(opts.populate)) {\n    opts.populate = {};\n  }\n\n  const pop = opts.populate;\n\n  for (const populateOptions of res) {\n    const path = populateOptions.path;\n    if (pop[path] && pop[path].populate && populateOptions.populate) {\n      populateOptions.populate = pop[path].populate.concat(populateOptions.populate);\n    }\n\n    pop[populateOptions.path] = populateOptions;\n  }\n  return this;\n};\n\n/**\n * Gets a list of paths to be populated by this query\n *\n * #### Example:\n *      bookSchema.pre('findOne', function() {\n *        let keys = this.getPopulatedPaths(); // ['author']\n *      });\n *      ...\n *      Book.findOne({}).populate('author');\n *\n * #### Example:\n *      // Deep populate\n *      const q = L1.find().populate({\n *        path: 'level2',\n *        populate: { path: 'level3' }\n *      });\n *      q.getPopulatedPaths(); // ['level2', 'level2.level3']\n *\n * @return {Array} an array of strings representing populated paths\n * @api public\n */\n\nQuery.prototype.getPopulatedPaths = function getPopulatedPaths() {\n  const obj = this._mongooseOptions.populate || {};\n  const ret = Object.keys(obj);\n  for (const path of Object.keys(obj)) {\n    const pop = obj[path];\n    if (!Array.isArray(pop.populate)) {\n      continue;\n    }\n    _getPopulatedPaths(ret, pop.populate, path + '.');\n  }\n  return ret;\n};\n\n/*!\n * ignore\n */\n\nfunction _getPopulatedPaths(list, arr, prefix) {\n  for (const pop of arr) {\n    list.push(prefix + pop.path);\n    if (!Array.isArray(pop.populate)) {\n      continue;\n    }\n    _getPopulatedPaths(list, pop.populate, prefix + pop.path + '.');\n  }\n}\n\n/**\n * Casts this query to the schema of `model`\n *\n * #### Note\n *\n * If `obj` is present, it is cast instead of this query.\n *\n * @param {Model} [model] the model to cast to. If not set, defaults to `this.model`\n * @param {Object} [obj]\n * @return {Object}\n * @api public\n */\n\nQuery.prototype.cast = function(model, obj) {\n  obj || (obj = this._conditions);\n\n  model = model || this.model;\n  const discriminatorKey = model.schema.options.discriminatorKey;\n  if (obj != null &&\n      obj.hasOwnProperty(discriminatorKey)) {\n    model = getDiscriminatorByValue(model.discriminators, obj[discriminatorKey]) || model;\n  }\n\n  const opts = { upsert: this.options && this.options.upsert };\n  if (this.options) {\n    if ('strict' in this.options) {\n      opts.strict = this.options.strict;\n      opts.strictQuery = opts.strict;\n    }\n    if ('strictQuery' in this.options) {\n      opts.strictQuery = this.options.strictQuery;\n    }\n  }\n\n  try {\n    return cast(model.schema, obj, opts, this);\n  } catch (err) {\n    // CastError, assign model\n    if (typeof err.setModel === 'function') {\n      err.setModel(model);\n    }\n    throw err;\n  }\n};\n\n/**\n * Casts selected field arguments for field selection with mongo 2.2\n *\n *     query.select({ ids: { $elemMatch: { $in: [hexString] }})\n *\n * @param {Object} fields\n * @see https://github.com/Automattic/mongoose/issues/1091\n * @see https://docs.mongodb.org/manual/reference/projection/elemMatch/\n * @api private\n */\n\nQuery.prototype._castFields = function _castFields(fields) {\n  let selected,\n      elemMatchKeys,\n      keys,\n      key,\n      out,\n      i;\n\n  if (fields) {\n    keys = Object.keys(fields);\n    elemMatchKeys = [];\n    i = keys.length;\n\n    // collect $elemMatch args\n    while (i--) {\n      key = keys[i];\n      if (fields[key].$elemMatch) {\n        selected || (selected = {});\n        selected[key] = fields[key];\n        elemMatchKeys.push(key);\n      }\n    }\n  }\n\n  if (selected) {\n    // they passed $elemMatch, cast em\n    try {\n      out = this.cast(this.model, selected);\n    } catch (err) {\n      return err;\n    }\n\n    // apply the casted field args\n    i = elemMatchKeys.length;\n    while (i--) {\n      key = elemMatchKeys[i];\n      fields[key] = out[key];\n    }\n  }\n\n  return fields;\n};\n\n/**\n * Applies schematype selected options to this query.\n * @api private\n */\n\nQuery.prototype._applyPaths = function applyPaths() {\n  this._fields = this._fields || {};\n  helpers.applyPaths(this._fields, this.model.schema);\n\n  let _selectPopulatedPaths = true;\n\n  if ('selectPopulatedPaths' in this.model.base.options) {\n    _selectPopulatedPaths = this.model.base.options.selectPopulatedPaths;\n  }\n  if ('selectPopulatedPaths' in this.model.schema.options) {\n    _selectPopulatedPaths = this.model.schema.options.selectPopulatedPaths;\n  }\n\n  if (_selectPopulatedPaths) {\n    selectPopulatedFields(this._fields, this._userProvidedFields, this._mongooseOptions.populate);\n  }\n};\n\n/**\n * Returns a wrapper around a [mongodb driver cursor](https://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html).\n * A QueryCursor exposes a Streams3 interface, as well as a `.next()` function.\n *\n * The `.cursor()` function triggers pre find hooks, but **not** post find hooks.\n *\n * #### Example\n *\n *     // There are 2 ways to use a cursor. First, as a stream:\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       on('data', function(doc) { console.log(doc); }).\n *       on('end', function() { console.log('Done!'); });\n *\n *     // Or you can use `.next()` to manually get the next doc in the stream.\n *     // `.next()` returns a promise, so you can use promises or callbacks.\n *     const cursor = Thing.find({ name: /^hello/ }).cursor();\n *     cursor.next(function(error, doc) {\n *       console.log(doc);\n *     });\n *\n *     // Because `.next()` returns a promise, you can use co\n *     // to easily iterate through all documents without loading them\n *     // all into memory.\n *     const cursor = Thing.find({ name: /^hello/ }).cursor();\n *     for (let doc = await cursor.next(); doc != null; doc = await cursor.next()) {\n *       console.log(doc);\n *     }\n *\n * #### Valid options\n *\n *   - `transform`: optional function which accepts a mongoose document. The return value of the function will be emitted on `data` and returned by `.next()`.\n *\n * @return {QueryCursor}\n * @param {Object} [options]\n * @see QueryCursor\n * @api public\n */\n\nQuery.prototype.cursor = function cursor(opts) {\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n  this.setOptions({ projection: this._fieldsForExec() });\n  if (opts) {\n    this.setOptions(opts);\n  }\n\n  const options = Object.assign({}, this._optionsForExec(), {\n    projection: this.projection()\n  });\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    return (new QueryCursor(this, options))._markError(err);\n  }\n\n  return new QueryCursor(this, options);\n};\n\n// the rest of these are basically to support older Mongoose syntax with mquery\n\n/**\n * _DEPRECATED_ Alias of `maxScan`\n *\n * @deprecated\n * @see maxScan #query_Query-maxScan\n * @method maxscan\n * @memberOf Query\n * @instance\n */\n\nQuery.prototype.maxscan = Query.base.maxScan;\n\n/**\n * Sets the tailable option (for use with capped collections).\n *\n * #### Example\n *\n *     query.tailable(); // true\n *     query.tailable(true);\n *     query.tailable(false);\n *\n *     // Set both `tailable` and `awaitData` options\n *     query.tailable({ awaitData: true });\n *\n * #### Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} bool defaults to true\n * @param {Object} [opts] options to set\n * @param {Boolean} [opts.awaitData] false by default. Set to true to keep the cursor open even if there's no data.\n * @param {Number} [opts.maxAwaitTimeMS] the maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. Requires `tailable` and `awaitData` to be true\n * @see tailable https://docs.mongodb.org/manual/tutorial/create-tailable-cursor/\n * @api public\n */\n\nQuery.prototype.tailable = function(val, opts) {\n  // we need to support the tailable({ awaitData : true }) as well as the\n  // tailable(true, {awaitData :true}) syntax that mquery does not support\n  if (val != null && typeof val.constructor === 'function' && val.constructor.name === 'Object') {\n    opts = val;\n    val = true;\n  }\n\n  if (val === undefined) {\n    val = true;\n  }\n\n  if (opts && typeof opts === 'object') {\n    for (const key of Object.keys(opts)) {\n      if (key === 'awaitData' || key === 'awaitdata') { // backwards compat, see gh-10875\n        // For backwards compatibility\n        this.options['awaitData'] = !!opts[key];\n      } else {\n        this.options[key] = opts[key];\n      }\n    }\n  }\n\n  return Query.base.tailable.call(this, val);\n};\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * #### Example\n *\n *     query.where('path').intersects().geometry({\n *       type: 'LineString',\n *       coordinates: [[180.0, 11.0], [180, 9.0]]\n *     });\n *\n *     query.where('path').intersects({\n *       type: 'LineString',\n *       coordinates: [[180.0, 11.0], [180, 9.0]]\n *     });\n *\n * #### Note:\n *\n * **MUST** be used after `where()`.\n *\n * #### Note:\n *\n * In Mongoose 3.7, `intersects` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method intersects\n * @memberOf Query\n * @instance\n * @param {Object} [arg]\n * @return {Query} this\n * @see $geometry https://docs.mongodb.org/manual/reference/operator/geometry/\n * @see geoIntersects https://docs.mongodb.org/manual/reference/operator/geoIntersects/\n * @api public\n */\n\n/**\n * Specifies a `$geometry` condition\n *\n * #### Example\n *\n *     const polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     const polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     const polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * The argument is assigned to the most recent path passed to `where()`.\n *\n * #### Note:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * @method geometry\n * @memberOf Query\n * @instance\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see $geometry https://docs.mongodb.org/manual/reference/operator/geometry/\n * @see https://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see https://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * #### Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *\n * @method near\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see $near https://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere https://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance https://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @see https://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/*!\n * Overwriting mquery is needed to support a couple different near() forms found in older\n * versions of mongoose\n * near([1,1])\n * near(1,1)\n * near(field, [1,2])\n * near(field, 1, 2)\n * In addition to all of the normal forms supported by mquery\n */\n\nQuery.prototype.near = function() {\n  const params = [];\n  const sphere = this._mongooseOptions.nearSphere;\n\n  // TODO refactor\n\n  if (arguments.length === 1) {\n    if (Array.isArray(arguments[0])) {\n      params.push({ center: arguments[0], spherical: sphere });\n    } else if (typeof arguments[0] === 'string') {\n      // just passing a path\n      params.push(arguments[0]);\n    } else if (utils.isObject(arguments[0])) {\n      if (typeof arguments[0].spherical !== 'boolean') {\n        arguments[0].spherical = sphere;\n      }\n      params.push(arguments[0]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 2) {\n    if (typeof arguments[0] === 'number' && typeof arguments[1] === 'number') {\n      params.push({ center: [arguments[0], arguments[1]], spherical: sphere });\n    } else if (typeof arguments[0] === 'string' && Array.isArray(arguments[1])) {\n      params.push(arguments[0]);\n      params.push({ center: arguments[1], spherical: sphere });\n    } else if (typeof arguments[0] === 'string' && utils.isObject(arguments[1])) {\n      params.push(arguments[0]);\n      if (typeof arguments[1].spherical !== 'boolean') {\n        arguments[1].spherical = sphere;\n      }\n      params.push(arguments[1]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 3) {\n    if (typeof arguments[0] === 'string' && typeof arguments[1] === 'number'\n        && typeof arguments[2] === 'number') {\n      params.push(arguments[0]);\n      params.push({ center: [arguments[1], arguments[2]], spherical: sphere });\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else {\n    throw new TypeError('invalid argument');\n  }\n\n  return Query.base.near.apply(this, params);\n};\n\n/**\n * _DEPRECATED_ Specifies a `$nearSphere` condition\n *\n * #### Example\n *\n *     query.where('loc').nearSphere({ center: [10, 10], maxDistance: 5 });\n *\n * **Deprecated.** Use `query.near()` instead with the `spherical` option set to `true`.\n *\n * #### Example\n *\n *     query.where('loc').near({ center: [10, 10], spherical: true });\n *\n * @deprecated\n * @see near() #query_Query-near\n * @see $near https://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere https://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance https://docs.mongodb.org/manual/reference/operator/maxDistance/\n */\n\nQuery.prototype.nearSphere = function() {\n  this._mongooseOptions.nearSphere = true;\n  this.near.apply(this, arguments);\n  return this;\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js)\n * This function *only* works for `find()` queries.\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * #### Example\n *\n *     for await (const doc of Model.aggregate([{ $sort: { name: 1 } }])) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method Symbol.asyncIterator\n * @memberOf Query\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  Query.prototype[Symbol.asyncIterator] = function() {\n    return this.cursor().transformNull()._transformForAsyncIterator();\n  };\n}\n\n/**\n * Specifies a `$polygon` condition\n *\n * #### Example\n *\n *     query.where('loc').within().polygon([10, 20], [13, 25], [7, 15]);\n *     query.polygon('loc', [10, 20], [13, 25], [7, 15]);\n *\n * @method polygon\n * @memberOf Query\n * @instance\n * @param {String|Array} [path]\n * @param {Array|Object} [coordinatePairs...]\n * @return {Query} this\n * @see $polygon https://docs.mongodb.org/manual/reference/operator/polygon/\n * @see https://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a `$box` condition\n *\n * #### Example\n *\n *     const lowerLeft = [40.73083, -73.99756]\n *     const upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box({ ll : lowerLeft, ur : upperRight })\n *\n * @method box\n * @memberOf Query\n * @instance\n * @see $box https://docs.mongodb.org/manual/reference/operator/box/\n * @see within() Query#within #query_Query-within\n * @see https://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @param {Object} val\n * @param [Array] Upper Right Coords\n * @return {Query} this\n * @api public\n */\n\n/*!\n * this is needed to support the mongoose syntax of:\n * box(field, { ll : [x,y], ur : [x2,y2] })\n * box({ ll : [x,y], ur : [x2,y2] })\n */\n\nQuery.prototype.box = function(ll, ur) {\n  if (!Array.isArray(ll) && utils.isObject(ll)) {\n    ur = ll.ur;\n    ll = ll.ll;\n  }\n  return Query.base.box.call(this, ll, ur);\n};\n\n/**\n * Specifies a `$center` or `$centerSphere` condition.\n *\n * #### Example\n *\n *     const area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n *     // spherical calculations\n *     const area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n * @method circle\n * @memberOf Query\n * @instance\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see $center https://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere https://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @see $geoWithin https://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @see https://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * _DEPRECATED_ Alias for [circle](#query_Query-circle)\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * @deprecated\n * @method center\n * @memberOf Query\n * @instance\n * @api public\n */\n\nQuery.prototype.center = Query.base.circle;\n\n/**\n * _DEPRECATED_ Specifies a `$centerSphere` condition\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * #### Example\n *\n *     const area = { center: [50, 50], radius: 10 };\n *     query.where('loc').within().centerSphere(area);\n *\n * @deprecated\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see https://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $centerSphere https://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @api public\n */\n\nQuery.prototype.centerSphere = function() {\n  if (arguments[0] != null && typeof arguments[0].constructor === 'function' && arguments[0].constructor.name === 'Object') {\n    arguments[0].spherical = true;\n  }\n\n  if (arguments[1] != null && typeof arguments[1].constructor === 'function' && arguments[1].constructor.name === 'Object') {\n    arguments[1].spherical = true;\n  }\n\n  Query.base.circle.apply(this, arguments);\n};\n\n/**\n * Determines if field selection has been made.\n *\n * @method selected\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively(); // false\n *     query.select('name');\n *     query.selectedInclusively(); // true\n *\n * @method selectedInclusively\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selectedInclusively = function selectedInclusively() {\n  return isInclusive(this._fields);\n};\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExclusively(); // false\n *     query.select('-name');\n *     query.selectedExclusively(); // true\n *     query.selectedInclusively(); // false\n *\n * @method selectedExclusively\n * @memberOf Query\n * @instance\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selectedExclusively = function selectedExclusively() {\n  return isExclusive(this._fields);\n};\n\n/**\n * The model this query is associated with.\n *\n * #### Example:\n *\n *     const q = MyModel.find();\n *     q.model === MyModel; // true\n *\n * @api public\n * @property model\n * @memberOf Query\n * @instance\n */\n\nQuery.prototype.model;\n\n/*!\n * Export\n */\n\nmodule.exports = Query;\n"],"mappings":"AAAA;AAEA;AACA;AACA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,kBAAD,CAArC;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,uBAAD,CAA7B;;AACA,MAAMI,oBAAoB,GAAGJ,OAAO,CAAC,yBAAD,CAApC;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,sBAAD,CAA3B;;AACA,MAAMM,cAAc,GAAGN,OAAO,CAAC,UAAD,CAAP,CAAoBO,GAApB,GAA0BD,cAAjD;;AACA,MAAME,eAAe,GAAGR,OAAO,CAAC,oBAAD,CAA/B;;AACA,MAAM;EAAES,oBAAF;EAAwBC;AAAxB,IAA+CV,OAAO,CAAC,mCAAD,CAA5D;;AACA,MAAMW,iBAAiB,GAAGX,OAAO,CAAC,oCAAD,CAAjC;;AACA,MAAMY,IAAI,GAAGZ,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMa,gBAAgB,GAAGb,OAAO,CAAC,mCAAD,CAAhC;;AACA,MAAMc,UAAU,GAAGd,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAMe,UAAU,GAAGf,OAAO,CAAC,4BAAD,CAA1B;;AACA,MAAMgB,YAAY,GAAGhB,OAAO,CAAC,8BAAD,CAA5B;;AACA,MAAMiB,iBAAiB,GAAGjB,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMkB,uBAAuB,GAAGlB,OAAO,CAAC,iDAAD,CAAvC;;AACA,MAAMmB,aAAa,GAAGnB,OAAO,CAAC,+BAAD,CAA7B;;AACA,MAAMoB,OAAO,GAAGpB,OAAO,CAAC,gBAAD,CAAvB;;AACA,MAAMqB,SAAS,GAAGrB,OAAO,CAAC,qBAAD,CAAzB;;AACA,MAAMsB,WAAW,GAAGtB,OAAO,CAAC,kCAAD,CAA3B;;AACA,MAAMuB,WAAW,GAAGvB,OAAO,CAAC,kCAAD,CAA3B;;AACA,MAAMwB,SAAS,GAAGxB,OAAO,CAAC,gCAAD,CAAzB;;AACA,MAAMyB,MAAM,GAAGzB,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM0B,eAAe,GAAG1B,OAAO,CAAC,sCAAD,CAA/B;;AACA,MAAM2B,wBAAwB,GAAG3B,OAAO,CAAC,2CAAD,CAAxC;;AACA,MAAM4B,cAAc,GAAG5B,OAAO,CAAC,gCAAD,CAA9B;;AACA,MAAM6B,kBAAkB,GAAG7B,OAAO,CAAC,oCAAD,CAAlC;;AACA,MAAM8B,qBAAqB,GAAG9B,OAAO,CAAC,uCAAD,CAArC;;AACA,MAAM+B,mBAAmB,GAAG/B,OAAO,CAAC,+BAAD,CAAnC;;AACA,MAAMgC,gBAAgB,GAAGhC,OAAO,CAAC,4BAAD,CAAhC;;AACA,MAAMiC,IAAI,GAAGjC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMkC,KAAK,GAAGlC,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMmC,QAAQ,GAAGnC,OAAO,CAAC,0BAAD,CAAxB;;AACA,MAAMoC,SAAS,GAAGpC,OAAO,CAAC,2BAAD,CAAzB;;AAEA,MAAMqC,kBAAkB,GAAG,IAAIC,GAAJ,CAAQ,CACjC,cADiC,EAEjC,WAFiC,EAGjC,WAHiC,EAIjC,SAJiC,EAKjC,SALiC,EAMjC,MANiC,EAOjC,GAPiC,EAQjC,MARiC,EASjC,OATiC,EAUjC,SAViC,EAWjC,WAXiC,EAYjC,SAZiC,EAajC,UAbiC,EAcjC,YAdiC,EAejC,MAfiC,EAgBjC,QAhBiC,EAiBjC,MAjBiC,EAkBjC,OAlBiC,EAmBjC,MAnBiC,EAoBjC,UApBiC,EAqBjC,GArBiC,EAsBjC,cAtBiC,EAuBjC,UAvBiC,CAAR,CAA3B;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAT,CAAeC,UAAf,EAA2BC,OAA3B,EAAoCC,KAApC,EAA2CC,UAA3C,EAAuD;EACrD;EACA,IAAI,CAAC,KAAKC,gBAAV,EAA4B;IAC1B,KAAKA,gBAAL,GAAwB,EAAxB;EACD;;EACDH,OAAO,GAAGA,OAAO,IAAI,EAArB;EAEA,KAAKI,WAAL,GAAmB,EAAnB;EACA,KAAKC,MAAL,GAAc,IAAI5C,MAAJ,EAAd;EACA,KAAK6C,eAAL,GAAuB,IAAvB,CATqD,CAWrD;EACA;;EACA,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYP,OAAZ,CAAb;;EACA,KAAK,MAAMS,GAAX,IAAkBF,IAAlB,EAAwB;IACtB,KAAKJ,gBAAL,CAAsBM,GAAtB,IAA6BT,OAAO,CAACS,GAAD,CAApC;EACD;;EAED,IAAIP,UAAJ,EAAgB;IACd,KAAKQ,kBAAL,GAA0BR,UAA1B;EACD;;EAED,IAAID,KAAJ,EAAW;IACT,KAAKA,KAAL,GAAaA,KAAb;IACA,KAAKU,MAAL,GAAcV,KAAK,CAACU,MAApB;EACD,CAzBoD,CA4BrD;EACA;;;EACA,IAAI,KAAKV,KAAL,IAAc,KAAKA,KAAL,CAAWW,UAA7B,EAAyC;IACvC,KAAKC,IAAL;EACD,CAhCoD,CAkCrD;;;EACA7B,MAAM,CAAC8B,IAAP,CAAY,IAAZ,EAAkB,IAAlB,EAAwBd,OAAxB;;EACA,IAAIE,UAAJ,EAAgB;IACd,KAAKA,UAAL,CAAgBA,UAAhB;EACD;;EAED,IAAIH,UAAJ,EAAgB;IACd,KAAKgB,IAAL,CAAUhB,UAAV;EACD;;EAED,KAAKC,OAAL,GAAe,KAAKA,OAAL,IAAgB,EAA/B,CA5CqD,CA8CrD;EACA;;EACA,KAAKgB,cAAL,GAAsB,IAAtB;EAEA,MAAMC,SAAS,GAAG,QAChB,KAAKN,MADW,IAEhB,KAAKA,MAAL,CAAYX,OAFI,IAGhB,KAAKW,MAAL,CAAYX,OAAZ,CAAoBiB,SAHJ,IAGiB,IAHnC;;EAIA,IAAIA,SAAS,IAAI,IAAjB,EAAuB;IACrB,KAAKjB,OAAL,CAAaiB,SAAb,GAAyBA,SAAzB;EACD;AACF;AAED;AACA;AACA;;;AAEAnB,KAAK,CAACoB,SAAN,GAAkB,IAAIlC,MAAJ,EAAlB;AACAc,KAAK,CAACoB,SAAN,CAAgBC,WAAhB,GAA8BrB,KAA9B;AACAA,KAAK,CAACsB,IAAN,GAAapC,MAAM,CAACkC,SAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEApB,KAAK,CAACuB,aAAN,GAAsBrC,MAAM,CAACqC,aAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAvB,KAAK,CAACoB,SAAN,CAAgBI,aAAhB,GAAgC,SAASA,aAAT,GAAyB;EACvD,MAAMrB,KAAK,GAAG,KAAKA,KAAnB;EACA,MAAMsB,IAAI,GAAG,KAAKb,kBAAlB;;EAEA,MAAMc,WAAW,GAAG,UAASC,QAAT,EAAmBzB,OAAnB,EAA4B;IAC9C,IAAI,EAAE,gBAAgBwB,WAAlB,CAAJ,EAAoC;MAClC,OAAO,IAAIA,WAAJ,CAAgBC,QAAhB,EAA0BzB,OAA1B,CAAP;IACD;;IACD,KAAKG,gBAAL,GAAwBV,KAAK,CAACiC,KAAN,CAAYC,CAAC,CAACxB,gBAAd,CAAxB;IACAL,KAAK,CAACgB,IAAN,CAAW,IAAX,EAAiBW,QAAjB,EAA2BzB,OAAO,IAAI,IAAtC,EAA4CC,KAA5C,EAAmDsB,IAAnD;EACD,CAND;;EAQA/B,IAAI,CAACoC,QAAL,CAAcJ,WAAd,EAA2BvB,KAAK,CAACH,KAAjC,EAZuD,CAcvD;;EACA,MAAM6B,CAAC,GAAGH,WAAW,CAACN,SAAtB;EAEAS,CAAC,CAAC3B,OAAF,GAAY,EAAZ,CAjBuD,CAmBvD;EACA;EACA;;EACA,MAAMA,OAAO,GAAGQ,MAAM,CAACqB,MAAP,CAAc,EAAd,EAAkB,KAAK7B,OAAvB,CAAhB;;EACA,IAAIA,OAAO,CAAC8B,IAAR,IAAgB,IAApB,EAA0B;IACxBH,CAAC,CAACG,IAAF,CAAO9B,OAAO,CAAC8B,IAAf;IACA,OAAO9B,OAAO,CAAC8B,IAAf;EACD;;EACDH,CAAC,CAACI,UAAF,CAAa/B,OAAb;EAEA2B,CAAC,CAACK,EAAF,GAAO,KAAKA,EAAZ;;EACAL,CAAC,CAACM,WAAF;;EACAN,CAAC,CAACO,WAAF,GAAgBzC,KAAK,CAACiC,KAAN,CAAY,KAAKQ,WAAjB,CAAhB;EACAP,CAAC,CAACQ,OAAF,GAAY1C,KAAK,CAACiC,KAAN,CAAY,KAAKS,OAAjB,CAAZ;EACAR,CAAC,CAACS,OAAF,GAAY3C,KAAK,CAACiC,KAAN,CAAY,KAAKU,OAAjB,EAA0B;IACpCC,eAAe,EAAE;EADmB,CAA1B,CAAZ;EAGAV,CAAC,CAACW,KAAF,GAAU,KAAKA,KAAf;EACAX,CAAC,CAACY,SAAF,GAAc,KAAKA,SAAnB;EACAZ,CAAC,CAACa,WAAF,GAAgB,KAAKA,WAArB;EACAb,CAAC,CAACxB,gBAAF,GAAqB,KAAKA,gBAA1B;EAEA,OAAOqB,WAAP;AACD,CA1CD;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA1B,KAAK,CAACoB,SAAN,CAAgBQ,KAAhB,GAAwB,SAASA,KAAT,GAAiB;EACvC,MAAMzB,KAAK,GAAG,KAAKA,KAAnB;EACA,MAAMC,UAAU,GAAG,KAAKQ,kBAAxB;EAEA,MAAM+B,CAAC,GAAG,IAAI,KAAKtB,WAAT,CAAqB,EAArB,EAAyB,EAAzB,EAA6BlB,KAA7B,EAAoCC,UAApC,CAAV,CAJuC,CAMvC;EACA;EACA;;EACA,MAAMF,OAAO,GAAGQ,MAAM,CAACqB,MAAP,CAAc,EAAd,EAAkB,KAAK7B,OAAvB,CAAhB;;EACA,IAAIA,OAAO,CAAC8B,IAAR,IAAgB,IAApB,EAA0B;IACxBW,CAAC,CAACX,IAAF,CAAO9B,OAAO,CAAC8B,IAAf;IACA,OAAO9B,OAAO,CAAC8B,IAAf;EACD;;EACDW,CAAC,CAACV,UAAF,CAAa/B,OAAb;EAEAyC,CAAC,CAACT,EAAF,GAAO,KAAKA,EAAZ;;EACAS,CAAC,CAACR,WAAF;;EACAQ,CAAC,CAACP,WAAF,GAAgBzC,KAAK,CAACiC,KAAN,CAAY,KAAKQ,WAAjB,CAAhB;EACAO,CAAC,CAACN,OAAF,GAAY1C,KAAK,CAACiC,KAAN,CAAY,KAAKS,OAAjB,CAAZ;EACAM,CAAC,CAACL,OAAF,GAAY3C,KAAK,CAACiC,KAAN,CAAY,KAAKU,OAAjB,EAA0B;IACpCC,eAAe,EAAE;EADmB,CAA1B,CAAZ;EAGAI,CAAC,CAACH,KAAF,GAAU,KAAKA,KAAf;EACAG,CAAC,CAACF,SAAF,GAAc,KAAKA,SAAnB;EACAE,CAAC,CAACD,WAAF,GAAgB,KAAKA,WAArB;EACAC,CAAC,CAACtC,gBAAF,GAAqB,KAAKA,gBAA1B;EAEA,OAAOsC,CAAP;AACD,CA7BD;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA3C,KAAK,CAACoB,SAAN,CAAgBwB,KAAhB,GAAwB,YAAW;EACjC,IAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;IAC1B,OAAO,IAAP;EACD;;EAED,KAAKC,SAAL,CAAe,OAAf;;EAEA,IAAIC,IAAJ;EACA,IAAIC,GAAJ;;EAEA,IAAIJ,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;IAC1B,MAAMI,GAAG,GAAGL,SAAS,CAAC,CAAD,CAArB;;IACA,IAAI,OAAOK,GAAP,KAAe,QAAf,IAA2B,CAACC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAhC,EAAoD;MAClD,MAAMzC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYyC,GAAZ,CAAb;MACA,MAAMG,OAAO,GAAG5C,IAAI,CAACqC,MAArB;;MACA,KAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAApB,EAA6B,EAAEC,CAA/B,EAAkC;QAChC,KAAKV,KAAL,CAAWnC,IAAI,CAAC6C,CAAD,CAAf,EAAoBJ,GAAG,CAACzC,IAAI,CAAC6C,CAAD,CAAL,CAAvB;MACD;;MACD,OAAO,IAAP;IACD;;IACD,KAAKC,WAAL,CAAiB,OAAjB;;IACAP,IAAI,GAAG,KAAKR,KAAZ;IACAS,GAAG,GAAGJ,SAAS,CAAC,CAAD,CAAf;EACD,CAbD,MAaO,IAAIA,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;IACjC,IAAI,aAAa,OAAOD,SAAS,CAAC,CAAD,CAAjC,EAAsC;MACpC,KAAKU,WAAL,CAAiB,OAAjB;;MACAP,IAAI,GAAG,KAAKR,KAAZ;MACAS,GAAG,GAAG,CAACJ,SAAS,CAAC,CAAD,CAAV,EAAeA,SAAS,CAAC,CAAD,CAAxB,CAAN;IACD,CAJD,MAIO;MACLG,IAAI,GAAGH,SAAS,CAAC,CAAD,CAAhB;MACAI,GAAG,GAAGJ,SAAS,CAAC,CAAD,CAAf;IACD;EACF,CATM,MASA,IAAIA,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;IACjCE,IAAI,GAAGH,SAAS,CAAC,CAAD,CAAhB;IACAI,GAAG,GAAG,CAACJ,SAAS,CAAC,CAAD,CAAV,EAAeA,SAAS,CAAC,CAAD,CAAxB,CAAN;EACD;;EAED,MAAMhB,CAAC,GAAG,EAAV;EACAA,CAAC,CAACmB,IAAD,CAAD,GAAU;IAAEQ,MAAM,EAAEP;EAAV,CAAV;EACA,KAAKQ,MAAL,CAAY5B,CAAZ;EAEA,OAAO,IAAP;AACD,CA1CD;AA4CA;AACA;AACA;;;AAEA,MAAM6B,WAAW,GAAG,IAAI3D,GAAJ,CAAQH,QAAR,CAApB;;AAEAI,KAAK,CAACoB,SAAN,CAAgBe,WAAhB,GAA8B,YAAW;EACvC,IAAI,KAAKD,EAAL,IAAW,IAAX,IAAmB,CAACwB,WAAW,CAACC,GAAZ,CAAgB,KAAKzB,EAArB,CAAxB,EAAkD;IAChD,KAAK0B,KAAL,CAAW,IAAIC,KAAJ,CAAU,8BAA8B,KAAK3B,EAAnC,GAAwC,GAAlD,CAAX;EACD;AACF,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAlC,KAAK,CAACoB,SAAN,CAAgB0C,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B,EAK6B;IAC3B,OAAQ,GAAE,KAAK/B,KAAL,CAAWuF,SAAU,IAAG,KAAKxD,EAAG,IAAGxC,IAAI,CAACiG,OAAL,CAAa,KAAKvD,WAAlB,CAA+B,KAAI1C,IAAI,CAACiG,OAAL,CAAa,KAAKrD,OAAlB,CAA2B,GAA3G;EACD,CAtB4C,CAwB7C;;;EACA,OAAQ,GAAE,KAAKnC,KAAL,CAAWuF,SAAU,IAAG,KAAKxD,EAAG,IAA1C;AACD,CA1BD;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAlC,KAAK,CAACoB,SAAN,CAAgBwE,OAAhB,GAA0B,SAASA,OAAT,CAAiB1B,CAAjB,EAAoB;EAC5C,IAAIA,CAAC,IAAI,IAAT,EAAe;IACb,OAAO,KAAKhE,OAAL,CAAa0F,OAApB;EACD;;EACD,KAAK1F,OAAL,CAAa0F,OAAb,GAAuB1B,CAAvB;EACA,OAAO,IAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAlE,KAAK,CAACoB,SAAN,CAAgByE,YAAhB,GAA+B,SAASA,YAAT,CAAsB5C,GAAtB,EAA2B;EACxD,IAAIA,GAAG,IAAI,IAAX,EAAiB;IACf,OAAO,KAAK/C,OAAL,CAAa2F,YAApB;IACA,OAAO,IAAP;EACD;;EACD,KAAK3F,OAAL,CAAa2F,YAAb,GAA4B5C,GAA5B;EACA,OAAO,IAAP;AACD,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAjD,KAAK,CAACoB,SAAN,CAAgB0E,CAAhB,GAAoB,SAASA,CAAT,CAAW7C,GAAX,EAAgB;EAClC,IAAIA,GAAG,IAAI,IAAX,EAAiB;IACf,OAAO,KAAK/C,OAAL,CAAa4F,CAApB;EACD;;EACD,IAAI,KAAK5F,OAAL,CAAa2F,YAAb,IAA6B,IAAjC,EAAuC;IACrC,KAAK3F,OAAL,CAAa2F,YAAb,CAA0BC,CAA1B,GAA8B7C,GAA9B;EACD,CAFD,MAEO;IACL,KAAK/C,OAAL,CAAa4F,CAAb,GAAiB7C,GAAjB;EACD;;EACD,OAAO,IAAP;AACD,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAjD,KAAK,CAACoB,SAAN,CAAgB2E,CAAhB,GAAoB,SAASA,CAAT,CAAW9C,GAAX,EAAgB;EAClC,IAAIA,GAAG,IAAI,IAAX,EAAiB;IACf,OAAO,KAAK/C,OAAL,CAAa6F,CAApB;EACD;;EACD,IAAI,KAAK7F,OAAL,CAAa2F,YAAb,IAA6B,IAAjC,EAAuC;IACrC,KAAK3F,OAAL,CAAa2F,YAAb,CAA0BE,CAA1B,GAA8B9C,GAA9B;EACD,CAFD,MAEO;IACL,KAAK/C,OAAL,CAAa6F,CAAb,GAAiB9C,GAAjB;EACD;;EACD,OAAO,IAAP;AACD,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAjD,KAAK,CAACoB,SAAN,CAAgB4E,QAAhB,GAA2B,SAASA,QAAT,CAAkBC,EAAlB,EAAsB;EAC/C,IAAIA,EAAE,IAAI,IAAV,EAAgB;IACd,OAAO,KAAK/F,OAAL,CAAa8F,QAApB;EACD;;EACD,IAAI,KAAK9F,OAAL,CAAa2F,YAAb,IAA6B,IAAjC,EAAuC;IACrC,KAAK3F,OAAL,CAAa2F,YAAb,CAA0BG,QAA1B,GAAqCC,EAArC;EACD,CAFD,MAEO;IACL,KAAK/F,OAAL,CAAa8F,QAAb,GAAwBC,EAAxB;EACD;;EACD,OAAO,IAAP;AACD,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAjG,KAAK,CAACoB,SAAN,CAAgB8E,UAAhB,GAA6B,YAAW;EACtC,OAAO,KAAKhG,OAAZ;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAF,KAAK,CAACoB,SAAN,CAAgBa,UAAhB,GAA6B,UAAS/B,OAAT,EAAkBiG,SAAlB,EAA6B;EACxD;EACA,IAAIA,SAAJ,EAAe;IACb;IACA,KAAK9F,gBAAL,GAAyBH,OAAO,IAAIP,KAAK,CAACiC,KAAN,CAAY1B,OAAZ,CAAZ,IAAqC,EAA7D;IACA,KAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;;IAEA,IAAI,cAAcA,OAAlB,EAA2B;MACzB,KAAKkG,QAAL,CAAc,KAAK/F,gBAAnB;IACD;;IACD,OAAO,IAAP;EACD;;EACD,IAAIH,OAAO,IAAI,IAAf,EAAqB;IACnB,OAAO,IAAP;EACD;;EACD,IAAI,OAAOA,OAAP,KAAmB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BC,OAAvB;EACD;;EACD,OAAO,IAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA3G,KAAK,CAACoB,SAAN,CAAgBwF,YAAhB,GAA+B,UAAS1C,CAAT,EAAY;EACzC,IAAIrB,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;IAC1B,KAAK5C,OAAL,CAAa0G,YAAb,GAA4B,IAA5B;EACD,CAFD,MAEO,IAAI1C,CAAC,KAAK,KAAV,EAAiB;IACtB,OAAO,KAAKhE,OAAL,CAAa0G,YAApB;EACD,CAFM,MAEA;IACL,KAAK1G,OAAL,CAAa0G,YAAb,GAA4B1C,CAA5B;EACD;;EACD,OAAO,IAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAlE,KAAK,CAACoB,SAAN,CAAgByF,SAAhB,GAA4B,UAASZ,EAAT,EAAa;EACvC,KAAK/F,OAAL,CAAa2G,SAAb,GAAyBZ,EAAzB;EACA,OAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAjG,KAAK,CAACoB,SAAN,CAAgB0F,SAAhB,GAA4B,YAAW;EACrC,OAAO,KAAK1E,WAAZ;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEApC,KAAK,CAACoB,SAAN,CAAgB2F,QAAhB,GAA2B,YAAW;EACpC,OAAO,KAAK3E,WAAZ;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEApC,KAAK,CAACoB,SAAN,CAAgB4F,QAAhB,GAA2B,UAAS/D,GAAT,EAAc;EACvC,KAAKb,WAAL,GAAmBa,GAAnB;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAjD,KAAK,CAACoB,SAAN,CAAgB6F,SAAhB,GAA4B,YAAW;EACrC,OAAO,KAAK3E,OAAZ;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAtC,KAAK,CAACoB,SAAN,CAAgB8F,SAAhB,GAA4B,UAASjE,GAAT,EAAc;EACxC,KAAKX,OAAL,GAAeW,GAAf;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAjD,KAAK,CAACoB,SAAN,CAAgB+F,cAAhB,GAAiC,YAAW;EAC1C,OAAOxH,KAAK,CAACiC,KAAN,CAAY,KAAKS,OAAjB,CAAP;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEArC,KAAK,CAACoB,SAAN,CAAgBgG,cAAhB,GAAiC,YAAW;EAC1C,MAAMC,MAAM,GAAG1H,KAAK,CAACiC,KAAN,CAAY,KAAKU,OAAjB,EAA0B;IACvCgF,SAAS,EAAE,KAD4B;IAEvCC,UAAU,EAAE;EAF2B,CAA1B,CAAf;EAIA,MAAMC,GAAG,GAAG9G,MAAM,CAACD,IAAP,CAAY4G,MAAZ,CAAZ;EACA,IAAI/D,CAAC,GAAGkE,GAAG,CAAC1E,MAAZ;EACA,MAAM2E,GAAG,GAAG,EAAZ;;EAEA,OAAOnE,CAAC,EAAR,EAAY;IACV,MAAMpB,EAAE,GAAGsF,GAAG,CAAClE,CAAD,CAAd;;IAEA,IAAI,KAAKpD,OAAL,CAAaiG,SAAjB,EAA4B;MAC1BsB,GAAG,CAACvF,EAAD,CAAH,GAAUmF,MAAM,CAACnF,EAAD,CAAhB;MACA;IACD;;IAED,IAAI,QAAQA,EAAE,CAAC,CAAD,CAAd,EAAmB;MACjB;MACA,IAAI,CAACuF,GAAG,CAACC,IAAT,EAAe;QACb,IAAIL,MAAM,CAACK,IAAX,EAAiB;UACfD,GAAG,CAACC,IAAJ,GAAWL,MAAM,CAACK,IAAlB;QACD,CAFD,MAEO;UACLD,GAAG,CAACC,IAAJ,GAAW,EAAX;QACD;MACF;;MACDD,GAAG,CAACC,IAAJ,CAASxF,EAAT,IAAemF,MAAM,CAACnF,EAAD,CAArB;MACAsF,GAAG,CAACG,MAAJ,CAAWrE,CAAX,EAAc,CAAd;MACA,IAAI,CAAC,CAACkE,GAAG,CAACI,OAAJ,CAAY,MAAZ,CAAN,EAA2BJ,GAAG,CAACK,IAAJ,CAAS,MAAT;IAC5B,CAZD,MAYO,IAAI,WAAW3F,EAAf,EAAmB;MACxB,IAAI,CAACuF,GAAG,CAACC,IAAT,EAAe;QACbD,GAAG,CAACvF,EAAD,CAAH,GAAUmF,MAAM,CAACnF,EAAD,CAAhB;MACD;IACF,CAJM,MAIA;MACLuF,GAAG,CAACvF,EAAD,CAAH,GAAUmF,MAAM,CAACnF,EAAD,CAAhB;IACD;EACF;;EAED,OAAOuF,GAAP;AACD,CAvCD;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEAzH,KAAK,CAACoB,SAAN,CAAgB0G,eAAhB,GAAkC,UAAS3H,KAAT,EAAgB;EAChD,MAAMD,OAAO,GAAGP,KAAK,CAACiC,KAAN,CAAY,KAAK1B,OAAjB,CAAhB;EACA,OAAOA,OAAO,CAACkG,QAAf;EACAjG,KAAK,GAAGA,KAAK,IAAI,KAAKA,KAAtB;;EAEA,IAAI,CAACA,KAAL,EAAY;IACV,OAAOD,OAAP;EACD,CAP+C,CAShD;;;EACA9B,iBAAiB,CAAC+B,KAAK,CAACU,MAAP,EAAeX,OAAf,CAAjB;EAEA,MAAMsF,cAAc,GAAGrF,KAAK,IAC5BA,KAAK,CAACU,MADiB,IAEvBV,KAAK,CAACU,MAAN,CAAaX,OAFU,IAGvBC,KAAK,CAACU,MAAN,CAAaX,OAAb,CAAqBmF,IAHrB;;EAIA,IAAI,EAAE,oBAAoBnF,OAAtB,KAAkCsF,cAAtC,EAAsD;IACpDtF,OAAO,CAACsF,cAAR,GAAyBA,cAAzB;EACD;;EAED,IAAItF,OAAO,CAAC6H,MAAR,KAAmB,KAAK,CAA5B,EAA+B;IAC7B7H,OAAO,CAAC6H,MAAR,GAAiB,CAAC,CAAC7H,OAAO,CAAC6H,MAA3B;EACD;;EACD,IAAI7H,OAAO,CAAC2F,YAAZ,EAA0B;IACxB,IAAI3F,OAAO,CAAC6F,CAAZ,EAAe;MACb7F,OAAO,CAAC2F,YAAR,CAAqBE,CAArB,GAAyB7F,OAAO,CAAC6F,CAAjC;MACA,OAAO7F,OAAO,CAAC6F,CAAf;IACD;;IACD,IAAI7F,OAAO,CAAC4F,CAAZ,EAAe;MACb5F,OAAO,CAAC2F,YAAR,CAAqBC,CAArB,GAAyB5F,OAAO,CAAC4F,CAAjC;MACA,OAAO5F,OAAO,CAAC4F,CAAf;IACD;;IACD,IAAI5F,OAAO,CAAC8F,QAAZ,EAAsB;MACpB9F,OAAO,CAAC2F,YAAR,CAAqBG,QAArB,GAAgC9F,OAAO,CAAC8F,QAAxC;MACA,OAAO9F,OAAO,CAAC8F,QAAf;IACD;EACF;;EACD,OAAO9F,OAAP;AACD,CAtCD;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAF,KAAK,CAACoB,SAAN,CAAgBL,IAAhB,GAAuB,UAASmD,CAAT,EAAY;EACjC,KAAK7D,gBAAL,CAAsBU,IAAtB,GAA6B8B,SAAS,CAACC,MAAV,GAAmBoB,CAAnB,GAAuB,IAApD;EACA,OAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAlE,KAAK,CAACoB,SAAN,CAAgB4G,GAAhB,GAAsB,UAAShF,IAAT,EAAeC,GAAf,EAAoB;EACxC,IAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;IAC5B,MAAMvC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYuC,IAAZ,CAAb;;IACA,KAAK,MAAMrC,GAAX,IAAkBF,IAAlB,EAAwB;MACtB,KAAKuH,GAAL,CAASrH,GAAT,EAAcqC,IAAI,CAACrC,GAAD,CAAlB;IACD;;IACD,OAAO,IAAP;EACD;;EAED,KAAK2B,OAAL,GAAe,KAAKA,OAAL,IAAgB,EAA/B;EACA,KAAKA,OAAL,CAAaoF,IAAb,GAAoB,KAAKpF,OAAL,CAAaoF,IAAb,IAAqB,EAAzC;EACA,KAAKpF,OAAL,CAAaoF,IAAb,CAAkB1E,IAAlB,IAA0BC,GAA1B;EACA,OAAO,IAAP;AACD,CAbD;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAjD,KAAK,CAACoB,SAAN,CAAgBpD,GAAhB,GAAsB,SAASA,GAAT,CAAagF,IAAb,EAAmB;EACvC,MAAMqE,MAAM,GAAG,KAAK/E,OAApB;;EACA,IAAI+E,MAAM,IAAI,IAAd,EAAoB;IAClB,OAAO,KAAK,CAAZ;EACD;;EACD,MAAMK,IAAI,GAAGL,MAAM,CAACK,IAApB;;EACA,IAAIA,IAAI,IAAI,IAAZ,EAAkB;IAChB,OAAOL,MAAM,CAACrE,IAAD,CAAb;EACD;;EAED,IAAIrD,KAAK,CAAC+E,sBAAN,CAA6B2C,MAA7B,EAAqCrE,IAArC,CAAJ,EAAgD;IAC9C,OAAOqE,MAAM,CAACrE,IAAD,CAAb;EACD;;EACD,IAAIrD,KAAK,CAAC+E,sBAAN,CAA6BgD,IAA7B,EAAmC1E,IAAnC,CAAJ,EAA8C;IAC5C,OAAO0E,IAAI,CAAC1E,IAAD,CAAX;EACD;;EAED,OAAO,KAAK,CAAZ;AACD,CAlBD;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAhD,KAAK,CAACoB,SAAN,CAAgBwC,KAAhB,GAAwB,SAASA,KAAT,CAAeO,GAAf,EAAoB;EAC1C,IAAItB,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;IAC1B,OAAO,KAAKmF,MAAZ;EACD;;EAED,KAAKA,MAAL,GAAc9D,GAAd;EACA,OAAO,IAAP;AACD,CAPD;AASA;AACA;AACA;;;AAEAnE,KAAK,CAACoB,SAAN,CAAgB8G,eAAhB,GAAkC,SAASA,eAAT,GAA2B;EAC3D,IAAI,KAAKD,MAAL,IAAe,IAAf,IAAuB,EAAE,KAAKA,MAAL,YAAuBzK,SAAzB,CAA3B,EAAgE;IAC9D;EACD;;EACD,OAAO,KAAKoG,KAAL,CAAW,IAAX,CAAP;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA5D,KAAK,CAACoB,SAAN,CAAgB+G,eAAhB,GAAkC,UAASjE,CAAT,EAAY;EAC5C,IAAIrB,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;IACxB,KAAKzC,gBAAL,GAAwB6D,CAAxB;EACD;;EACD,OAAO,KAAK7D,gBAAZ;AACD,CALD;AAOA;AACA;AACA;;;AAEAL,KAAK,CAACoB,SAAN,CAAgBgH,eAAhB,GAAkC,YAAW;EAC3C,IAAIC,iBAAiB,GAAG5D,SAAxB;;EACA,IAAI,KAAKtE,KAAL,IAAc,IAAd,IAAsBR,KAAK,CAAC+E,sBAAN,CAA6B,KAAKvE,KAAL,CAAWwE,EAAX,CAAczE,OAA3C,EAAoD,gBAApD,CAA1B,EAAiG;IAC/FmI,iBAAiB,GAAG,KAAKlI,KAAL,CAAWwE,EAAX,CAAczE,OAAd,CAAsBb,cAA1C;EACD,CAFD,MAEO,IAAI,KAAKc,KAAL,IAAc,IAAd,IAAsBR,KAAK,CAAC+E,sBAAN,CAA6B,KAAKvE,KAAL,CAAWmB,IAAX,CAAgBpB,OAA7C,EAAsD,gBAAtD,CAA1B,EAAmG;IACxGmI,iBAAiB,GAAG,KAAKlI,KAAL,CAAWmB,IAAX,CAAgBpB,OAAhB,CAAwBb,cAA5C;EACD,CAFM,MAEA;IACLgJ,iBAAiB,GAAG,KAAKhI,gBAAL,CAAsBhB,cAA1C;EACD;;EAED,IAAIgJ,iBAAJ,EAAuB;IACrBhJ,cAAc,CAAC,KAAK+C,WAAN,CAAd;EACD;;EAED,IAAI;IACF,KAAK/D,IAAL,CAAU,KAAK8B,KAAf;;IACA,KAAK+H,eAAL;EACD,CAHD,CAGE,OAAO/D,GAAP,EAAY;IACZ,KAAKP,KAAL,CAAWO,GAAX;EACD;AACF,CApBD;AAsBA;AACA;AACA;;;AAEA,SAASmE,iBAAT,CAA2BC,KAA3B,EAAkC;EAChC,IAAI;IACFjK,gBAAgB,CAACiK,KAAD,CAAhB;EACD,CAFD,CAEE,OAAOpE,GAAP,EAAY;IACZoE,KAAK,CAAC3E,KAAN,CAAYO,GAAZ;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnE,KAAK,CAACoB,SAAN,CAAgBoH,KAAhB,GAAwB3I,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EAEnD,KAAKL,eAAL;;EAEA,IAAI,KAAKxE,KAAL,MAAgB,IAApB,EAA0B;IACxB6E,QAAQ,CAAC,KAAK7E,KAAL,EAAD,CAAR;IACA,OAAO,IAAP;EACD;;EAED6E,QAAQ,GAAGC,kBAAkB,CAAC,IAAD,EAAOD,QAAP,CAA7B;;EAEA,KAAKE,WAAL;;EACA,KAAKtG,OAAL,GAAe,KAAKuG,WAAL,CAAiB,KAAKvG,OAAtB,CAAf;;EAEA,MAAMkC,MAAM,GAAG,KAAK4C,cAAL,EAAf;;EACA,MAAMgB,eAAe,GAAG,KAAK9H,gBAA7B;;EACA,MAAMwI,KAAK,GAAG,IAAd;;EACA,MAAMrE,kBAAkB,GAAGqE,KAAK,CAACvE,mBAAN,IAA6B,EAAxD;EAEApG,oBAAoB,CAAC,KAAKgC,OAAN,EAAe,KAAKC,KAApB,CAApB;EACAhC,kBAAkB,CAAC,KAAK+B,OAAN,EAAe,KAAKC,KAApB,CAAlB,CApBmD,CAsBnD;EACA;;EACA,MAAM2I,mBAAmB,GAAGpI,MAAM,CAACqB,MAAP,CAAc,EAAd,EAAkB;IAC5C6D,OAAO,EAAE,QAAQ,KAAK1F,OAAb,IAAwB,KAAKA,OAAL,CAAa0F,OAArC,IAAgD;EADb,CAAlB,CAA5B;;EAIA,MAAMmD,EAAE,GAAG,CAAC5E,GAAD,EAAM6E,IAAN,KAAe;IACxB,IAAI7E,GAAJ,EAAS;MACP,OAAOsE,QAAQ,CAACtE,GAAD,CAAf;IACD;;IAED,IAAI6E,IAAI,CAAClG,MAAL,KAAgB,CAApB,EAAuB;MACrB,OAAO2F,QAAQ,CAAC,IAAD,EAAOO,IAAP,CAAf;IACD;;IACD,IAAI,KAAK9I,OAAL,CAAawG,OAAjB,EAA0B;MACxB,OAAO+B,QAAQ,CAAC,IAAD,EAAOO,IAAP,CAAf;IACD;;IACD,IAAI,CAACb,eAAe,CAAC/B,QAArB,EAA+B;MAC7B,MAAM6C,UAAU,GAAGJ,KAAK,CAAChI,MAAN,CAAaX,OAAb,CAAqB+I,UAAxC;;MACA,IAAId,eAAe,CAACpH,IAAhB,IAAwBoH,eAAe,CAACpH,IAAhB,CAAqBkI,UAArB,KAAoC,KAA5D,IAAqEA,UAAzE,EAAqF;QACnFD,IAAI,CAAC/D,OAAL,CAAciE,GAAD,IAAS;UACpB,IAAID,UAAU,IAAIC,GAAlB,EAAuB;YACrB,OAAOA,GAAG,CAACD,UAAD,CAAV;UACD;QACF,CAJD;MAKD;;MACD,OAAOd,eAAe,CAACpH,IAAhB,GACL0H,QAAQ,CAAC,IAAD,EAAOO,IAAP,CADH,GAELvK,YAAY,CAACoK,KAAK,CAAC1I,KAAP,EAAc6I,IAAd,EAAoBzE,MAApB,EAA4BC,kBAA5B,EAAgDsE,mBAAhD,EAAqEL,QAArE,CAFd;IAGD;;IAED,MAAMU,GAAG,GAAGtK,OAAO,CAACuK,0BAAR,CAAmCP,KAAnC,EAA0CV,eAA1C,CAAZ;;IAEA,IAAIA,eAAe,CAACpH,IAApB,EAA0B;MACxB,OAAO8H,KAAK,CAAC1I,KAAN,CAAYiG,QAAZ,CAAqB4C,IAArB,EAA2BG,GAA3B,EAAgCV,QAAhC,CAAP;IACD;;IAEDhK,YAAY,CAACoK,KAAK,CAAC1I,KAAP,EAAc6I,IAAd,EAAoBzE,MAApB,EAA4BC,kBAA5B,EAAgDsE,mBAAhD,EAAqE,CAAC3E,GAAD,EAAM6E,IAAN,KAAe;MAC9F,IAAI7E,GAAG,IAAI,IAAX,EAAiB;QACf,OAAOsE,QAAQ,CAACtE,GAAD,CAAf;MACD;;MACD0E,KAAK,CAAC1I,KAAN,CAAYiG,QAAZ,CAAqB4C,IAArB,EAA2BG,GAA3B,EAAgCV,QAAhC;IACD,CALW,CAAZ;EAMD,CArCD;;EAuCA,MAAMvI,OAAO,GAAG,KAAK4H,eAAL,EAAhB;;EACA5H,OAAO,CAACmE,UAAR,GAAqB,KAAK8C,cAAL,EAArB;EACA,MAAMkC,MAAM,GAAG,KAAKjH,WAApB;;EAEA,KAAKM,WAAL,CAAiBtC,UAAjB,CAA4Ba,IAA5B,CAAiCoI,MAAjC,EAAyCnJ,OAAzC,EAAkD,CAACiE,GAAD,EAAMmF,MAAN,KAAiB;IACjE,IAAInF,GAAG,IAAI,IAAX,EAAiB;MACf,OAAO4E,EAAE,CAAC5E,GAAD,CAAT;IACD;;IAED,IAAIjE,OAAO,CAACwG,OAAZ,EAAqB;MACnB,OAAO4C,MAAM,CAAC5C,OAAP,CAAeqC,EAAf,CAAP;IACD;;IACD,IAAI;MACF,OAAOO,MAAM,CAACC,OAAP,CAAeR,EAAf,CAAP;IACD,CAFD,CAEE,OAAO5E,GAAP,EAAY;MACZ,OAAO4E,EAAE,CAAC5E,GAAD,CAAT;IACD;EACF,CAbD;AAcD,CArFgC,CAAjC;AAuFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAnE,KAAK,CAACoB,SAAN,CAAgBH,IAAhB,GAAuB,UAAShB,UAAT,EAAqBwI,QAArB,EAA+B;EACpD,KAAKvG,EAAL,GAAU,MAAV;;EAEA,IAAI,OAAOjC,UAAP,KAAsB,UAA1B,EAAsC;IACpCwI,QAAQ,GAAGxI,UAAX;IACAA,UAAU,GAAG,EAAb;EACD;;EAEDA,UAAU,GAAGN,KAAK,CAAC6J,QAAN,CAAevJ,UAAf,CAAb;;EAEA,IAAIf,MAAM,CAACuK,QAAP,CAAgBxJ,UAAhB,CAAJ,EAAiC;IAC/B,KAAKyJ,KAAL,CAAWzJ,UAAX;IAEA0J,4BAA4B,CAAC,IAAD,CAA5B;EACD,CAJD,MAIO,IAAI1J,UAAU,IAAI,IAAlB,EAAwB;IAC7B,KAAK2D,KAAL,CAAW,IAAI/F,oBAAJ,CAAyBoC,UAAzB,EAAqC,QAArC,EAA+C,MAA/C,CAAX;EACD,CAhBmD,CAkBpD;;;EACA,IAAI,CAACwI,QAAL,EAAe;IACb,OAAOzI,KAAK,CAACsB,IAAN,CAAWL,IAAX,CAAgBD,IAAhB,CAAqB,IAArB,CAAP;EACD;;EAED,KAAK4I,IAAL,CAAUnB,QAAV;EAEA,OAAO,IAAP;AACD,CA1BD;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBsI,KAAhB,GAAwB,UAASG,MAAT,EAAiB;EACvC,IAAI,CAACA,MAAL,EAAa;IACX,OAAO,IAAP;EACD;;EAED,MAAMC,IAAI,GAAG;IAAE3D,SAAS,EAAE;EAAb,CAAb;;EAEA,IAAI0D,MAAM,YAAY7J,KAAtB,EAA6B;IAC3B;IAEA,IAAI6J,MAAM,CAACzH,WAAX,EAAwB;MACtBzC,KAAK,CAAC+J,KAAN,CAAY,KAAKtH,WAAjB,EAA8ByH,MAAM,CAACzH,WAArC,EAAkD0H,IAAlD;IACD;;IAED,IAAID,MAAM,CAACxH,OAAX,EAAoB;MAClB,KAAKA,OAAL,KAAiB,KAAKA,OAAL,GAAe,EAAhC;MACA1C,KAAK,CAAC+J,KAAN,CAAY,KAAKrH,OAAjB,EAA0BwH,MAAM,CAACxH,OAAjC,EAA0CyH,IAA1C;IACD;;IAED,IAAID,MAAM,CAAC3J,OAAX,EAAoB;MAClB,KAAKA,OAAL,KAAiB,KAAKA,OAAL,GAAe,EAAhC;MACAP,KAAK,CAAC+J,KAAN,CAAY,KAAKxJ,OAAjB,EAA0B2J,MAAM,CAAC3J,OAAjC,EAA0C4J,IAA1C;IACD;;IAED,IAAID,MAAM,CAACvH,OAAX,EAAoB;MAClB,KAAKA,OAAL,KAAiB,KAAKA,OAAL,GAAe,EAAhC;MACA3C,KAAK,CAACoK,UAAN,CAAiB,KAAKzH,OAAtB,EAA+BuH,MAAM,CAACvH,OAAtC;IACD;;IAED,IAAIuH,MAAM,CAACpH,SAAX,EAAsB;MACpB,KAAKA,SAAL,GAAiBoH,MAAM,CAACpH,SAAxB;IACD;;IAED9C,KAAK,CAAC+J,KAAN,CAAY,KAAKrJ,gBAAjB,EAAmCwJ,MAAM,CAACxJ,gBAA1C;IAEA,OAAO,IAAP;EACD,CApCsC,CAsCvC;;;EACAV,KAAK,CAAC+J,KAAN,CAAY,KAAKtH,WAAjB,EAA8ByH,MAA9B,EAAsCC,IAAtC;EAEA,OAAO,IAAP;AACD,CA1CD;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA9J,KAAK,CAACoB,SAAN,CAAgBD,SAAhB,GAA4B,UAAS0D,KAAT,EAAgB;EAC1C,IAAI,KAAK3E,OAAL,IAAgB,IAApB,EAA0B;IACxB,KAAKA,OAAL,GAAe,EAAf;EACD;;EACD,KAAKA,OAAL,CAAaiB,SAAb,GAAyB0D,KAAzB;EACA,OAAO,IAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;;;AAEA7E,KAAK,CAACoB,SAAN,CAAgB4I,YAAhB,GAA+B,UAASd,GAAT,EAAce,GAAd,EAAmBxB,QAAnB,EAA6B;EAC1D,IAAI,CAACS,GAAD,IAAQ,CAAC,KAAKhJ,OAAL,CAAagK,SAA1B,EAAqC;IACnC,OAAOzB,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;EACD;;EAED,MAAMtI,KAAK,GAAG,KAAKA,KAAnB;EACA,MAAMkE,UAAU,GAAG1E,KAAK,CAACiC,KAAN,CAAY,KAAKS,OAAjB,CAAnB;EACA,MAAMmC,kBAAkB,GAAG,KAAKF,mBAAL,IAA4B,EAAvD,CAP0D,CAQ1D;;EACA,MAAM6D,eAAe,GAAG,KAAK9H,gBAA7B,CAT0D,CAU1D;;EACA,MAAMH,OAAO,GAAG,KAAKA,OAArB;;EAEA,IAAIA,OAAO,CAACwG,OAAZ,EAAqB;IACnB,OAAO+B,QAAQ,CAAC,IAAD,EAAOS,GAAP,CAAf;EACD;;EAED,IAAI,CAACf,eAAe,CAAC/B,QAArB,EAA+B;IAC7B,MAAM6C,UAAU,GAAG,KAAKpI,MAAL,CAAYX,OAAZ,CAAoB+I,UAAvC;;IACA,IAAId,eAAe,CAACpH,IAAhB,IAAwBoH,eAAe,CAACpH,IAAhB,CAAqBkI,UAArB,KAAoC,KAA5D,IAAqEA,UAAzE,EAAqF;MACnF,IAAIA,UAAU,IAAIC,GAAlB,EAAuB;QACrB,OAAOA,GAAG,CAACD,UAAD,CAAV;MACD;IACF;;IACD,OAAOd,eAAe,CAACpH,IAAhB,GACLoJ,gBAAgB,CAACjB,GAAD,EAAMe,GAAN,EAAW/J,OAAX,EAAoBuI,QAApB,CADX,GAEL2B,WAAW,CAACjK,KAAD,EAAQ+I,GAAR,EAAae,GAAb,EAAkB/J,OAAlB,EAA2BmE,UAA3B,EAAuCG,kBAAvC,EACT,IADS,EACHiE,QADG,CAFb;EAID;;EAED,MAAMU,GAAG,GAAGtK,OAAO,CAACuK,0BAAR,CAAmC,IAAnC,EAAyC,KAAK/I,gBAA9C,CAAZ;;EACA,IAAI8H,eAAe,CAACpH,IAApB,EAA0B;IACxB,OAAOZ,KAAK,CAACiG,QAAN,CAAe8C,GAAf,EAAoBC,GAApB,EAAyB,CAAChF,GAAD,EAAM+E,GAAN,KAAc;MAC5C,IAAI/E,GAAG,IAAI,IAAX,EAAiB;QACf,OAAOsE,QAAQ,CAACtE,GAAD,CAAf;MACD;;MACDgG,gBAAgB,CAACjB,GAAD,EAAMe,GAAN,EAAW/J,OAAX,EAAoBuI,QAApB,CAAhB;IACD,CALM,CAAP;EAMD;;EAED2B,WAAW,CAACjK,KAAD,EAAQ+I,GAAR,EAAae,GAAb,EAAkB/J,OAAlB,EAA2BmE,UAA3B,EAAuCG,kBAAvC,EAA2D,EAA3D,EAA+D,CAACL,GAAD,EAAM+E,GAAN,KAAc;IACtF,IAAI/E,GAAG,IAAI,IAAX,EAAiB;MACf,OAAOsE,QAAQ,CAACtE,GAAD,CAAf;IACD;;IACDhE,KAAK,CAACiG,QAAN,CAAe8C,GAAf,EAAoBC,GAApB,EAAyBV,QAAzB;EACD,CALU,CAAX;AAMD,CA9CD;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBiJ,QAAhB,GAA2BxK,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EACtD,KAAKL,eAAL;;EAEA,IAAI,KAAKxE,KAAL,EAAJ,EAAkB;IAChB6E,QAAQ,CAAC,KAAK7E,KAAL,EAAD,CAAR;IACA,OAAO,IAAP;EACD;;EAED,KAAK+E,WAAL;;EACA,KAAKtG,OAAL,GAAe,KAAKuG,WAAL,CAAiB,KAAKvG,OAAtB,CAAf;EACAnE,oBAAoB,CAAC,KAAKgC,OAAN,EAAe,KAAKC,KAApB,CAApB;EACAhC,kBAAkB,CAAC,KAAK+B,OAAN,EAAe,KAAKC,KAApB,CAAlB,CAXsD,CAatD;;EACAH,KAAK,CAACsB,IAAN,CAAWgJ,OAAX,CAAmBtJ,IAAnB,CAAwB,IAAxB,EAA8B,EAA9B,EAAkC,CAACmD,GAAD,EAAM+E,GAAN,KAAc;IAC9C,IAAI/E,GAAJ,EAAS;MACPsE,QAAQ,CAACtE,GAAD,CAAR;MACA,OAAO,IAAP;IACD;;IAED,KAAK6F,YAAL,CAAkBd,GAAlB,EAAuB,IAAvB,EAA6BR,kBAAkB,CAAC,IAAD,EAAOD,QAAP,CAA/C;EACD,CAPD;AAQD,CAtBmC,CAApC;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBkJ,OAAhB,GAA0B,UAASrK,UAAT,EAAqBoE,UAArB,EAAiCnE,OAAjC,EAA0CuI,QAA1C,EAAoD;EAC5E,KAAKvG,EAAL,GAAU,SAAV;;EACA,KAAKC,WAAL;;EAEA,IAAI,OAAOlC,UAAP,KAAsB,UAA1B,EAAsC;IACpCwI,QAAQ,GAAGxI,UAAX;IACAA,UAAU,GAAG,IAAb;IACAoE,UAAU,GAAG,IAAb;IACAnE,OAAO,GAAG,IAAV;EACD,CALD,MAKO,IAAI,OAAOmE,UAAP,KAAsB,UAA1B,EAAsC;IAC3CoE,QAAQ,GAAGpE,UAAX;IACAnE,OAAO,GAAG,IAAV;IACAmE,UAAU,GAAG,IAAb;EACD,CAJM,MAIA,IAAI,OAAOnE,OAAP,KAAmB,UAAvB,EAAmC;IACxCuI,QAAQ,GAAGvI,OAAX;IACAA,OAAO,GAAG,IAAV;EACD,CAhB2E,CAkB5E;;;EACAD,UAAU,GAAGN,KAAK,CAAC6J,QAAN,CAAevJ,UAAf,CAAb;;EAEA,IAAIC,OAAJ,EAAa;IACX,KAAK+B,UAAL,CAAgB/B,OAAhB;EACD;;EAED,IAAImE,UAAJ,EAAgB;IACd,KAAKZ,MAAL,CAAYY,UAAZ;EACD;;EAED,IAAInF,MAAM,CAACuK,QAAP,CAAgBxJ,UAAhB,CAAJ,EAAiC;IAC/B,KAAKyJ,KAAL,CAAWzJ,UAAX;IAEA0J,4BAA4B,CAAC,IAAD,CAA5B;EACD,CAJD,MAIO,IAAI1J,UAAU,IAAI,IAAlB,EAAwB;IAC7B,KAAK2D,KAAL,CAAW,IAAI/F,oBAAJ,CAAyBoC,UAAzB,EAAqC,QAArC,EAA+C,SAA/C,CAAX;EACD;;EAED,IAAI,CAACwI,QAAL,EAAe;IACb;IACA,OAAOzI,KAAK,CAACsB,IAAN,CAAWgJ,OAAX,CAAmBtJ,IAAnB,CAAwB,IAAxB,CAAP;EACD;;EAED,KAAK4I,IAAL,CAAUnB,QAAV;EACA,OAAO,IAAP;AACD,CA5CD;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBmJ,MAAhB,GAAyB1K,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EACpD,IAAI;IACF,KAAKpK,IAAL,CAAU,KAAK8B,KAAf;EACD,CAFD,CAEE,OAAOgE,GAAP,EAAY;IACZ,KAAKP,KAAL,CAAWO,GAAX;EACD;;EAED,IAAI,KAAKP,KAAL,EAAJ,EAAkB;IAChB,OAAO6E,QAAQ,CAAC,KAAK7E,KAAL,EAAD,CAAf;EACD;;EAED1F,oBAAoB,CAAC,KAAKgC,OAAN,EAAe,KAAKC,KAApB,CAApB;EACAhC,kBAAkB,CAAC,KAAK+B,OAAN,EAAe,KAAKC,KAApB,CAAlB;EAEA,MAAM4D,KAAK,GAAG,KAAK3B,WAAnB;;EACA,MAAMlC,OAAO,GAAG,KAAK4H,eAAL,EAAhB;;EAEA,KAAKpF,WAAL,CAAiB8H,KAAjB,CAAuBzG,KAAvB,EAA8B7D,OAA9B,EAAuCP,KAAK,CAAC8K,IAAN,CAAWhC,QAAX,CAAvC;AACD,CAlBiC,CAAlC;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBsJ,eAAhB,GAAkC7K,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EAC7D,IAAI;IACF,KAAKpK,IAAL,CAAU,KAAK8B,KAAf;EACD,CAFD,CAEE,OAAOgE,GAAP,EAAY;IACZ,KAAKP,KAAL,CAAWO,GAAX;EACD;;EAED,IAAI,KAAKP,KAAL,EAAJ,EAAkB;IAChB,OAAO6E,QAAQ,CAAC,KAAK7E,KAAL,EAAD,CAAf;EACD;;EAED1F,oBAAoB,CAAC,KAAKgC,OAAN,EAAe,KAAKC,KAApB,CAApB;EACAhC,kBAAkB,CAAC,KAAK+B,OAAN,EAAe,KAAKC,KAApB,CAAlB;EAEA,MAAM4D,KAAK,GAAG,KAAK3B,WAAnB;;EACA,MAAMlC,OAAO,GAAG,KAAK4H,eAAL,EAAhB;;EAEA,KAAKpF,WAAL,CAAiBtC,UAAjB,CAA4BuK,cAA5B,CAA2C5G,KAA3C,EAAkD7D,OAAlD,EAA2DP,KAAK,CAAC8K,IAAN,CAAWhC,QAAX,CAA3D;AACD,CAlB0C,CAA3C;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBwJ,uBAAhB,GAA0C/K,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EACrE,IAAI,KAAK7E,KAAL,EAAJ,EAAkB;IAChB,OAAO6E,QAAQ,CAAC,KAAK7E,KAAL,EAAD,CAAf;EACD;;EAED,MAAM1D,OAAO,GAAG,KAAK4H,eAAL,EAAhB;;EAEA,KAAKpF,WAAL,CAAiBtC,UAAjB,CAA4ByK,sBAA5B,CAAmD3K,OAAnD,EAA4DP,KAAK,CAAC8K,IAAN,CAAWhC,QAAX,CAA5D;AACD,CARkD,CAAnD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBoJ,KAAhB,GAAwB,UAASnB,MAAT,EAAiBZ,QAAjB,EAA2B;EACjD,KAAKvG,EAAL,GAAU,OAAV;;EACA,KAAKC,WAAL;;EACA,IAAI,OAAOkH,MAAP,KAAkB,UAAtB,EAAkC;IAChCZ,QAAQ,GAAGY,MAAX;IACAA,MAAM,GAAG5E,SAAT;EACD;;EAED4E,MAAM,GAAG1J,KAAK,CAAC6J,QAAN,CAAeH,MAAf,CAAT;;EAEA,IAAInK,MAAM,CAACuK,QAAP,CAAgBJ,MAAhB,CAAJ,EAA6B;IAC3B,KAAKK,KAAL,CAAWL,MAAX;EACD;;EAED,IAAI,CAACZ,QAAL,EAAe;IACb,OAAO,IAAP;EACD;;EAED,KAAKmB,IAAL,CAAUnB,QAAV;EAEA,OAAO,IAAP;AACD,CArBD;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgByJ,sBAAhB,GAAyC,UAAS3K,OAAT,EAAkBuI,QAAlB,EAA4B;EACnE,KAAKvG,EAAL,GAAU,wBAAV;;EACA,KAAKC,WAAL;;EACA,IAAI,OAAOjC,OAAP,KAAmB,UAAvB,EAAmC;IACjCuI,QAAQ,GAAGvI,OAAX;IACAA,OAAO,GAAGuE,SAAV;EACD;;EAED,IAAI,OAAOvE,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,IAAI,IAA9C,EAAoD;IAClD,KAAK+B,UAAL,CAAgB/B,OAAhB;EACD;;EAED,IAAI,CAACuI,QAAL,EAAe;IACb,OAAO,IAAP;EACD;;EAED,KAAKmB,IAAL,CAAUnB,QAAV;EAEA,OAAO,IAAP;AACD,CAnBD;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBuJ,cAAhB,GAAiC,UAAS1K,UAAT,EAAqBC,OAArB,EAA8BuI,QAA9B,EAAwC;EACvE,KAAKvG,EAAL,GAAU,gBAAV;;EACA,KAAKC,WAAL;;EACA,IAAI,OAAOlC,UAAP,KAAsB,UAA1B,EAAsC;IACpCwI,QAAQ,GAAGxI,UAAX;IACAA,UAAU,GAAGwE,SAAb;IACAvE,OAAO,GAAGuE,SAAV;EACD;;EACD,IAAI,OAAOvE,OAAP,KAAmB,UAAvB,EAAmC;IACjCuI,QAAQ,GAAGvI,OAAX;IACAA,OAAO,GAAGuE,SAAV;EACD;;EAEDxE,UAAU,GAAGN,KAAK,CAAC6J,QAAN,CAAevJ,UAAf,CAAb;;EAEA,IAAIf,MAAM,CAACuK,QAAP,CAAgBxJ,UAAhB,CAAJ,EAAiC;IAC/B,KAAKyJ,KAAL,CAAWzJ,UAAX;EACD;;EAED,IAAI,OAAOC,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,IAAI,IAA9C,EAAoD;IAClD,KAAK+B,UAAL,CAAgB/B,OAAhB;EACD;;EAED,IAAI,CAACuI,QAAL,EAAe;IACb,OAAO,IAAP;EACD;;EAED,KAAKmB,IAAL,CAAUnB,QAAV;EAEA,OAAO,IAAP;AACD,CA9BD;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgB0J,UAAhB,GAA6BjL,SAAS,CAAC,SAASiL,UAAT,CAAoBrC,QAApB,EAA8B;EACnE,KAAKL,eAAL;;EAEA,IAAI,KAAKxE,KAAL,EAAJ,EAAkB;IAChB6E,QAAQ,CAAC,KAAK7E,KAAL,EAAD,CAAR;IACA,OAAO,IAAP;EACD;;EAED1F,oBAAoB,CAAC,KAAKgC,OAAN,EAAe,KAAKC,KAApB,CAApB;EACAhC,kBAAkB,CAAC,KAAK+B,OAAN,EAAe,KAAKC,KAApB,CAAlB;;EAEA,MAAMD,OAAO,GAAG,KAAK4H,eAAL,EAAhB,CAXmE,CAanE;;;EACA,KAAKpF,WAAL,CAAiBtC,UAAjB,CACE2K,QADF,CACW,KAAKtI,SADhB,EAC2B,KAAKL,WADhC,EAC6ClC,OAD7C,EACsDuI,QADtD;AAED,CAhBqC,CAAtC;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzI,KAAK,CAACoB,SAAN,CAAgB2J,QAAhB,GAA2B,UAAS7F,KAAT,EAAgBjF,UAAhB,EAA4BwI,QAA5B,EAAsC;EAC/D,KAAKvG,EAAL,GAAU,UAAV;;EACA,KAAKC,WAAL;;EACA,IAAI,CAACsG,QAAL,EAAe;IACb,IAAI,OAAOxI,UAAP,KAAsB,UAA1B,EAAsC;MACpCwI,QAAQ,GAAGxI,UAAX;MACAA,UAAU,GAAGwE,SAAb;IACD,CAHD,MAGO,IAAI,OAAOS,KAAP,KAAiB,UAArB,EAAiC;MACtCuD,QAAQ,GAAGvD,KAAX;MACAA,KAAK,GAAGT,SAAR;MACAxE,UAAU,GAAGwE,SAAb;IACD;EACF;;EAEDxE,UAAU,GAAGN,KAAK,CAAC6J,QAAN,CAAevJ,UAAf,CAAb;;EAEA,IAAIf,MAAM,CAACuK,QAAP,CAAgBxJ,UAAhB,CAAJ,EAAiC;IAC/B,KAAKyJ,KAAL,CAAWzJ,UAAX;IAEA0J,4BAA4B,CAAC,IAAD,CAA5B;EACD,CAJD,MAIO,IAAI1J,UAAU,IAAI,IAAlB,EAAwB;IAC7B,KAAK2D,KAAL,CAAW,IAAI/F,oBAAJ,CAAyBoC,UAAzB,EAAqC,QAArC,EAA+C,UAA/C,CAAX;EACD;;EAED,IAAIiF,KAAK,IAAI,IAAb,EAAmB;IACjB,KAAKzC,SAAL,GAAiByC,KAAjB;EACD;;EAED,IAAIuD,QAAQ,IAAI,IAAhB,EAAsB;IACpB,KAAKmB,IAAL,CAAUnB,QAAV;EACD;;EAED,OAAO,IAAP;AACD,CAjCD;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBY,IAAhB,GAAuB,UAASkB,GAAT,EAAc;EACnC,IAAIL,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;IACxB,MAAM,IAAIe,KAAJ,CAAU,8BAAV,CAAN;EACD;;EAED,OAAO7D,KAAK,CAACsB,IAAN,CAAWU,IAAX,CAAgBhB,IAAhB,CAAqB,IAArB,EAA2BkC,GAA3B,CAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAlD,KAAK,CAACoB,SAAN,CAAgB4J,MAAhB,GAAyB,UAAS3B,MAAT,EAAiBZ,QAAjB,EAA2B;EAClD,KAAKvG,EAAL,GAAU,QAAV;;EACA,IAAI,OAAOmH,MAAP,KAAkB,UAAtB,EAAkC;IAChCZ,QAAQ,GAAGY,MAAX;IACAA,MAAM,GAAG,IAAT;EACD;;EAEDA,MAAM,GAAG1J,KAAK,CAAC6J,QAAN,CAAeH,MAAf,CAAT;;EAEA,IAAInK,MAAM,CAACuK,QAAP,CAAgBJ,MAAhB,CAAJ,EAA6B;IAC3B,KAAKK,KAAL,CAAWL,MAAX;IAEAM,4BAA4B,CAAC,IAAD,CAA5B;EACD,CAJD,MAIO,IAAIN,MAAM,IAAI,IAAd,EAAoB;IACzB,KAAKzF,KAAL,CAAW,IAAI/F,oBAAJ,CAAyBwL,MAAzB,EAAiC,QAAjC,EAA2C,QAA3C,CAAX;EACD;;EAED,IAAI,CAACZ,QAAL,EAAe;IACb,OAAOzI,KAAK,CAACsB,IAAN,CAAW0J,MAAX,CAAkBhK,IAAlB,CAAuB,IAAvB,CAAP;EACD;;EAED,KAAK4I,IAAL,CAAUnB,QAAV;EACA,OAAO,IAAP;AACD,CAvBD;AAyBA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgB6J,OAAhB,GAA0BpL,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EACrD,KAAKL,eAAL;;EAEA,IAAI,KAAKxE,KAAL,MAAgB,IAApB,EAA0B;IACxB6E,QAAQ,CAAC,KAAK7E,KAAL,EAAD,CAAR;IACA,OAAO,IAAP;EACD;;EAED6E,QAAQ,GAAGC,kBAAkB,CAAC,IAAD,EAAOD,QAAP,CAA7B;EAEA,OAAOzI,KAAK,CAACsB,IAAN,CAAW0J,MAAX,CAAkBhK,IAAlB,CAAuB,IAAvB,EAA6ByH,QAA7B,CAAP;AACD,CAXkC,CAAnC;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzI,KAAK,CAACoB,SAAN,CAAgB8J,SAAhB,GAA4B,UAAS7B,MAAT,EAAiBnJ,OAAjB,EAA0BuI,QAA1B,EAAoC;EAC9D,KAAKvG,EAAL,GAAU,WAAV;;EACA,IAAI,OAAOmH,MAAP,KAAkB,UAAtB,EAAkC;IAChCZ,QAAQ,GAAGY,MAAX;IACAA,MAAM,GAAG,IAAT;IACAnJ,OAAO,GAAG,IAAV;EACD,CAJD,MAIO,IAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;IACxCuI,QAAQ,GAAGvI,OAAX;IACAA,OAAO,GAAG,IAAV;EACD,CAHM,MAGA;IACL,KAAK+B,UAAL,CAAgB/B,OAAhB;EACD;;EAEDmJ,MAAM,GAAG1J,KAAK,CAAC6J,QAAN,CAAeH,MAAf,CAAT;;EAEA,IAAInK,MAAM,CAACuK,QAAP,CAAgBJ,MAAhB,CAAJ,EAA6B;IAC3B,KAAKK,KAAL,CAAWL,MAAX;IAEAM,4BAA4B,CAAC,IAAD,CAA5B;EACD,CAJD,MAIO,IAAIN,MAAM,IAAI,IAAd,EAAoB;IACzB,KAAKzF,KAAL,CAAW,IAAI/F,oBAAJ,CAAyBwL,MAAzB,EAAiC,QAAjC,EAA2C,WAA3C,CAAX;EACD;;EAED,IAAI,CAACZ,QAAL,EAAe;IACb,OAAOzI,KAAK,CAACsB,IAAN,CAAW4J,SAAX,CAAqBlK,IAArB,CAA0B,IAA1B,CAAP;EACD;;EAED,KAAK4I,IAAL,CAAU5I,IAAV,CAAe,IAAf,EAAqByH,QAArB;EAEA,OAAO,IAAP;AACD,CA9BD;AAgCA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgB+J,UAAhB,GAA6BtL,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EACxD,KAAKL,eAAL;;EAEA,IAAI,KAAKxE,KAAL,MAAgB,IAApB,EAA0B;IACxB6E,QAAQ,CAAC,KAAK7E,KAAL,EAAD,CAAR;IACA,OAAO,IAAP;EACD;;EAED6E,QAAQ,GAAGC,kBAAkB,CAAC,IAAD,EAAOD,QAAP,CAA7B;EAEA,OAAOzI,KAAK,CAACsB,IAAN,CAAW4J,SAAX,CAAqBlK,IAArB,CAA0B,IAA1B,EAAgCyH,QAAhC,CAAP;AACD,CAXqC,CAAtC;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBgK,UAAhB,GAA6B,UAAS/B,MAAT,EAAiBnJ,OAAjB,EAA0BuI,QAA1B,EAAoC;EAC/D,KAAKvG,EAAL,GAAU,YAAV;;EACA,IAAI,OAAOmH,MAAP,KAAkB,UAAtB,EAAkC;IAChCZ,QAAQ,GAAGY,MAAX;IACAA,MAAM,GAAG,IAAT;IACAnJ,OAAO,GAAG,IAAV;EACD,CAJD,MAIO,IAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;IACxCuI,QAAQ,GAAGvI,OAAX;IACAA,OAAO,GAAG,IAAV;EACD,CAHM,MAGA;IACL,KAAK+B,UAAL,CAAgB/B,OAAhB;EACD;;EAEDmJ,MAAM,GAAG1J,KAAK,CAAC6J,QAAN,CAAeH,MAAf,CAAT;;EAEA,IAAInK,MAAM,CAACuK,QAAP,CAAgBJ,MAAhB,CAAJ,EAA6B;IAC3B,KAAKK,KAAL,CAAWL,MAAX;IAEAM,4BAA4B,CAAC,IAAD,CAA5B;EACD,CAJD,MAIO,IAAIN,MAAM,IAAI,IAAd,EAAoB;IACzB,KAAKzF,KAAL,CAAW,IAAI/F,oBAAJ,CAAyBwL,MAAzB,EAAiC,QAAjC,EAA2C,YAA3C,CAAX;EACD;;EAED,IAAI,CAACZ,QAAL,EAAe;IACb,OAAOzI,KAAK,CAACsB,IAAN,CAAW8J,UAAX,CAAsBpK,IAAtB,CAA2B,IAA3B,CAAP;EACD;;EAED,KAAK4I,IAAL,CAAU5I,IAAV,CAAe,IAAf,EAAqByH,QAArB;EAEA,OAAO,IAAP;AACD,CA9BD;AAgCA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBiK,WAAhB,GAA8BxL,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EACzD,KAAKL,eAAL;;EAEA,IAAI,KAAKxE,KAAL,MAAgB,IAApB,EAA0B;IACxB6E,QAAQ,CAAC,KAAK7E,KAAL,EAAD,CAAR;IACA,OAAO,IAAP;EACD;;EAED6E,QAAQ,GAAGC,kBAAkB,CAAC,IAAD,EAAOD,QAAP,CAA7B;EAEA,OAAOzI,KAAK,CAACsB,IAAN,CAAW8J,UAAX,CAAsBpK,IAAtB,CAA2B,IAA3B,EAAiCyH,QAAjC,CAAP;AACD,CAXsC,CAAvC;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS2B,WAAT,CAAqBjK,KAArB,EAA4B+I,GAA5B,EAAiCe,GAAjC,EAAsC/J,OAAtC,EAA+CqE,MAA/C,EAAuDC,kBAAvD,EAA2E2E,GAA3E,EAAgFV,QAAhF,EAA0F;EACxF,IAAIvI,OAAO,CAACgK,SAAR,IAAqBhB,GAAG,IAAI,IAAhC,EAAsC;IACpCoC,KAAK,CAAC,IAAD,CAAL;;IACA,OAAO,IAAP;EACD;;EAEDzM,OAAO,CAAC0M,kBAAR,CAA2BpL,KAA3B,EAAkC+I,GAAlC,EAAuC3E,MAAvC,EAA+CC,kBAA/C,EAAmEtE,OAAnE,EAA4EiJ,GAA5E,EAAiFmC,KAAjF;;EAEA,SAASA,KAAT,CAAenH,GAAf,EAAoBqH,MAApB,EAA4B;IAC1B,IAAIrH,GAAJ,EAAS;MACP,OAAOrF,SAAS,CAAC,MAAM2J,QAAQ,CAACtE,GAAD,CAAf,CAAhB;IACD;;IAGD,IAAIjE,OAAO,CAACgK,SAAZ,EAAuB;MACrB,IAAIhB,GAAG,IAAIsC,MAAX,EAAmB;QACjB,IAAItL,OAAO,CAAC0F,OAAR,IAAmB,IAAvB,EAA6B;UAC3B4F,MAAM,CAACC,QAAP,CAAgBvL,OAAO,CAAC0F,OAAxB;QACD;;QACDqE,GAAG,CAACpF,KAAJ,GAAY2G,MAAZ;MACD,CALD,MAKO;QACLvB,GAAG,CAACpF,KAAJ,GAAY,IAAZ;MACD;;MACD,OAAO/F,SAAS,CAAC,MAAM2J,QAAQ,CAAC,IAAD,EAAOwB,GAAP,CAAf,CAAhB;IACD;;IACD,IAAI/J,OAAO,CAAC0F,OAAR,IAAmB,IAAvB,EAA6B;MAC3B4F,MAAM,CAACC,QAAP,CAAgBvL,OAAO,CAAC0F,OAAxB;IACD;;IACD9G,SAAS,CAAC,MAAM2J,QAAQ,CAAC,IAAD,EAAO+C,MAAP,CAAf,CAAT;EACD;AACF;AAED;AACA;AACA;;;AAEA,SAAS7B,4BAAT,CAAsCpB,KAAtC,EAA6C;EAC3C,IAAI,CAACA,KAAD,IAAU,CAACA,KAAK,CAACpI,KAAjB,IAA0B,CAACoI,KAAK,CAACpI,KAAN,CAAYU,MAA3C,EAAmD;IACjD;EACD;;EAED,MAAMA,MAAM,GAAG0H,KAAK,CAACpI,KAAN,CAAYU,MAA3B;;EAEA,IAAIA,MAAM,IAAIA,MAAM,CAAC6K,oBAAjB,IAAyC,CAAC7K,MAAM,CAAC6K,oBAAP,CAA4BC,MAA1E,EAAkF;IAChFpD,KAAK,CAACnG,WAAN,CAAkBvB,MAAM,CAAC6K,oBAAP,CAA4B/K,GAA9C,IAAqDE,MAAM,CAAC6K,oBAAP,CAA4B7G,KAAjF;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA7E,KAAK,CAACoB,SAAN,CAAgBwK,gBAAhB,GAAmC,UAASjK,QAAT,EAAmBuH,GAAnB,EAAwBhJ,OAAxB,EAAiCuI,QAAjC,EAA2C;EAC5E,KAAKvG,EAAL,GAAU,kBAAV;;EACA,KAAKC,WAAL;;EACA,KAAKY,SAAL;;EAEA,QAAQF,SAAS,CAACC,MAAlB;IACE,KAAK,CAAL;MACE,IAAI,OAAO5C,OAAP,KAAmB,UAAvB,EAAmC;QACjCuI,QAAQ,GAAGvI,OAAX;QACAA,OAAO,GAAG,EAAV;MACD;;MACD;;IACF,KAAK,CAAL;MACE,IAAI,OAAOgJ,GAAP,KAAe,UAAnB,EAA+B;QAC7BT,QAAQ,GAAGS,GAAX;QACAA,GAAG,GAAGvH,QAAN;QACAA,QAAQ,GAAG8C,SAAX;MACD;;MACDvE,OAAO,GAAGuE,SAAV;MACA;;IACF,KAAK,CAAL;MACE,IAAI,OAAO9C,QAAP,KAAoB,UAAxB,EAAoC;QAClC8G,QAAQ,GAAG9G,QAAX;QACAA,QAAQ,GAAGzB,OAAO,GAAGgJ,GAAG,GAAGzE,SAA3B;MACD,CAHD,MAGO;QACLyE,GAAG,GAAGvH,QAAN;QACAA,QAAQ,GAAGzB,OAAO,GAAGuE,SAArB;MACD;;EAtBL;;EAyBA,IAAIvF,MAAM,CAACuK,QAAP,CAAgB9H,QAAhB,CAAJ,EAA+B;IAC7B,KAAK+H,KAAL,CAAW/H,QAAX;EACD,CAhC2E,CAkC5E;;;EACA,IAAIuH,GAAJ,EAAS;IACP,KAAK2C,YAAL,CAAkB3C,GAAlB;EACD;;EAEDhJ,OAAO,GAAGA,OAAO,GAAGP,KAAK,CAACiC,KAAN,CAAY1B,OAAZ,CAAH,GAA0B,EAA3C;;EAEA,IAAIA,OAAO,CAACmE,UAAZ,EAAwB;IACtB,KAAKZ,MAAL,CAAYvD,OAAO,CAACmE,UAApB;IACA,OAAOnE,OAAO,CAACmE,UAAf;EACD;;EACD,IAAInE,OAAO,CAACqE,MAAZ,EAAoB;IAClB,KAAKd,MAAL,CAAYvD,OAAO,CAACqE,MAApB;IACA,OAAOrE,OAAO,CAACqE,MAAf;EACD;;EAED,MAAMuH,cAAc,GAAG,QACrB,KAAK3L,KADgB,IAErB,KAAKA,KAAL,CAAWmB,IAFU,IAGrB,KAAKnB,KAAL,CAAWmB,IAAX,CAAgBpB,OAHK,IAIrB,KAAKC,KAAL,CAAWmB,IAAX,CAAgBpB,OAAhB,CAAwB4L,cAJ1B;;EAKA,IAAI5L,OAAO,CAAC6L,GAAR,IAAe,IAAf,IAAuB7L,OAAO,CAAC8L,cAAR,IAA0B,IAAjD,IAAyD9L,OAAO,CAAC4L,cAAR,IAA0B,IAAnF,IAA2FA,cAAc,IAAI,IAAjH,EAAuH;IACrH5L,OAAO,CAAC4L,cAAR,GAAyBA,cAAzB;EACD;;EAED,KAAK7J,UAAL,CAAgB/B,OAAhB;;EAEA,IAAI,CAACuI,QAAL,EAAe;IACb,OAAO,IAAP;EACD;;EAED,KAAKmB,IAAL,CAAUnB,QAAV;EAEA,OAAO,IAAP;AACD,CApED;AAsEA;AACA;AACA;AACA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgB6K,iBAAhB,GAAoCpM,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EAC/D,IAAI,KAAK7E,KAAL,MAAgB,IAApB,EAA0B;IACxB,OAAO6E,QAAQ,CAAC,KAAK7E,KAAL,EAAD,CAAf;EACD;;EAED,KAAKsI,cAAL,CAAoB,QAApB,EAA8BzD,QAA9B;AACD,CAN4C,CAA7C;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzI,KAAK,CAACoB,SAAN,CAAgB+K,gBAAhB,GAAmC,UAASlM,UAAT,EAAqBC,OAArB,EAA8BuI,QAA9B,EAAwC;EACzE,KAAKvG,EAAL,GAAU,kBAAV;;EACA,KAAKC,WAAL;;EACA,KAAKY,SAAL;;EAEA,QAAQF,SAAS,CAACC,MAAlB;IACE,KAAK,CAAL;MACE,IAAI,OAAO5C,OAAP,KAAmB,UAAvB,EAAmC;QACjCuI,QAAQ,GAAGvI,OAAX;QACAA,OAAO,GAAG,EAAV;MACD;;MACD;;IACF,KAAK,CAAL;MACE,IAAI,OAAOD,UAAP,KAAsB,UAA1B,EAAsC;QACpCwI,QAAQ,GAAGxI,UAAX;QACAA,UAAU,GAAGwE,SAAb;QACAvE,OAAO,GAAGuE,SAAV;MACD;;MACD;EAbJ;;EAgBA,IAAIvF,MAAM,CAACuK,QAAP,CAAgBxJ,UAAhB,CAAJ,EAAiC;IAC/B,KAAKyJ,KAAL,CAAWzJ,UAAX;EACD;;EAEDC,OAAO,IAAI,KAAK+B,UAAL,CAAgB/B,OAAhB,CAAX;;EAEA,IAAI,CAACuI,QAAL,EAAe;IACb,OAAO,IAAP;EACD;;EAED,KAAKmB,IAAL,CAAUnB,QAAV;EAEA,OAAO,IAAP;AACD,CAlCD;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBgL,gBAAhB,GAAmC,UAASnM,UAAT,EAAqBC,OAArB,EAA8BuI,QAA9B,EAAwC;EACzE,KAAKvG,EAAL,GAAU,kBAAV;;EACA,KAAKC,WAAL;;EACA,KAAKY,SAAL;;EAEA,QAAQF,SAAS,CAACC,MAAlB;IACE,KAAK,CAAL;MACE,IAAI,OAAO5C,OAAP,KAAmB,UAAvB,EAAmC;QACjCuI,QAAQ,GAAGvI,OAAX;QACAA,OAAO,GAAG,EAAV;MACD;;MACD;;IACF,KAAK,CAAL;MACE,IAAI,OAAOD,UAAP,KAAsB,UAA1B,EAAsC;QACpCwI,QAAQ,GAAGxI,UAAX;QACAA,UAAU,GAAGwE,SAAb;QACAvE,OAAO,GAAGuE,SAAV;MACD;;MACD;EAbJ;;EAgBA,IAAIvF,MAAM,CAACuK,QAAP,CAAgBxJ,UAAhB,CAAJ,EAAiC;IAC/B,KAAKyJ,KAAL,CAAWzJ,UAAX;EACD;;EAEDC,OAAO,IAAI,KAAK+B,UAAL,CAAgB/B,OAAhB,CAAX;;EAEA,IAAI,CAACuI,QAAL,EAAe;IACb,OAAO,IAAP;EACD;;EAED,KAAKmB,IAAL,CAAUnB,QAAV;EAEA,OAAO,IAAP;AACD,CAlCD;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAzI,KAAK,CAACoB,SAAN,CAAgBiL,iBAAhB,GAAoCxM,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EAC/D,KAAKL,eAAL;;EAEA,IAAI,KAAKxE,KAAL,MAAgB,IAApB,EAA0B;IACxB6E,QAAQ,CAAC,KAAK7E,KAAL,EAAD,CAAR;IACA,OAAO,IAAP;EACD;;EAED,MAAMyF,MAAM,GAAG,KAAKjH,WAApB;;EACA,MAAMlC,OAAO,GAAG,KAAK4H,eAAL,EAAhB;;EACA,IAAIvD,MAAM,GAAG,IAAb;;EAEA,IAAI,KAAKlC,OAAL,IAAgB,IAApB,EAA0B;IACxBnC,OAAO,CAACmE,UAAR,GAAqB,KAAKuE,WAAL,CAAiBjJ,KAAK,CAACiC,KAAN,CAAY,KAAKS,OAAjB,CAAjB,CAArB;IACAkC,MAAM,GAAGrE,OAAO,CAACmE,UAAjB;;IACA,IAAIE,MAAM,YAAYV,KAAtB,EAA6B;MAC3B4E,QAAQ,CAAClE,MAAD,CAAR;MACA,OAAO,IAAP;IACD;EACF;;EAED,KAAK7B,WAAL,CAAiBtC,UAAjB,CAA4BgM,gBAA5B,CAA6C/C,MAA7C,EAAqDnJ,OAArD,EAA8DwI,kBAAkB,CAAC,IAAD,EAAO,CAACvE,GAAD,EAAM8F,GAAN,KAAc;IACnG,IAAI9F,GAAJ,EAAS;MACP,OAAOsE,QAAQ,CAACtE,GAAD,CAAf;IACD;;IAED,MAAM+E,GAAG,GAAGe,GAAG,CAACpF,KAAhB;IAEA,OAAO,KAAKmF,YAAL,CAAkBd,GAAlB,EAAuBe,GAAvB,EAA4BxB,QAA5B,CAAP;EACD,CAR+E,CAAhF;AASD,CA9B4C,CAA7C;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBkL,iBAAhB,GAAoC,UAASjD,MAAT,EAAiBkD,WAAjB,EAA8BrM,OAA9B,EAAuCuI,QAAvC,EAAiD;EACnF,KAAKvG,EAAL,GAAU,mBAAV;;EACA,KAAKC,WAAL;;EACA,KAAKY,SAAL;;EAEA,QAAQF,SAAS,CAACC,MAAlB;IACE,KAAK,CAAL;MACE,IAAI,OAAO5C,OAAP,KAAmB,UAAvB,EAAmC;QACjCuI,QAAQ,GAAGvI,OAAX;QACAA,OAAO,GAAG,KAAK,CAAf;MACD;;MACD;;IACF,KAAK,CAAL;MACE,IAAI,OAAOqM,WAAP,KAAuB,UAA3B,EAAuC;QACrC9D,QAAQ,GAAG8D,WAAX;QACAA,WAAW,GAAG,KAAK,CAAnB;MACD;;MACD;;IACF,KAAK,CAAL;MACE,IAAI,OAAOlD,MAAP,KAAkB,UAAtB,EAAkC;QAChCZ,QAAQ,GAAGY,MAAX;QACAA,MAAM,GAAG,KAAK,CAAd;QACAkD,WAAW,GAAG,KAAK,CAAnB;QACArM,OAAO,GAAG,KAAK,CAAf;MACD;;MACD;EApBJ;;EAuBA,IAAIhB,MAAM,CAACuK,QAAP,CAAgBJ,MAAhB,CAAJ,EAA6B;IAC3B,KAAKK,KAAL,CAAWL,MAAX;EACD;;EAED,IAAIkD,WAAW,IAAI,IAAnB,EAAyB;IACvB,IAAI3N,aAAa,CAAC2N,WAAD,CAAjB,EAAgC;MAC9B,MAAM,IAAI1I,KAAJ,CAAU,6DAAV,CAAN;IACD;;IACD,KAAKgI,YAAL,CAAkBU,WAAlB;EACD;;EAEDrM,OAAO,GAAGA,OAAO,IAAI,EAArB;EAEA,MAAM4L,cAAc,GAAG,QACvB,KAAK3L,KADkB,IAEvB,KAAKA,KAAL,CAAWmB,IAFY,IAGvB,KAAKnB,KAAL,CAAWmB,IAAX,CAAgBpB,OAHO,IAIvB,KAAKC,KAAL,CAAWmB,IAAX,CAAgBpB,OAAhB,CAAwB4L,cAJxB;;EAKA,IAAI5L,OAAO,CAAC6L,GAAR,IAAe,IAAf,IAAuB7L,OAAO,CAAC8L,cAAR,IAA0B,IAAjD,IAAyD9L,OAAO,CAAC4L,cAAR,IAA0B,IAAnF,IAA2FA,cAAc,IAAI,IAAjH,EAAuH;IACrH5L,OAAO,CAAC4L,cAAR,GAAyBA,cAAzB;EACD;;EACD,KAAK7J,UAAL,CAAgB/B,OAAhB;EACA,KAAK+B,UAAL,CAAgB;IAAEkE,SAAS,EAAE;EAAb,CAAhB;;EAEA,IAAI,CAACsC,QAAL,EAAe;IACb,OAAO,IAAP;EACD;;EAED,KAAKmB,IAAL,CAAUnB,QAAV;EAEA,OAAO,IAAP;AACD,CA3DD;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAzI,KAAK,CAACoB,SAAN,CAAgBoL,kBAAhB,GAAqC3M,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EAChE,KAAKL,eAAL;;EACA,IAAI,KAAKxE,KAAL,MAAgB,IAApB,EAA0B;IACxB6E,QAAQ,CAAC,KAAK7E,KAAL,EAAD,CAAR;IACA,OAAO,IAAP;EACD;;EAED,MAAMyF,MAAM,GAAG,KAAKjH,WAApB;;EACA,MAAMlC,OAAO,GAAG,KAAK4H,eAAL,EAAhB;;EACA2E,0BAA0B,CAACvM,OAAD,CAA1B;EACA,IAAIqE,MAAM,GAAG,IAAb;;EAEA,KAAKoE,WAAL;;EACA,IAAI,KAAKtG,OAAL,IAAgB,IAApB,EAA0B;IACxBnC,OAAO,CAACmE,UAAR,GAAqB,KAAKuE,WAAL,CAAiBjJ,KAAK,CAACiC,KAAN,CAAY,KAAKS,OAAjB,CAAjB,CAArB;IACAkC,MAAM,GAAGrE,OAAO,CAACmE,UAAjB;;IACA,IAAIE,MAAM,YAAYV,KAAtB,EAA6B;MAC3B4E,QAAQ,CAAClE,MAAD,CAAR;MACA,OAAO,IAAP;IACD;EACF;;EAED,MAAMmI,aAAa,GAAGC,UAAU,CAAC,IAAD,EAAO,eAAP,EAAwB,KAAxB,CAAhC;;EACA,IAAID,aAAa,KAAK,KAAtB,EAA6B;IAC3B,IAAI;MACF,KAAKpK,OAAL,GAAe,KAAKsK,WAAL,CAAiB,KAAKtK,OAAtB,EAA+B,IAA/B,CAAf;IACD,CAFD,CAEE,OAAO6B,GAAP,EAAY;MACZ,MAAM0I,eAAe,GAAG,IAAI5O,eAAJ,EAAxB;MACA4O,eAAe,CAACC,MAAhB,CAAuB3I,GAAG,CAACnB,IAA3B,IAAmCmB,GAAnC;MACAsE,QAAQ,CAACoE,eAAD,CAAR;MACA,OAAO,IAAP;IACD;;IAED,KAAKnK,WAAL,CAAiBtC,UAAjB,CAA4BkM,iBAA5B,CAA8CjD,MAA9C,EAAsD,KAAK/G,OAAL,IAAgB,EAAtE,EAA0EpC,OAA1E,EAAmFwI,kBAAkB,CAAC,IAAD,EAAO,CAACvE,GAAD,EAAM8F,GAAN,KAAc;MACxH,IAAI9F,GAAJ,EAAS;QACP,OAAOsE,QAAQ,CAACtE,GAAD,CAAf;MACD;;MAED,MAAM+E,GAAG,GAAGe,GAAG,CAACpF,KAAhB;MAEA,OAAO,KAAKmF,YAAL,CAAkBd,GAAlB,EAAuBe,GAAvB,EAA4BxB,QAA5B,CAAP;IACD,CARoG,CAArG;;IAUA;EACD;;EAGD,IAAIsE,SAAS,GAAG,IAAI,KAAK5M,KAAT,CAAe,KAAKmC,OAApB,EAA6B,IAA7B,EAAmC,IAAnC,CAAhB;EACA,KAAKA,OAAL,GAAeyK,SAAf;EACAA,SAAS,CAACC,QAAV,CAAmB7I,GAAG,IAAI;IACxB,IAAIA,GAAG,IAAI,IAAX,EAAiB;MACf,OAAOsE,QAAQ,CAACtE,GAAD,CAAf;IACD;;IAED,IAAI4I,SAAS,CAACE,MAAd,EAAsB;MACpBF,SAAS,GAAGA,SAAS,CAACE,MAAV,EAAZ;IACD;;IAED,KAAKvK,WAAL,CAAiBtC,UAAjB,CAA4BkM,iBAA5B,CAA8CjD,MAA9C,EAAsD0D,SAAtD,EAAiE7M,OAAjE,EAA0EwI,kBAAkB,CAAC,IAAD,EAAO,CAACvE,GAAD,EAAM8F,GAAN,KAAc;MAC/G,IAAI9F,GAAJ,EAAS;QACP,OAAOsE,QAAQ,CAACtE,GAAD,CAAf;MACD;;MAED,MAAM+E,GAAG,GAAGe,GAAG,CAACpF,KAAhB;MAEA,OAAO,KAAKmF,YAAL,CAAkBd,GAAlB,EAAuBe,GAAvB,EAA4BxB,QAA5B,CAAP;IACD,CAR2F,CAA5F;EASD,CAlBD;AAmBD,CApE6C,CAA9C;AAsEA;AACA;AACA;AACA;;AAEA,SAASgE,0BAAT,CAAoCvM,OAApC,EAA6C;EAC3C,IAAI,SAASA,OAAb,EAAsB;IACpBA,OAAO,CAAC8L,cAAR,GAAyB9L,OAAO,CAAC,KAAD,CAAP,GAAiB,OAAjB,GAA2B,QAApD;IACA,OAAOA,OAAO,CAAC,KAAD,CAAd;EACD;;EACD,IAAI,oBAAoBA,OAAxB,EAAiC;IAC/BA,OAAO,CAAC8L,cAAR,GAAyB9L,OAAO,CAAC,gBAAD,CAAP,GAA4B,QAA5B,GAAuC,OAAhE;IACA,OAAOA,OAAO,CAAC,gBAAD,CAAd;EACD,CAR0C,CAS3C;;;EACA,IAAI,OAAOA,OAAO,CAAC8L,cAAf,KAAkC,QAAtC,EAAgD;IAC9C9L,OAAO,CAAC4L,cAAR,GAAyB5L,OAAO,CAAC8L,cAAR,KAA2B,QAApD;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhM,KAAK,CAACoB,SAAN,CAAgB8L,iBAAhB,GAAoCrN,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EAC/D,IAAI,KAAK7E,KAAL,MAAgB,IAApB,EAA0B;IACxB6E,QAAQ,CAAC,KAAK7E,KAAL,EAAD,CAAR;IACA;EACD;;EAED,KAAKsI,cAAL,CAAoB,QAApB,EAA8BzD,QAA9B;AACD,CAP4C,CAA7C;AASA;AACA;AACA;;AAEA,SAASkE,UAAT,CAAoBpE,KAApB,EAA2B4E,MAA3B,EAAmCC,GAAnC,EAAwC;EACtC,MAAMtD,IAAI,GAAGvB,KAAK,CAACT,eAAN,CAAsBS,KAAK,CAACpI,KAA5B,CAAb;;EAEA,IAAIgN,MAAM,IAAIrD,IAAd,EAAoB;IAClB,OAAOA,IAAI,CAACqD,MAAD,CAAX;EACD;;EACD,IAAIA,MAAM,IAAI5E,KAAK,CAACpI,KAAN,CAAYmB,IAAZ,CAAiBpB,OAA/B,EAAwC;IACtC,OAAOqI,KAAK,CAACpI,KAAN,CAAYmB,IAAZ,CAAiBpB,OAAjB,CAAyBiN,MAAzB,CAAP;EACD;;EACD,OAAOC,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEApN,KAAK,CAACoB,SAAN,CAAgB8K,cAAhB,GAAiC,UAASmB,IAAT,EAAe5E,QAAf,EAAyB;EACxD,IAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;IAClC,MAAM,IAAI5E,KAAJ,CAAU,qCAAV,CAAN;EACD;;EAED,MAAM1D,KAAK,GAAG,KAAKA,KAAnB;EACA,MAAMU,MAAM,GAAGV,KAAK,CAACU,MAArB;;EACA,MAAMgI,KAAK,GAAG,IAAd;;EACA,IAAItE,MAAJ;EAEA,MAAM+I,WAAW,GAAGC,SAAS,CAAC,IAAD,CAA7B;;EACA,IAAID,WAAW,YAAYzJ,KAA3B,EAAkC;IAChC,OAAO4E,QAAQ,CAAC6E,WAAD,CAAf;EACD;;EAEDhF,iBAAiB,CAAC,IAAD,CAAjB;;EAEA,MAAMwB,IAAI,GAAG,KAAKhC,eAAL,CAAqB3H,KAArB,CAAb;;EAEA,IAAI,YAAY2J,IAAhB,EAAsB;IACpB,KAAKzJ,gBAAL,CAAsBmN,MAAtB,GAA+B1D,IAAI,CAAC0D,MAApC;EACD;;EAED,MAAMC,aAAa,GAAG,KAAKvN,OAAL,CAAaiG,SAAb,IAA0B,CAACvH,aAAa,CAAC,KAAK0D,OAAN,CAA9D;;EACA,IAAImL,aAAJ,EAAmB;IACjB,KAAKnL,OAAL,GAAe,IAAI,KAAKnC,KAAT,CAAe,KAAKmC,OAApB,EAA6B,IAA7B,EAAmC,IAAnC,CAAf;EACD;;EAED,IAAI+K,IAAI,KAAK,QAAb,EAAuB;IACrBvD,IAAI,CAACkB,MAAL,GAAc,IAAd;EACD,CAFD,MAEO;IACL,IAAI,EAAE,SAASlB,IAAX,KAAoB,EAAE,oBAAoBA,IAAtB,CAApB,IAAmD,EAAE,oBAAoBA,IAAtB,CAAvD,EAAoF;MAClFA,IAAI,CAACiC,GAAL,GAAW,KAAX;IACD;;IACD,IAAI,EAAE,YAAYjC,IAAd,CAAJ,EAAyB;MACvBA,IAAI,CAAC/B,MAAL,GAAc,KAAd;IACD;;IACD,IAAI+B,IAAI,CAAC/B,MAAL,IAAe+B,IAAI,CAAC,KAAD,CAAvB,EAAgC;MAC9BA,IAAI,CAACkB,MAAL,GAAc,KAAd;IACD;;IAED,IAAI,CAACyC,aAAL,EAAoB;MAClB,IAAI;QACF,KAAKnL,OAAL,GAAe,KAAKsK,WAAL,CAAiB,KAAKtK,OAAtB,EAA+BwH,IAAI,CAAC3D,SAApC,CAAf;MACD,CAFD,CAEE,OAAOhC,GAAP,EAAY;QACZ,OAAOsE,QAAQ,CAACtE,GAAD,CAAf;MACD;;MACD,MAAMuJ,KAAK,GAAGhN,MAAM,CAACqB,MAAP,CAAc,EAAd,EAAkB+H,IAAlB,EAAwB;QACpCtK,mBAAmB,EAAE,KAAKa,gBAAL,CAAsBb;MADP,CAAxB,CAAd;;MAGA,KAAK8C,OAAL,GAAe9C,mBAAmB,CAAC,KAAK4C,WAAN,EAAmBvB,MAAnB,EAA2B,KAAKyB,OAAhC,EAAyCoL,KAAzC,CAAlC;;MACA,IAAI,CAAC,KAAKpL,OAAN,IAAiB5B,MAAM,CAACD,IAAP,CAAY,KAAK6B,OAAjB,EAA0BQ,MAA1B,KAAqC,CAA1D,EAA6D;QAC3D,IAAIgH,IAAI,CAAC/B,MAAT,EAAiB;UACf;UACA,MAAMmB,GAAG,GAAGvJ,KAAK,CAACiC,KAAN,CAAY0L,WAAZ,CAAZ;UACA,OAAOpE,GAAG,CAACyE,GAAX;UACA,KAAKrL,OAAL,GAAe;YAAEoF,IAAI,EAAEwB;UAAR,CAAf;QACD,CALD,MAKO;UACL,KAAK1I,eAAL,GAAuB,IAAvB;UACA,KAAK8J,OAAL,CAAa7B,QAAb;UACA,OAAO,IAAP;QACD;MACF,CAXD,MAWO,IAAI,KAAKnG,OAAL,YAAwBuB,KAA5B,EAAmC;QACxC,OAAO4E,QAAQ,CAAC,KAAKnG,OAAN,CAAf;MACD,CAFM,MAEA;QACL;QACA;QACA;QACA,IAAI,KAAKA,OAAL,CAAaoF,IAAb,IAAqBhH,MAAM,CAACD,IAAP,CAAY,KAAK6B,OAAL,CAAaoF,IAAzB,EAA+B5E,MAA/B,KAA0C,CAAnE,EAAsE;UACpE,OAAO,KAAKR,OAAL,CAAaoF,IAApB;QACD;MACF;IACF;;IAED,IAAIvE,KAAK,CAACC,OAAN,CAAc0G,IAAI,CAAC8D,YAAnB,CAAJ,EAAsC;MACpC9D,IAAI,CAAC8D,YAAL,GAAoBxO,wBAAwB,CAAC,KAAKkD,OAAN,EAAewH,IAAI,CAAC8D,YAApB,CAA5C;IACD;EACF;;EAED,KAAKjF,WAAL;;EAEA,IAAI,KAAKtG,OAAT,EAAkB;IAChBkC,MAAM,GAAG5E,KAAK,CAACiC,KAAN,CAAY,KAAKS,OAAjB,CAAT;IACAyH,IAAI,CAACzF,UAAL,GAAkB,KAAKuE,WAAL,CAAiBrE,MAAjB,CAAlB;;IACA,IAAIuF,IAAI,CAACzF,UAAL,YAA2BR,KAA/B,EAAsC;MACpC,OAAO4E,QAAQ,CAACqB,IAAI,CAACzF,UAAN,CAAf;IACD;EACF;;EAED,IAAIyF,IAAI,CAAC9H,IAAT,EAAe6L,kBAAkB,CAAC/D,IAAD,CAAlB;;EAEf,MAAMf,EAAE,GAAG,UAAS5E,GAAT,EAAc+E,GAAd,EAAmBe,GAAnB,EAAwB;IACjC,IAAI9F,GAAJ,EAAS;MACP,OAAOsE,QAAQ,CAACtE,GAAD,CAAf;IACD;;IAED0E,KAAK,CAACmB,YAAN,CAAmBd,GAAnB,EAAwBe,GAAxB,EAA6BxB,QAA7B;EACD,CAND;;EAQA,MAAMiE,aAAa,GAAGC,UAAU,CAAC,IAAD,EAAO,eAAP,EAAwB,KAAxB,CAAhC,CAnGwD,CAqGxD;;;EACA,MAAMvM,UAAU,GAAGyI,KAAK,CAACnG,WAAN,CAAkBtC,UAArC;EACAqM,0BAA0B,CAAC3C,IAAD,CAA1B;;EAEA,IAAIuD,IAAI,KAAK,QAAb,EAAuB;IACrBjN,UAAU,CAACgM,gBAAX,CAA4BkB,WAA5B,EAAyCxD,IAAzC,EAA+CpB,kBAAkB,CAACG,KAAD,EAAQ,UAASjF,KAAT,EAAgBqG,GAAhB,EAAqB;MAC5F,OAAOlB,EAAE,CAACnF,KAAD,EAAQqG,GAAG,GAAGA,GAAG,CAACpF,KAAP,GAAeoF,GAA1B,EAA+BA,GAA/B,CAAT;IACD,CAFgE,CAAjE;IAIA,OAAO,IAAP;EACD,CA/GuD,CAiHxD;;;EACA,MAAM6D,YAAY,GAAGL,aAAa,GAAG,mBAAH,GAAyB,kBAA3D;;EAEA,IAAIf,aAAJ,EAAmB;IACjB,KAAKM,QAAL,CAAc,KAAK1K,OAAnB,EAA4BwH,IAA5B,EAAkC2D,aAAlC,EAAiD7J,KAAK,IAAI;MACxD,IAAIA,KAAJ,EAAW;QACT,OAAO6E,QAAQ,CAAC7E,KAAD,CAAf;MACD;;MACD,IAAI,KAAKtB,OAAL,IAAgB,KAAKA,OAAL,CAAa2K,MAAjC,EAAyC;QACvC,KAAK3K,OAAL,GAAe,KAAKA,OAAL,CAAa2K,MAAb,EAAf;MACD;;MAED7M,UAAU,CAAC0N,YAAD,CAAV,CAAyBR,WAAzB,EAAsC,KAAKhL,OAA3C,EAAoDwH,IAApD,EAA0DpB,kBAAkB,CAACG,KAAD,EAAQ,UAASjF,KAAT,EAAgBqG,GAAhB,EAAqB;QACvG,OAAOlB,EAAE,CAACnF,KAAD,EAAQqG,GAAG,GAAGA,GAAG,CAACpF,KAAP,GAAeoF,GAA1B,EAA+BA,GAA/B,CAAT;MACD,CAF2E,CAA5E;IAGD,CAXD;EAYD,CAbD,MAaO;IACL,IAAI,KAAK3H,OAAL,IAAgB,KAAKA,OAAL,CAAa2K,MAAjC,EAAyC;MACvC,KAAK3K,OAAL,GAAe,KAAKA,OAAL,CAAa2K,MAAb,EAAf;IACD;;IACD7M,UAAU,CAAC0N,YAAD,CAAV,CAAyBR,WAAzB,EAAsC,KAAKhL,OAA3C,EAAoDwH,IAApD,EAA0DpB,kBAAkB,CAACG,KAAD,EAAQ,UAASjF,KAAT,EAAgBqG,GAAhB,EAAqB;MACvG,OAAOlB,EAAE,CAACnF,KAAD,EAAQqG,GAAG,GAAGA,GAAG,CAACpF,KAAP,GAAeoF,GAA1B,EAA+BA,GAA/B,CAAT;IACD,CAF2E,CAA5E;EAGD;;EAED,OAAO,IAAP;AACD,CA3ID;AA6IA;AACA;AACA;;;AAEA,SAASE,gBAAT,CAA0BjB,GAA1B,EAA+Be,GAA/B,EAAoCH,IAApC,EAA0CrB,QAA1C,EAAoD;EAClD,IAAIqB,IAAI,CAACI,SAAT,EAAoB;IAClB,OAAOzB,QAAQ,CAAC,IAAD,EAAOwB,GAAP,CAAf;EACD;;EACD,OAAOxB,QAAQ,CAAC,IAAD,EAAOS,GAAP,CAAf;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAlJ,KAAK,CAACoB,SAAN,CAAgByK,YAAhB,GAA+B,UAAS3C,GAAT,EAAc;EAC3C,IAAIA,GAAG,IAAI,IAAP,IAAgB,OAAOA,GAAP,KAAe,QAAf,IAA2BxI,MAAM,CAACD,IAAP,CAAYyI,GAAZ,EAAiBpG,MAAjB,KAA4B,CAA3E,EAA+E;IAC7E;EACD;;EAED,IAAI,CAAC,KAAKR,OAAV,EAAmB;IACjB,KAAKA,OAAL,GAAea,KAAK,CAACC,OAAN,CAAc8F,GAAd,IAAqB,EAArB,GAA0B,EAAzC;EACD;;EACD,IAAIA,GAAG,YAAYlJ,KAAnB,EAA0B;IACxB,IAAImD,KAAK,CAACC,OAAN,CAAc,KAAKd,OAAnB,CAAJ,EAAiC;MAC/B,MAAM,IAAIuB,KAAJ,CAAU,qCAAV,CAAN;IACD;;IACD,IAAIqF,GAAG,CAAC5G,OAAR,EAAiB;MACf3C,KAAK,CAACoK,UAAN,CAAiB,KAAKzH,OAAtB,EAA+B4G,GAAG,CAAC5G,OAAnC;IACD;EACF,CAPD,MAOO,IAAIa,KAAK,CAACC,OAAN,CAAc8F,GAAd,CAAJ,EAAwB;IAC7B,IAAI,CAAC/F,KAAK,CAACC,OAAN,CAAc,KAAKd,OAAnB,CAAL,EAAkC;MAChC,MAAM,IAAIuB,KAAJ,CAAU,qCAAV,CAAN;IACD;;IACD,KAAKvB,OAAL,GAAe,KAAKA,OAAL,CAAayL,MAAb,CAAoB7E,GAApB,CAAf;EACD,CALM,MAKA;IACL,IAAI/F,KAAK,CAACC,OAAN,CAAc,KAAKd,OAAnB,CAAJ,EAAiC;MAC/B,MAAM,IAAIuB,KAAJ,CAAU,qCAAV,CAAN;IACD;;IACDlE,KAAK,CAACoK,UAAN,CAAiB,KAAKzH,OAAtB,EAA+B4G,GAA/B;EACD;AACF,CA1BD;AA4BA;AACA;AACA;AACA;;;AAEA,SAAS2E,kBAAT,CAA4B/D,IAA5B,EAAkC;EAChC,IAAI3G,KAAK,CAACC,OAAN,CAAc0G,IAAI,CAAC9H,IAAnB,CAAJ,EAA8B;IAC5B;EACD;;EACD,IAAI,CAACrC,KAAK,CAACmF,QAAN,CAAegF,IAAI,CAAC9H,IAApB,CAAL,EAAgC;IAC9B;EACD;;EAED,MAAMA,IAAI,GAAG,EAAb;;EAEA,KAAK,MAAMrB,GAAX,IAAkBmJ,IAAI,CAAC9H,IAAvB,EAA6B;IAC3B,IAAIrC,KAAK,CAACqO,MAAN,CAAaC,cAAb,CAA4BnE,IAAI,CAAC9H,IAAjC,EAAuCrB,GAAvC,CAAJ,EAAiD;MAC/CqB,IAAI,CAAC6F,IAAL,CAAU,CAAClH,GAAD,EAAMmJ,IAAI,CAAC9H,IAAL,CAAUrB,GAAV,CAAN,CAAV;IACD;EACF;;EAEDmJ,IAAI,CAAC9H,IAAL,GAAYA,IAAZ;AACD;AAED;AACA;AACA;;;AAEA,SAASkM,YAAT,CAAsBhM,EAAtB,EAA0BuG,QAA1B,EAAoC;EAClC,KAAKL,eAAL;;EAEAE,iBAAiB,CAAC,IAAD,CAAjB;;EAEA,IAAI,KAAK1E,KAAL,MAAgB,IAApB,EAA0B;IACxB6E,QAAQ,CAAC,KAAK7E,KAAL,EAAD,CAAR;IACA,OAAO,IAAP;EACD;;EAED6E,QAAQ,GAAGC,kBAAkB,CAAC,IAAD,EAAOD,QAAP,CAA7B;EAEA,MAAM6E,WAAW,GAAG,KAAKlL,WAAzB;;EACA,MAAMlC,OAAO,GAAG,KAAK4H,eAAL,CAAqB,KAAK3H,KAA1B,CAAhB;;EAEA,KAAKmC,OAAL,GAAe3C,KAAK,CAACiC,KAAN,CAAY,KAAKU,OAAjB,EAA0BpC,OAA1B,CAAf;EACA,MAAMuN,aAAa,GAAG,KAAKvN,OAAL,CAAaiG,SAAb,IAA0B,CAACvH,aAAa,CAAC,KAAK0D,OAAN,CAA9D;;EACA,IAAImL,aAAJ,EAAmB;IACjB,IAAIvL,EAAE,KAAK,WAAP,IAAsBA,EAAE,KAAK,YAAjC,EAA+C;MAC7C,OAAOuG,QAAQ,CAAC,IAAI7K,aAAJ,CAAkB,kCAChC,+BADgC,GACEsE,EADF,GACO,UADP,GAEhC,sDAFc,CAAD,CAAf;IAGD;;IACD,KAAKI,OAAL,GAAe,IAAI,KAAKnC,KAAT,CAAe,KAAKmC,OAApB,EAA6B,IAA7B,EAAmC,IAAnC,CAAf;EACD,CAPD,MAOO;IACL,IAAI;MACF,KAAKA,OAAL,GAAe,KAAKsK,WAAL,CAAiB,KAAKtK,OAAtB,EAA+BpC,OAAO,CAACiG,SAAvC,CAAf;IACD,CAFD,CAEE,OAAOhC,GAAP,EAAY;MACZsE,QAAQ,CAACtE,GAAD,CAAR;MACA,OAAO,IAAP;IACD;;IAED,IAAI,KAAK7B,OAAL,IAAgB,IAAhB,IAAwB5B,MAAM,CAACD,IAAP,CAAY,KAAK6B,OAAjB,EAA0BQ,MAA1B,KAAqC,CAAjE,EAAoE;MAClE2F,QAAQ,CAAC,IAAD,EAAO;QAAE0F,YAAY,EAAE;MAAhB,CAAP,CAAR;MACA,OAAO,IAAP;IACD;;IAED,MAAMT,KAAK,GAAGhN,MAAM,CAACqB,MAAP,CAAc,EAAd,EAAkB7B,OAAlB,EAA2B;MACvCV,mBAAmB,EAAE,KAAKa,gBAAL,CAAsBb;IADJ,CAA3B,CAAd;;IAGA,KAAK8C,OAAL,GAAe9C,mBAAmB,CAAC,KAAK4C,WAAN,EAAmB,KAAKjC,KAAL,CAAWU,MAA9B,EAChC,KAAKyB,OAD2B,EAClBoL,KADkB,CAAlC;EAED;;EAED,IAAIvK,KAAK,CAACC,OAAN,CAAclD,OAAO,CAAC0N,YAAtB,CAAJ,EAAyC;IACvC1N,OAAO,CAAC0N,YAAR,GAAuBxO,wBAAwB,CAAC,KAAKkD,OAAN,EAAepC,OAAO,CAAC0N,YAAvB,CAA/C;EACD;;EAED,MAAMlB,aAAa,GAAGC,UAAU,CAAC,IAAD,EAAO,eAAP,EAAwB,KAAxB,CAAhC;;EACA,IAAID,aAAJ,EAAmB;IACjB,KAAKM,QAAL,CAAc,KAAK1K,OAAnB,EAA4BpC,OAA5B,EAAqCuN,aAArC,EAAoDtJ,GAAG,IAAI;MACzD,IAAIA,GAAJ,EAAS;QACP,OAAOsE,QAAQ,CAACtE,GAAD,CAAf;MACD;;MAED,IAAI,KAAK7B,OAAL,CAAa2K,MAAjB,EAAyB;QACvB,KAAK3K,OAAL,GAAe,KAAKA,OAAL,CAAa2K,MAAb,EAAf;MACD;;MACD,KAAKvK,WAAL,CAAiBR,EAAjB,EAAqBoL,WAArB,EAAkC,KAAKhL,OAAvC,EAAgDpC,OAAhD,EAAyDuI,QAAzD;IACD,CATD;IAUA,OAAO,IAAP;EACD;;EAED,IAAI,KAAKnG,OAAL,CAAa2K,MAAjB,EAAyB;IACvB,KAAK3K,OAAL,GAAe,KAAKA,OAAL,CAAa2K,MAAb,EAAf;EACD;;EAED,KAAKvK,WAAL,CAAiBR,EAAjB,EAAqBoL,WAArB,EAAkC,KAAKhL,OAAvC,EAAgDpC,OAAhD,EAAyDuI,QAAzD;;EACA,OAAO,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgB4L,QAAhB,GAA2B,SAASA,QAAT,CAAkBD,SAAlB,EAA6B7M,OAA7B,EAAsCuN,aAAtC,EAAqDhF,QAArD,EAA+D;EACxF,OAAO/J,iBAAiB,CAAC+J,QAAD,EAAWM,EAAE,IAAI;IACvC,IAAI;MACF,IAAI0E,aAAJ,EAAmB;QACjBV,SAAS,CAACqB,SAAV,CAAoBrF,EAApB;MACD,CAFD,MAEO;QACLtJ,gBAAgB,CAAC,IAAD,EAAO,KAAKU,KAAL,CAAWU,MAAlB,EAA0BkM,SAA1B,EAAqC7M,OAArC,EAA8C6I,EAA9C,CAAhB;MACD;IACF,CAND,CAME,OAAO5E,GAAP,EAAY;MACZrF,SAAS,CAAC,YAAW;QACnBiK,EAAE,CAAC5E,GAAD,CAAF;MACD,CAFQ,CAAT;IAGD;EACF,CAZuB,CAAxB;AAaD,CAdD;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnE,KAAK,CAACoB,SAAN,CAAgBiN,WAAhB,GAA8BxO,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EACzD,OAAOyF,YAAY,CAAClN,IAAb,CAAkB,IAAlB,EAAwB,QAAxB,EAAkCyH,QAAlC,CAAP;AACD,CAFsC,CAAvC;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAzI,KAAK,CAACoB,SAAN,CAAgBkN,WAAhB,GAA8BzO,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EACzD,OAAOyF,YAAY,CAAClN,IAAb,CAAkB,IAAlB,EAAwB,YAAxB,EAAsCyH,QAAtC,CAAP;AACD,CAFsC,CAAvC;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAzI,KAAK,CAACoB,SAAN,CAAgBmN,UAAhB,GAA6B1O,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EACxD,OAAOyF,YAAY,CAAClN,IAAb,CAAkB,IAAlB,EAAwB,WAAxB,EAAqCyH,QAArC,CAAP;AACD,CAFqC,CAAtC;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAzI,KAAK,CAACoB,SAAN,CAAgBoN,WAAhB,GAA8B3O,SAAS,CAAC,UAAS4I,QAAT,EAAmB;EACzD,OAAOyF,YAAY,CAAClN,IAAb,CAAkB,IAAlB,EAAwB,YAAxB,EAAsCyH,QAAtC,CAAP;AACD,CAFsC,CAAvC;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBiG,MAAhB,GAAyB,UAASpH,UAAT,EAAqBiJ,GAArB,EAA0BhJ,OAA1B,EAAmCuI,QAAnC,EAA6C;EACpE,IAAI,OAAOvI,OAAP,KAAmB,UAAvB,EAAmC;IACjC;IACAuI,QAAQ,GAAGvI,OAAX;IACAA,OAAO,GAAG,IAAV;EACD,CAJD,MAIO,IAAI,OAAOgJ,GAAP,KAAe,UAAnB,EAA+B;IACpC;IACAT,QAAQ,GAAGS,GAAX;IACAA,GAAG,GAAGjJ,UAAN;IACAA,UAAU,GAAG,EAAb;IACAC,OAAO,GAAG,IAAV;EACD,CANM,MAMA,IAAI,OAAOD,UAAP,KAAsB,UAA1B,EAAsC;IAC3C;IACAwI,QAAQ,GAAGxI,UAAX;IACAA,UAAU,GAAGwE,SAAb;IACAyE,GAAG,GAAGzE,SAAN;IACAvE,OAAO,GAAGuE,SAAV;EACD,CANM,MAMA,IAAI,OAAOxE,UAAP,KAAsB,QAAtB,IAAkC,CAACiJ,GAAnC,IAA0C,CAAChJ,OAA3C,IAAsD,CAACuI,QAA3D,EAAqE;IAC1E;IACAS,GAAG,GAAGjJ,UAAN;IACAA,UAAU,GAAGwE,SAAb;IACAvE,OAAO,GAAGuE,SAAV;IACAgE,QAAQ,GAAGhE,SAAX;EACD;;EAED,OAAOnC,OAAO,CAAC,IAAD,EAAO,QAAP,EAAiBrC,UAAjB,EAA6BiJ,GAA7B,EAAkChJ,OAAlC,EAA2CuI,QAA3C,CAAd;AACD,CA1BD;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBqN,UAAhB,GAA6B,UAASxO,UAAT,EAAqBiJ,GAArB,EAA0BhJ,OAA1B,EAAmCuI,QAAnC,EAA6C;EACxE,IAAI,OAAOvI,OAAP,KAAmB,UAAvB,EAAmC;IACjC;IACAuI,QAAQ,GAAGvI,OAAX;IACAA,OAAO,GAAG,IAAV;EACD,CAJD,MAIO,IAAI,OAAOgJ,GAAP,KAAe,UAAnB,EAA+B;IACpC;IACAT,QAAQ,GAAGS,GAAX;IACAA,GAAG,GAAGjJ,UAAN;IACAA,UAAU,GAAG,EAAb;IACAC,OAAO,GAAG,IAAV;EACD,CANM,MAMA,IAAI,OAAOD,UAAP,KAAsB,UAA1B,EAAsC;IAC3C;IACAwI,QAAQ,GAAGxI,UAAX;IACAA,UAAU,GAAGwE,SAAb;IACAyE,GAAG,GAAGzE,SAAN;IACAvE,OAAO,GAAGuE,SAAV;EACD,CANM,MAMA,IAAI,OAAOxE,UAAP,KAAsB,QAAtB,IAAkC,CAACiJ,GAAnC,IAA0C,CAAChJ,OAA3C,IAAsD,CAACuI,QAA3D,EAAqE;IAC1E;IACAS,GAAG,GAAGjJ,UAAN;IACAA,UAAU,GAAGwE,SAAb;IACAvE,OAAO,GAAGuE,SAAV;IACAgE,QAAQ,GAAGhE,SAAX;EACD;;EAED,OAAOnC,OAAO,CAAC,IAAD,EAAO,YAAP,EAAqBrC,UAArB,EAAiCiJ,GAAjC,EAAsChJ,OAAtC,EAA+CuI,QAA/C,CAAd;AACD,CA1BD;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBsN,SAAhB,GAA4B,UAASzO,UAAT,EAAqBiJ,GAArB,EAA0BhJ,OAA1B,EAAmCuI,QAAnC,EAA6C;EACvE,IAAI,OAAOvI,OAAP,KAAmB,UAAvB,EAAmC;IACjC;IACAuI,QAAQ,GAAGvI,OAAX;IACAA,OAAO,GAAG,IAAV;EACD,CAJD,MAIO,IAAI,OAAOgJ,GAAP,KAAe,UAAnB,EAA+B;IACpC;IACAT,QAAQ,GAAGS,GAAX;IACAA,GAAG,GAAGjJ,UAAN;IACAA,UAAU,GAAG,EAAb;IACAC,OAAO,GAAG,IAAV;EACD,CANM,MAMA,IAAI,OAAOD,UAAP,KAAsB,UAA1B,EAAsC;IAC3C;IACAwI,QAAQ,GAAGxI,UAAX;IACAA,UAAU,GAAGwE,SAAb;IACAyE,GAAG,GAAGzE,SAAN;IACAvE,OAAO,GAAGuE,SAAV;EACD,CANM,MAMA,IAAI,OAAOxE,UAAP,KAAsB,QAAtB,IAAkC,CAACiJ,GAAnC,IAA0C,CAAChJ,OAA3C,IAAsD,CAACuI,QAA3D,EAAqE;IAC1E;IACAS,GAAG,GAAGjJ,UAAN;IACAA,UAAU,GAAGwE,SAAb;IACAvE,OAAO,GAAGuE,SAAV;IACAgE,QAAQ,GAAGhE,SAAX;EACD;;EAED,OAAOnC,OAAO,CAAC,IAAD,EAAO,WAAP,EAAoBrC,UAApB,EAAgCiJ,GAAhC,EAAqChJ,OAArC,EAA8CuI,QAA9C,CAAd;AACD,CA1BD;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBuN,UAAhB,GAA6B,UAAS1O,UAAT,EAAqBiJ,GAArB,EAA0BhJ,OAA1B,EAAmCuI,QAAnC,EAA6C;EACxE,IAAI,OAAOvI,OAAP,KAAmB,UAAvB,EAAmC;IACjC;IACAuI,QAAQ,GAAGvI,OAAX;IACAA,OAAO,GAAG,IAAV;EACD,CAJD,MAIO,IAAI,OAAOgJ,GAAP,KAAe,UAAnB,EAA+B;IACpC;IACAT,QAAQ,GAAGS,GAAX;IACAA,GAAG,GAAGjJ,UAAN;IACAA,UAAU,GAAG,EAAb;IACAC,OAAO,GAAG,IAAV;EACD,CANM,MAMA,IAAI,OAAOD,UAAP,KAAsB,UAA1B,EAAsC;IAC3C;IACAwI,QAAQ,GAAGxI,UAAX;IACAA,UAAU,GAAGwE,SAAb;IACAyE,GAAG,GAAGzE,SAAN;IACAvE,OAAO,GAAGuE,SAAV;EACD,CANM,MAMA,IAAI,OAAOxE,UAAP,KAAsB,QAAtB,IAAkC,CAACiJ,GAAnC,IAA0C,CAAChJ,OAA3C,IAAsD,CAACuI,QAA3D,EAAqE;IAC1E;IACAS,GAAG,GAAGjJ,UAAN;IACAA,UAAU,GAAGwE,SAAb;IACAvE,OAAO,GAAGuE,SAAV;IACAgE,QAAQ,GAAGhE,SAAX;EACD;;EAED,KAAKxC,UAAL,CAAgB;IAAEkE,SAAS,EAAE;EAAb,CAAhB;EACA,OAAO7D,OAAO,CAAC,IAAD,EAAO,YAAP,EAAqBrC,UAArB,EAAiCiJ,GAAjC,EAAsChJ,OAAtC,EAA+CuI,QAA/C,CAAd;AACD,CA3BD;AA6BA;AACA;AACA;;;AAEA,SAASnG,OAAT,CAAiBiG,KAAjB,EAAwBrG,EAAxB,EAA4BmH,MAA5B,EAAoCH,GAApC,EAAyChJ,OAAzC,EAAkDuI,QAAlD,EAA4D;EAC1D;EACAF,KAAK,CAACrG,EAAN,GAAWA,EAAX;;EACAqG,KAAK,CAACpG,WAAN;;EACAkH,MAAM,GAAG1J,KAAK,CAAC6J,QAAN,CAAeH,MAAf,CAAT;EACAH,GAAG,GAAGA,GAAG,IAAI,EAAb,CAL0D,CAO1D;;EACA,IAAIhJ,OAAO,IAAI,IAAf,EAAqB;IACnB,IAAI,YAAYA,OAAhB,EAAyB;MACvBqI,KAAK,CAAClI,gBAAN,CAAuBmN,MAAvB,GAAgCtN,OAAO,CAACsN,MAAxC;IACD;EACF;;EAED,IAAI,EAAEnE,MAAM,YAAYrJ,KAApB,KACAqJ,MAAM,IAAI,IADV,IAEAA,MAAM,CAAC5D,QAAP,OAAsB,iBAF1B,EAE6C;IAC3C8C,KAAK,CAAC3E,KAAN,CAAY,IAAI/F,oBAAJ,CAAyBwL,MAAzB,EAAiC,QAAjC,EAA2CnH,EAA3C,CAAZ;EACD,CAJD,MAIO;IACLqG,KAAK,CAACmB,KAAN,CAAYL,MAAZ;EACD;;EAED,IAAI1J,KAAK,CAACmF,QAAN,CAAe5E,OAAf,CAAJ,EAA6B;IAC3BqI,KAAK,CAACtG,UAAN,CAAiB/B,OAAjB;EACD;;EAEDqI,KAAK,CAACsD,YAAN,CAAmB3C,GAAnB,EA1B0D,CA4B1D;;;EACA,IAAIT,QAAJ,EAAc;IACZF,KAAK,CAACqB,IAAN,CAAWnB,QAAX;IAEA,OAAOF,KAAP;EACD;;EAED,OAAOvI,KAAK,CAACsB,IAAN,CAAWY,EAAX,EAAelB,IAAf,CAAoBuH,KAApB,EAA2Bc,MAA3B,EAAmC,KAAK,CAAxC,EAA2CnJ,OAA3C,EAAoDuI,QAApD,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzI,KAAK,CAACoB,SAAN,CAAgBkG,SAAhB,GAA4B,UAASsH,EAAT,EAAa;EACvC,KAAKtO,WAAL,CAAiBuH,IAAjB,CAAsB+G,EAAtB;;EACA,OAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA5O,KAAK,CAACoB,SAAN,CAAgByN,MAAhB,GAAyB,UAAS1K,GAAT,EAAc;EACrC,KAAKmD,SAAL,CAAe2C,GAAG,IAAI;IACpB,QAAQ,KAAK/H,EAAb;MACE,KAAK,MAAL;QACE,IAAI+H,GAAG,CAACnH,MAAJ,KAAe,CAAnB,EAAsB;UACpB,MAAMgM,YAAY,CAAC3K,GAAD,EAAM,IAAN,CAAlB;QACD;;QACD;;MACF,KAAK,SAAL;QACE,IAAI8F,GAAG,IAAI,IAAX,EAAiB;UACf,MAAM6E,YAAY,CAAC3K,GAAD,EAAM,IAAN,CAAlB;QACD;;QACD;;MACF,KAAK,YAAL;MACA,KAAK,QAAL;MACA,KAAK,YAAL;MACA,KAAK,WAAL;QACE,IAAI8F,GAAG,IAAIA,GAAG,CAAC8E,aAAJ,KAAsB,CAAjC,EAAoC;UAClC,MAAMD,YAAY,CAAC3K,GAAD,EAAM,IAAN,CAAlB;QACD;;QACD;;MACF,KAAK,kBAAL;MACA,KAAK,kBAAL;QACE,IAAI,CAAC8F,GAAG,IAAIA,GAAG,CAAC+E,eAAX,IAA8B/E,GAAG,CAAC+E,eAAJ,CAAoBC,CAAnD,MAA0D,CAA9D,EAAiE;UAC/D,MAAMH,YAAY,CAAC3K,GAAD,EAAM,IAAN,CAAlB;QACD;;QACD;;MACF,KAAK,kBAAL;MACA,KAAK,mBAAL;QACE,IAAI,CAAC8F,GAAG,IAAIA,GAAG,CAAC+E,eAAX,IAA8B/E,GAAG,CAAC+E,eAAJ,CAAoBE,eAAnD,MAAwE,KAA5E,EAAmF;UACjF,MAAMJ,YAAY,CAAC3K,GAAD,EAAM,IAAN,CAAlB;QACD;;QACD;;MACF,KAAK,YAAL;MACA,KAAK,WAAL;MACA,KAAK,QAAL;QACE,IAAI8F,GAAG,CAACkF,YAAJ,KAAqB,CAAzB,EAA4B;UAC1B,MAAML,YAAY,CAAC3K,GAAD,EAAM,IAAN,CAAlB;QACD;;QACD;;MACF;QACE;IAvCJ;;IA0CA,OAAO8F,GAAP;EACD,CA5CD;EA6CA,OAAO,IAAP;AACD,CA/CD;AAiDA;AACA;AACA;;;AAEA,SAAS6E,YAAT,CAAsB3K,GAAtB,EAA2BoE,KAA3B,EAAkC;EAChC,IAAI,OAAOpE,GAAP,KAAe,UAAnB,EAA+B;IAC7BA,GAAG,GAAGA,GAAG,CAACnD,IAAJ,CAASuH,KAAT,CAAN;EACD;;EAED,IAAIpE,GAAG,IAAI,IAAX,EAAiB;IACfA,GAAG,GAAG,IAAIzG,qBAAJ,CAA0B6K,KAAK,CAACxB,QAAN,EAA1B,EAA4CwB,KAAK,CAACpI,KAAN,CAAYuF,SAAxD,CAAN;EACD;;EAED,OAAOvB,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAnE,KAAK,CAACoB,SAAN,CAAgBwI,IAAhB,GAAuB,SAASA,IAAT,CAAc1H,EAAd,EAAkBuG,QAAlB,EAA4B;EACjD,MAAMI,KAAK,GAAG,IAAd,CADiD,CAEjD;EACA;;;EACA,MAAMuG,SAAS,GAAG,IAAI5R,SAAJ,EAAlB;;EAEA,IAAI,OAAO0E,EAAP,KAAc,UAAlB,EAA8B;IAC5BuG,QAAQ,GAAGvG,EAAX;IACAA,EAAE,GAAG,IAAL;EACD,CAHD,MAGO,IAAI,OAAOA,EAAP,KAAc,QAAlB,EAA4B;IACjC,KAAKA,EAAL,GAAUA,EAAV;EACD;;EAED,IAAI,KAAKA,EAAL,IAAW,IAAf,EAAqB;IACnB,MAAM,IAAI2B,KAAJ,CAAU,uCAAV,CAAN;EACD;;EACD,KAAK1B,WAAL;;EAEAsG,QAAQ,GAAG,KAAKtI,KAAL,CAAWkP,oBAAX,CAAgC5G,QAAhC,CAAX;EAEA,OAAO/J,iBAAiB,CAAC+J,QAAD,EAAYM,EAAD,IAAQ;IACzCA,EAAE,GAAG,KAAK5I,KAAL,CAAWmP,aAAX,CAAyBvG,EAAzB,CAAL;;IAEA,IAAI,CAACF,KAAK,CAAC3G,EAAX,EAAe;MACb6G,EAAE;MACF;IACD;;IAED,KAAKxI,MAAL,CAAYgP,OAAZ,CAAoB,MAApB,EAA4B,IAA5B,EAAkC,EAAlC,EAAuC3L,KAAD,IAAW;MAC/C,IAAIA,KAAK,IAAI,IAAb,EAAmB;QACjB,OAAOmF,EAAE,CAACyG,oBAAoB,CAACJ,SAAD,EAAYxL,KAAZ,CAArB,CAAT;MACD;;MACD,IAAI6L,KAAK,GAAG,MAAM,KAAKvN,EAAvB;;MACA,IAAI,KAAKA,EAAL,KAAY,QAAhB,EAA0B;QACxBuN,KAAK,GAAG,aAAR;MACD,CAFD,MAEO,IAAI,KAAKvN,EAAL,KAAY,UAAhB,EAA4B;QACjCuN,KAAK,GAAG,YAAR;MACD;;MACD,KAAKA,KAAL,EAAYzO,IAAZ,CAAiB,IAAjB,EAAuB,CAAC4C,KAAD,EAAQqG,GAAR,KAAgB;QACrC,IAAIrG,KAAJ,EAAW;UACT,OAAOmF,EAAE,CAACyG,oBAAoB,CAACJ,SAAD,EAAYxL,KAAZ,CAArB,CAAT;QACD;;QAED,KAAKrD,MAAL,CAAYmP,QAAZ,CAAqB,MAArB,EAA6B,IAA7B,EAAmC,EAAnC,EAAuC,EAAvC,EAA4C9L,KAAD,IAAW;UACpD,IAAIA,KAAJ,EAAW;YACT,OAAOmF,EAAE,CAACyG,oBAAoB,CAACJ,SAAD,EAAYxL,KAAZ,CAArB,CAAT;UACD;;UAEDmF,EAAE,CAAC,IAAD,EAAOkB,GAAP,CAAF;QACD,CAND;MAOD,CAZD;IAaD,CAvBD;EAwBD,CAhCuB,EAgCrB,KAAK9J,KAAL,CAAWwP,MAhCU,CAAxB;AAiCD,CArDD;AAuDA;AACA;AACA;;;AAEA,SAASH,oBAAT,CAA8BJ,SAA9B,EAAyCxL,KAAzC,EAAgD;EAC9C,IAAIA,KAAK,YAAYpG,SAArB,EAAgC;IAC9B4R,SAAS,CAACQ,IAAV,CAAehM,KAAf;IACA,OAAOwL,SAAP;EACD;;EAED,OAAOxL,KAAP;AACD;AAED;AACA;AACA;;;AAEA,SAAS8E,kBAAT,CAA4BH,KAA5B,EAAmCQ,EAAnC,EAAuC;EACrC,OAAO,UAASnF,KAAT,EAAgBqG,GAAhB,EAAqB;IAC1B,IAAIrG,KAAK,IAAI,IAAb,EAAmB;MACjB,OAAOmF,EAAE,CAACnF,KAAD,CAAT;IACD;;IAED,KAAK,MAAMgL,EAAX,IAAiBrG,KAAK,CAACjI,WAAvB,EAAoC;MAClC,IAAI;QACF2J,GAAG,GAAG2E,EAAE,CAAC3E,GAAD,CAAR;MACD,CAFD,CAEE,OAAOrG,KAAP,EAAc;QACd,OAAOmF,EAAE,CAACnF,KAAD,CAAT;MACD;IACF;;IAED,OAAOmF,EAAE,CAAC,IAAD,EAAOkB,GAAP,CAAT;EACD,CAdD;AAeD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAjK,KAAK,CAACoB,SAAN,CAAgByO,IAAhB,GAAuB,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;EAC/C,OAAO,KAAKnG,IAAL,GAAYiG,IAAZ,CAAiBC,OAAjB,EAA0BC,MAA1B,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA/P,KAAK,CAACoB,SAAN,CAAgB4O,KAAhB,GAAwB,UAASD,MAAT,EAAiB;EACvC,OAAO,KAAKnG,IAAL,GAAYiG,IAAZ,CAAiB,IAAjB,EAAuBE,MAAvB,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA/P,KAAK,CAACoB,SAAN,CAAgB6O,GAAhB,GAAsB,UAASrB,EAAT,EAAa;EACjC,KAAKrO,MAAL,CAAY0P,GAAZ,CAAgB,MAAhB,EAAwBrB,EAAxB;;EACA,OAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA5O,KAAK,CAACoB,SAAN,CAAgB8O,IAAhB,GAAuB,UAAStB,EAAT,EAAa;EAClC,KAAKrO,MAAL,CAAY2P,IAAZ,CAAiB,MAAjB,EAAyBtB,EAAzB;;EACA,OAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA5O,KAAK,CAACoB,SAAN,CAAgBwL,WAAhB,GAA8B,SAASA,WAAT,CAAqBuD,GAArB,EAA0BhK,SAA1B,EAAqC;EACjE,IAAItF,MAAM,GAAG,KAAKA,MAAlB;EAEA,MAAMuP,gBAAgB,GAAGvP,MAAM,CAACX,OAAP,CAAekQ,gBAAxC;EACA,MAAMC,UAAU,GAAGxP,MAAM,CAACyP,WAAP,GAAqBzP,MAAM,CAACyP,WAA5B,GAA0CzP,MAA7D;;EACA,IAAI,KAAKR,gBAAL,CAAsBiG,yBAAtB,IACA6J,GAAG,CAACC,gBAAD,CAAH,IAAyB,IADzB,IAEAC,UAAU,CAACE,cAFf,EAE+B;IAC7B,MAAMC,OAAO,GAAGH,UAAU,CAACE,cAAX,CAA0BJ,GAAG,CAACC,gBAAD,CAA7B,CAAhB;;IACA,IAAII,OAAO,IAAI,IAAf,EAAqB;MACnB3P,MAAM,GAAG2P,OAAT;IACD;EACF;;EAED,IAAIzI,MAAJ;;EACA,IAAI,YAAY,KAAK7H,OAArB,EAA8B;IAC5B6H,MAAM,GAAG,KAAK7H,OAAL,CAAa6H,MAAtB;EACD;;EAED,MAAMsB,MAAM,GAAG,KAAKjH,WAApB;;EACA,IAAIvB,MAAM,IAAI,IAAV,IACAlB,KAAK,CAAC+E,sBAAN,CAA6B2E,MAA7B,EAAqCxI,MAAM,CAACX,OAAP,CAAekQ,gBAApD,CADA,IAEA,OAAO/G,MAAM,CAACxI,MAAM,CAACX,OAAP,CAAekQ,gBAAhB,CAAb,KAAmD,QAFnD,IAGAvP,MAAM,CAAC0P,cAAP,IAAyB,IAH7B,EAGmC;IACjC,MAAME,kBAAkB,GAAGpH,MAAM,CAACxI,MAAM,CAACX,OAAP,CAAekQ,gBAAhB,CAAjC;IACA,MAAMM,OAAO,GAAG/R,uBAAuB,CAAC,KAAKwB,KAAL,CAAWoQ,cAAZ,EAA4BE,kBAA5B,CAAvC;IACA5P,MAAM,GAAGA,MAAM,CAAC0P,cAAP,CAAsBE,kBAAtB,KACNC,OAAO,IAAIA,OAAO,CAAC7P,MADb,IAEPA,MAFF;EAGD;;EAED,OAAOrC,UAAU,CAACqC,MAAD,EAASsP,GAAT,EAAc;IAC7BhK,SAAS,EAAEA,SADkB;IAE7BqH,MAAM,EAAE,KAAKnN,gBAAL,CAAsBmN,MAFD;IAG7BzF,MAAM,EAAEA,MAHqB;IAI7B6F,YAAY,EAAE,KAAK1N,OAAL,CAAa0N,YAJE;IAK7BtH,yBAAyB,EAAE,KAAKjG,gBAAL,CAAsBiG;EALpB,CAAd,EAMd,IANc,EAMR,KAAKlE,WANG,CAAjB;AAOD,CAtCD;AAwCA;AACA;AACA;AACA;;;AAEA,SAASmL,SAAT,CAAmBhF,KAAnB,EAA0B;EACxB,IAAI;IACF,OAAOA,KAAK,CAAClK,IAAN,CAAWkK,KAAK,CAACpI,KAAjB,CAAP;EACD,CAFD,CAEE,OAAOgE,GAAP,EAAY;IACZ,OAAOA,GAAP;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAnE,KAAK,CAACoB,SAAN,CAAgBgF,QAAhB,GAA2B,YAAW;EACpC;EACA,IAAI,CAACjD,KAAK,CAACwN,IAAN,CAAW9N,SAAX,EAAsB+N,IAAtB,CAA2BC,OAA3B,CAAL,EAA0C;IACxC,OAAO,IAAP;EACD;;EAED,MAAM5G,GAAG,GAAGtK,KAAK,CAACyG,QAAN,CAAeK,KAAf,CAAqB,IAArB,EAA2B5D,SAA3B,CAAZ,CANoC,CAQpC;EACA;;EACA,IAAI,KAAK3C,OAAL,IAAgB,IAApB,EAA0B;IACxB,MAAM4Q,WAAW,GAAG,KAAK5Q,OAAL,CAAa4Q,WAAjC;IACA,MAAMC,QAAQ,GAAG,KAAK7Q,OAAL,CAAasF,cAA9B;;IAEA,KAAK,MAAMwL,eAAX,IAA8B/G,GAA9B,EAAmC;MACjC,IAAI6G,WAAW,IAAI,IAAf,IAAuB,CAACE,eAAe,IAAIA,eAAe,CAAC9Q,OAAnC,IAA8C8Q,eAAe,CAAC9Q,OAAhB,CAAwB4Q,WAAvE,KAAuF,IAAlH,EAAwH;QACtHE,eAAe,CAAC9Q,OAAhB,GAA0B8Q,eAAe,CAAC9Q,OAAhB,IAA2B,EAArD;QACA8Q,eAAe,CAAC9Q,OAAhB,CAAwB4Q,WAAxB,GAAsCA,WAAtC;MACD;;MACD,IAAIC,QAAQ,IAAI,IAAZ,IAAoB,CAACC,eAAe,IAAIA,eAAe,CAAC9Q,OAAnC,IAA8C8Q,eAAe,CAAC9Q,OAAhB,CAAwBsF,cAAvE,KAA0F,IAAlH,EAAwH;QACtHwL,eAAe,CAAC9Q,OAAhB,GAA0B8Q,eAAe,CAAC9Q,OAAhB,IAA2B,EAArD;QACA8Q,eAAe,CAAC9Q,OAAhB,CAAwBsF,cAAxB,GAAyCuL,QAAzC;MACD;IACF;EACF;;EAED,MAAMjH,IAAI,GAAG,KAAKzJ,gBAAlB;;EAEA,IAAIyJ,IAAI,CAAC/I,IAAL,IAAa,IAAjB,EAAuB;IACrB,MAAMA,IAAI,GAAG+I,IAAI,CAAC/I,IAAlB;;IACA,KAAK,MAAMiQ,eAAX,IAA8B/G,GAA9B,EAAmC;MACjC,IAAI,CAAC+G,eAAe,IAAIA,eAAe,CAAC9Q,OAAnC,IAA8C8Q,eAAe,CAAC9Q,OAAhB,CAAwBa,IAAvE,KAAgF,IAApF,EAA0F;QACxFiQ,eAAe,CAAC9Q,OAAhB,GAA0B8Q,eAAe,CAAC9Q,OAAhB,IAA2B,EAArD;QACA8Q,eAAe,CAAC9Q,OAAhB,CAAwBa,IAAxB,GAA+BA,IAA/B;MACD;IACF;EACF;;EAED,IAAI,CAACpB,KAAK,CAACmF,QAAN,CAAegF,IAAI,CAAC1D,QAApB,CAAL,EAAoC;IAClC0D,IAAI,CAAC1D,QAAL,GAAgB,EAAhB;EACD;;EAED,MAAM+C,GAAG,GAAGW,IAAI,CAAC1D,QAAjB;;EAEA,KAAK,MAAM4K,eAAX,IAA8B/G,GAA9B,EAAmC;IACjC,MAAMjH,IAAI,GAAGgO,eAAe,CAAChO,IAA7B;;IACA,IAAImG,GAAG,CAACnG,IAAD,CAAH,IAAamG,GAAG,CAACnG,IAAD,CAAH,CAAUoD,QAAvB,IAAmC4K,eAAe,CAAC5K,QAAvD,EAAiE;MAC/D4K,eAAe,CAAC5K,QAAhB,GAA2B+C,GAAG,CAACnG,IAAD,CAAH,CAAUoD,QAAV,CAAmB2H,MAAnB,CAA0BiD,eAAe,CAAC5K,QAA1C,CAA3B;IACD;;IAED+C,GAAG,CAAC6H,eAAe,CAAChO,IAAjB,CAAH,GAA4BgO,eAA5B;EACD;;EACD,OAAO,IAAP;AACD,CArDD;AAuDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAhR,KAAK,CAACoB,SAAN,CAAgB6P,iBAAhB,GAAoC,SAASA,iBAAT,GAA6B;EAC/D,MAAMd,GAAG,GAAG,KAAK9P,gBAAL,CAAsB+F,QAAtB,IAAkC,EAA9C;EACA,MAAMqB,GAAG,GAAG/G,MAAM,CAACD,IAAP,CAAY0P,GAAZ,CAAZ;;EACA,KAAK,MAAMnN,IAAX,IAAmBtC,MAAM,CAACD,IAAP,CAAY0P,GAAZ,CAAnB,EAAqC;IACnC,MAAMhH,GAAG,GAAGgH,GAAG,CAACnN,IAAD,CAAf;;IACA,IAAI,CAACG,KAAK,CAACC,OAAN,CAAc+F,GAAG,CAAC/C,QAAlB,CAAL,EAAkC;MAChC;IACD;;IACD8K,kBAAkB,CAACzJ,GAAD,EAAM0B,GAAG,CAAC/C,QAAV,EAAoBpD,IAAI,GAAG,GAA3B,CAAlB;EACD;;EACD,OAAOyE,GAAP;AACD,CAXD;AAaA;AACA;AACA;;;AAEA,SAASyJ,kBAAT,CAA4BC,IAA5B,EAAkCC,GAAlC,EAAuCC,MAAvC,EAA+C;EAC7C,KAAK,MAAMlI,GAAX,IAAkBiI,GAAlB,EAAuB;IACrBD,IAAI,CAACtJ,IAAL,CAAUwJ,MAAM,GAAGlI,GAAG,CAACnG,IAAvB;;IACA,IAAI,CAACG,KAAK,CAACC,OAAN,CAAc+F,GAAG,CAAC/C,QAAlB,CAAL,EAAkC;MAChC;IACD;;IACD8K,kBAAkB,CAACC,IAAD,EAAOhI,GAAG,CAAC/C,QAAX,EAAqBiL,MAAM,GAAGlI,GAAG,CAACnG,IAAb,GAAoB,GAAzC,CAAlB;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAhD,KAAK,CAACoB,SAAN,CAAgB/C,IAAhB,GAAuB,UAAS8B,KAAT,EAAgBgQ,GAAhB,EAAqB;EAC1CA,GAAG,KAAKA,GAAG,GAAG,KAAK/N,WAAhB,CAAH;EAEAjC,KAAK,GAAGA,KAAK,IAAI,KAAKA,KAAtB;EACA,MAAMiQ,gBAAgB,GAAGjQ,KAAK,CAACU,MAAN,CAAaX,OAAb,CAAqBkQ,gBAA9C;;EACA,IAAID,GAAG,IAAI,IAAP,IACAA,GAAG,CAAClC,cAAJ,CAAmBmC,gBAAnB,CADJ,EAC0C;IACxCjQ,KAAK,GAAGxB,uBAAuB,CAACwB,KAAK,CAACoQ,cAAP,EAAuBJ,GAAG,CAACC,gBAAD,CAA1B,CAAvB,IAAwEjQ,KAAhF;EACD;;EAED,MAAM2J,IAAI,GAAG;IAAE/B,MAAM,EAAE,KAAK7H,OAAL,IAAgB,KAAKA,OAAL,CAAa6H;EAAvC,CAAb;;EACA,IAAI,KAAK7H,OAAT,EAAkB;IAChB,IAAI,YAAY,KAAKA,OAArB,EAA8B;MAC5B4J,IAAI,CAAC0D,MAAL,GAAc,KAAKtN,OAAL,CAAasN,MAA3B;MACA1D,IAAI,CAACwH,WAAL,GAAmBxH,IAAI,CAAC0D,MAAxB;IACD;;IACD,IAAI,iBAAiB,KAAKtN,OAA1B,EAAmC;MACjC4J,IAAI,CAACwH,WAAL,GAAmB,KAAKpR,OAAL,CAAaoR,WAAhC;IACD;EACF;;EAED,IAAI;IACF,OAAOjT,IAAI,CAAC8B,KAAK,CAACU,MAAP,EAAesP,GAAf,EAAoBrG,IAApB,EAA0B,IAA1B,CAAX;EACD,CAFD,CAEE,OAAO3F,GAAP,EAAY;IACZ;IACA,IAAI,OAAOA,GAAG,CAACoN,QAAX,KAAwB,UAA5B,EAAwC;MACtCpN,GAAG,CAACoN,QAAJ,CAAapR,KAAb;IACD;;IACD,MAAMgE,GAAN;EACD;AACF,CA9BD;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAnE,KAAK,CAACoB,SAAN,CAAgBwH,WAAhB,GAA8B,SAASA,WAAT,CAAqBrE,MAArB,EAA6B;EACzD,IAAIiN,QAAJ,EACIC,aADJ,EAEIhR,IAFJ,EAGIE,GAHJ,EAII+Q,GAJJ,EAKIpO,CALJ;;EAOA,IAAIiB,MAAJ,EAAY;IACV9D,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAY8D,MAAZ,CAAP;IACAkN,aAAa,GAAG,EAAhB;IACAnO,CAAC,GAAG7C,IAAI,CAACqC,MAAT,CAHU,CAKV;;IACA,OAAOQ,CAAC,EAAR,EAAY;MACV3C,GAAG,GAAGF,IAAI,CAAC6C,CAAD,CAAV;;MACA,IAAIiB,MAAM,CAAC5D,GAAD,CAAN,CAAYgR,UAAhB,EAA4B;QAC1BH,QAAQ,KAAKA,QAAQ,GAAG,EAAhB,CAAR;QACAA,QAAQ,CAAC7Q,GAAD,CAAR,GAAgB4D,MAAM,CAAC5D,GAAD,CAAtB;QACA8Q,aAAa,CAAC5J,IAAd,CAAmBlH,GAAnB;MACD;IACF;EACF;;EAED,IAAI6Q,QAAJ,EAAc;IACZ;IACA,IAAI;MACFE,GAAG,GAAG,KAAKrT,IAAL,CAAU,KAAK8B,KAAf,EAAsBqR,QAAtB,CAAN;IACD,CAFD,CAEE,OAAOrN,GAAP,EAAY;MACZ,OAAOA,GAAP;IACD,CANW,CAQZ;;;IACAb,CAAC,GAAGmO,aAAa,CAAC3O,MAAlB;;IACA,OAAOQ,CAAC,EAAR,EAAY;MACV3C,GAAG,GAAG8Q,aAAa,CAACnO,CAAD,CAAnB;MACAiB,MAAM,CAAC5D,GAAD,CAAN,GAAc+Q,GAAG,CAAC/Q,GAAD,CAAjB;IACD;EACF;;EAED,OAAO4D,MAAP;AACD,CAzCD;AA2CA;AACA;AACA;AACA;;;AAEAvE,KAAK,CAACoB,SAAN,CAAgBuH,WAAhB,GAA8B,SAASiJ,UAAT,GAAsB;EAClD,KAAKvP,OAAL,GAAe,KAAKA,OAAL,IAAgB,EAA/B;EACAxD,OAAO,CAAC+S,UAAR,CAAmB,KAAKvP,OAAxB,EAAiC,KAAKlC,KAAL,CAAWU,MAA5C;EAEA,IAAIgR,qBAAqB,GAAG,IAA5B;;EAEA,IAAI,0BAA0B,KAAK1R,KAAL,CAAWmB,IAAX,CAAgBpB,OAA9C,EAAuD;IACrD2R,qBAAqB,GAAG,KAAK1R,KAAL,CAAWmB,IAAX,CAAgBpB,OAAhB,CAAwB4R,oBAAhD;EACD;;EACD,IAAI,0BAA0B,KAAK3R,KAAL,CAAWU,MAAX,CAAkBX,OAAhD,EAAyD;IACvD2R,qBAAqB,GAAG,KAAK1R,KAAL,CAAWU,MAAX,CAAkBX,OAAlB,CAA0B4R,oBAAlD;EACD;;EAED,IAAID,qBAAJ,EAA2B;IACzBtS,qBAAqB,CAAC,KAAK8C,OAAN,EAAe,KAAKiC,mBAApB,EAAyC,KAAKjE,gBAAL,CAAsB+F,QAA/D,CAArB;EACD;AACF,CAhBD;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEApG,KAAK,CAACoB,SAAN,CAAgBkI,MAAhB,GAAyB,SAASA,MAAT,CAAgBQ,IAAhB,EAAsB;EAC7C,KAAKnB,WAAL;;EACA,KAAKtG,OAAL,GAAe,KAAKuG,WAAL,CAAiB,KAAKvG,OAAtB,CAAf;EACA,KAAKJ,UAAL,CAAgB;IAAEoC,UAAU,EAAE,KAAK8C,cAAL;EAAd,CAAhB;;EACA,IAAI2C,IAAJ,EAAU;IACR,KAAK7H,UAAL,CAAgB6H,IAAhB;EACD;;EAED,MAAM5J,OAAO,GAAGQ,MAAM,CAACqB,MAAP,CAAc,EAAd,EAAkB,KAAK+F,eAAL,EAAlB,EAA0C;IACxDzD,UAAU,EAAE,KAAKA,UAAL;EAD4C,CAA1C,CAAhB;;EAGA,IAAI;IACF,KAAKhG,IAAL,CAAU,KAAK8B,KAAf;EACD,CAFD,CAEE,OAAOgE,GAAP,EAAY;IACZ,OAAQ,IAAIrG,WAAJ,CAAgB,IAAhB,EAAsBoC,OAAtB,CAAD,CAAiC6R,UAAjC,CAA4C5N,GAA5C,CAAP;EACD;;EAED,OAAO,IAAIrG,WAAJ,CAAgB,IAAhB,EAAsBoC,OAAtB,CAAP;AACD,CAlBD,C,CAoBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAF,KAAK,CAACoB,SAAN,CAAgB4Q,OAAhB,GAA0BhS,KAAK,CAACsB,IAAN,CAAW2Q,OAArC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAjS,KAAK,CAACoB,SAAN,CAAgB8Q,QAAhB,GAA2B,UAASjP,GAAT,EAAc6G,IAAd,EAAoB;EAC7C;EACA;EACA,IAAI7G,GAAG,IAAI,IAAP,IAAe,OAAOA,GAAG,CAAC5B,WAAX,KAA2B,UAA1C,IAAwD4B,GAAG,CAAC5B,WAAJ,CAAgB8Q,IAAhB,KAAyB,QAArF,EAA+F;IAC7FrI,IAAI,GAAG7G,GAAP;IACAA,GAAG,GAAG,IAAN;EACD;;EAED,IAAIA,GAAG,KAAKwB,SAAZ,EAAuB;IACrBxB,GAAG,GAAG,IAAN;EACD;;EAED,IAAI6G,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;IACpC,KAAK,MAAMnJ,GAAX,IAAkBD,MAAM,CAACD,IAAP,CAAYqJ,IAAZ,CAAlB,EAAqC;MACnC,IAAInJ,GAAG,KAAK,WAAR,IAAuBA,GAAG,KAAK,WAAnC,EAAgD;QAAE;QAChD;QACA,KAAKT,OAAL,CAAa,WAAb,IAA4B,CAAC,CAAC4J,IAAI,CAACnJ,GAAD,CAAlC;MACD,CAHD,MAGO;QACL,KAAKT,OAAL,CAAaS,GAAb,IAAoBmJ,IAAI,CAACnJ,GAAD,CAAxB;MACD;IACF;EACF;;EAED,OAAOX,KAAK,CAACsB,IAAN,CAAW4Q,QAAX,CAAoBlR,IAApB,CAAyB,IAAzB,EAA+BiC,GAA/B,CAAP;AACD,CAxBD;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAjD,KAAK,CAACoB,SAAN,CAAgBgR,IAAhB,GAAuB,YAAW;EAChC,MAAMC,MAAM,GAAG,EAAf;EACA,MAAMC,MAAM,GAAG,KAAKjS,gBAAL,CAAsBkS,UAArC,CAFgC,CAIhC;;EAEA,IAAI1P,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;IAC1B,IAAIK,KAAK,CAACC,OAAN,CAAcP,SAAS,CAAC,CAAD,CAAvB,CAAJ,EAAiC;MAC/BwP,MAAM,CAACxK,IAAP,CAAY;QAAE2K,MAAM,EAAE3P,SAAS,CAAC,CAAD,CAAnB;QAAwB4P,SAAS,EAAEH;MAAnC,CAAZ;IACD,CAFD,MAEO,IAAI,OAAOzP,SAAS,CAAC,CAAD,CAAhB,KAAwB,QAA5B,EAAsC;MAC3C;MACAwP,MAAM,CAACxK,IAAP,CAAYhF,SAAS,CAAC,CAAD,CAA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IACjD,OAAO,KAAKrJ,MAAL,GAAcsJ,aAAd,GAA8BC,0BAA9B,EAAP;EACD,CAFD;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAEA7S,KAAK,CAACoB,SAAN,CAAgB0R,GAAhB,GAAsB,UAASC,EAAT,EAAaC,EAAb,EAAiB;EACrC,IAAI,CAAC7P,KAAK,CAACC,OAAN,CAAc2P,EAAd,CAAD,IAAsBpT,KAAK,CAACmF,QAAN,CAAeiO,EAAf,CAA1B,EAA8C;IAC5CC,EAAE,GAAGD,EAAE,CAACC,EAAR;IACAD,EAAE,GAAGA,EAAE,CAACA,EAAR;EACD;;EACD,OAAO/S,KAAK,CAACsB,IAAN,CAAWwR,GAAX,CAAe9R,IAAf,CAAoB,IAApB,EAA0B+R,EAA1B,EAA8BC,EAA9B,CAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAhT,KAAK,CAACoB,SAAN,CAAgBoR,MAAhB,GAAyBxS,KAAK,CAACsB,IAAN,CAAW2R,MAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAjT,KAAK,CAACoB,SAAN,CAAgB8R,YAAhB,GAA+B,YAAW;EACxC,IAAIrQ,SAAS,CAAC,CAAD,CAAT,IAAgB,IAAhB,IAAwB,OAAOA,SAAS,CAAC,CAAD,CAAT,CAAaxB,WAApB,KAAoC,UAA5D,IAA0EwB,SAAS,CAAC,CAAD,CAAT,CAAaxB,WAAb,CAAyB8Q,IAAzB,KAAkC,QAAhH,EAA0H;IACxHtP,SAAS,CAAC,CAAD,CAAT,CAAa4P,SAAb,GAAyB,IAAzB;EACD;;EAED,IAAI5P,SAAS,CAAC,CAAD,CAAT,IAAgB,IAAhB,IAAwB,OAAOA,SAAS,CAAC,CAAD,CAAT,CAAaxB,WAApB,KAAoC,UAA5D,IAA0EwB,SAAS,CAAC,CAAD,CAAT,CAAaxB,WAAb,CAAyB8Q,IAAzB,KAAkC,QAAhH,EAA0H;IACxHtP,SAAS,CAAC,CAAD,CAAT,CAAa4P,SAAb,GAAyB,IAAzB;EACD;;EAEDzS,KAAK,CAACsB,IAAN,CAAW2R,MAAX,CAAkBxM,KAAlB,CAAwB,IAAxB,EAA8B5D,SAA9B;AACD,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA7C,KAAK,CAACoB,SAAN,CAAgB2D,mBAAhB,GAAsC,SAASA,mBAAT,GAA+B;EACnE,OAAO/F,WAAW,CAAC,KAAKqD,OAAN,CAAlB;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEArC,KAAK,CAACoB,SAAN,CAAgB+D,mBAAhB,GAAsC,SAASA,mBAAT,GAA+B;EACnE,OAAOpG,WAAW,CAAC,KAAKsD,OAAN,CAAlB;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEArC,KAAK,CAACoB,SAAN,CAAgBjB,KAAhB;AAEA;AACA;AACA;;AAEAgT,MAAM,CAACC,OAAP,GAAiBpT,KAAjB"},"metadata":{},"sourceType":"script"}